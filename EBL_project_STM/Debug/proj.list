
proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08009ec0  08009ec0  00019ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a31c  0800a31c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a31c  0800a31c  0001a31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a324  0800a324  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a328  0800a328  0001a328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a32c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004804  200001e0  0800a50c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049e4  0800a50c  000249e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c411  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003852  00000000  00000000  0003c621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0003fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  000414b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019587  00000000  00000000  000429d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191cd  00000000  00000000  0005bf5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b59c  00000000  00000000  0007512c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001106c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fbc  00000000  00000000  0011071c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ea8 	.word	0x08009ea8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009ea8 	.word	0x08009ea8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4a07      	ldr	r2, [pc, #28]	; (8000edc <vApplicationGetIdleTaskMemory+0x2c>)
 8000ec0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <vApplicationGetIdleTaskMemory+0x30>)
 8000ec6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200001fc 	.word	0x200001fc
 8000ee0:	20000250 	.word	0x20000250

08000ee4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <vApplicationGetTimerTaskMemory+0x2c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <vApplicationGetTimerTaskMemory+0x30>)
 8000efa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f02:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	20000450 	.word	0x20000450
 8000f14:	200004a4 	.word	0x200004a4

08000f18 <Detect1Task>:
char uartBuf[100];
char temp_amb[128];
char temp_obj[128];
char c;

void Detect1Task (void const *argument){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	sprintf(uartBuf,"i");
 8000f20:	491c      	ldr	r1, [pc, #112]	; (8000f94 <Detect1Task+0x7c>)
 8000f22:	481d      	ldr	r0, [pc, #116]	; (8000f98 <Detect1Task+0x80>)
 8000f24:	f006 fda4 	bl	8007a70 <siprintf>

//	sprintf(temp_amb,"%f\r\n", MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TAMB) );
//	sprintf(temp_obj,"%f\r\n", MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TOBJ1) );

	for(;;){
		if(HAL_UART_Receive(&huart1,&c , 1, 100) == HAL_OK){
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	491b      	ldr	r1, [pc, #108]	; (8000f9c <Detect1Task+0x84>)
 8000f2e:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <Detect1Task+0x88>)
 8000f30:	f002 fd31 	bl	8003996 <HAL_UART_Receive>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f6      	bne.n	8000f28 <Detect1Task+0x10>
//		   HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
			if(c == 'd'){
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <Detect1Task+0x84>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b64      	cmp	r3, #100	; 0x64
 8000f40:	d1f2      	bne.n	8000f28 <Detect1Task+0x10>
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 8000f42:	2102      	movs	r1, #2
 8000f44:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <Detect1Task+0x8c>)
 8000f46:	f001 f8ad 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0eb      	beq.n	8000f28 <Detect1Task+0x10>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, 1); // turn on LED
 8000f50:	2201      	movs	r2, #1
 8000f52:	2120      	movs	r1, #32
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <Detect1Task+0x8c>)
 8000f56:	f001 f8bd 	bl	80020d4 <HAL_GPIO_WritePin>
				   HAL_Delay (1000);
 8000f5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f5e:	f000 fd55 	bl	8001a0c <HAL_Delay>
				   while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)); //wait for pin to go low
 8000f62:	bf00      	nop
 8000f64:	2102      	movs	r1, #2
 8000f66:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <Detect1Task+0x8c>)
 8000f68:	f001 f89c 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f8      	bne.n	8000f64 <Detect1Task+0x4c>
				   HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, 0); // LED OFF
 8000f72:	2200      	movs	r2, #0
 8000f74:	2120      	movs	r1, #32
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <Detect1Task+0x8c>)
 8000f78:	f001 f8ac 	bl	80020d4 <HAL_GPIO_WritePin>
				   HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <Detect1Task+0x80>)
 8000f7e:	f7ff f92f 	bl	80001e0 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	4903      	ldr	r1, [pc, #12]	; (8000f98 <Detect1Task+0x80>)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <Detect1Task+0x88>)
 8000f8c:	f002 fc71 	bl	8003872 <HAL_UART_Transmit>
		if(HAL_UART_Receive(&huart1,&c , 1, 100) == HAL_OK){
 8000f90:	e7ca      	b.n	8000f28 <Detect1Task+0x10>
 8000f92:	bf00      	nop
 8000f94:	08009ed0 	.word	0x08009ed0
 8000f98:	2000489c 	.word	0x2000489c
 8000f9c:	20004900 	.word	0x20004900
 8000fa0:	20004858 	.word	0x20004858
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b090      	sub	sp, #64	; 0x40
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f000 fcbb 	bl	8001928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f83b 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 f97d 	bl	80012b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fba:	f000 f951 	bl	8001260 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000fbe:	f000 f925 	bl	800120c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000fc2:	f000 f8c9 	bl	8001158 <MX_TIM2_Init>
  MX_I2C3_Init();
 8000fc6:	f000 f899 	bl	80010fc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4813      	ldr	r0, [pc, #76]	; (800101c <main+0x74>)
 8000fce:	f001 fea3 	bl	8002d18 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <main+0x78>)
 8000fd4:	f107 0420 	add.w	r4, r7, #32
 8000fd8:	461d      	mov	r5, r3
 8000fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 fc1c 	bl	800482a <osThreadCreate>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <main+0x7c>)
 8000ff6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(A, Detect1Task , osPriorityNormal, 0,128);
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <main+0x80>)
 8000ffa:	1d3c      	adds	r4, r7, #4
 8000ffc:	461d      	mov	r5, r3
 8000ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001002:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001006:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadId Detect1Handle = osThreadCreate(osThread(A), NULL);
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f003 fc0b 	bl	800482a <osThreadCreate>
 8001014:	63f8      	str	r0, [r7, #60]	; 0x3c
//  osThreadDef(B, Detect2Task , osPriorityNormal, 0,128);
//  osThreadId Detect2Handle = osThreadCreate(osThread(B), NULL);
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001016:	f003 fc01 	bl	800481c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800101a:	e7fe      	b.n	800101a <main+0x72>
 800101c:	20004904 	.word	0x20004904
 8001020:	08009ed4 	.word	0x08009ed4
 8001024:	20004700 	.word	0x20004700
 8001028:	08009ef0 	.word	0x08009ef0

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	; 0x50
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	2230      	movs	r2, #48	; 0x30
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f006 f8a6 	bl	800718c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <SystemClock_Config+0xc8>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	4a26      	ldr	r2, [pc, #152]	; (80010f4 <SystemClock_Config+0xc8>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105e:	6413      	str	r3, [r2, #64]	; 0x40
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <SystemClock_Config+0xc8>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <SystemClock_Config+0xcc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <SystemClock_Config+0xcc>)
 8001076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <SystemClock_Config+0xcc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001088:	2301      	movs	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800108c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001092:	2302      	movs	r3, #2
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001096:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800109c:	2304      	movs	r3, #4
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80010a0:	2350      	movs	r3, #80	; 0x50
 80010a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010a8:	2304      	movs	r3, #4
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ac:	f107 0320 	add.w	r3, r7, #32
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 f96d 	bl	8002390 <HAL_RCC_OscConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010bc:	f000 f97c 	bl	80013b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c0:	230f      	movs	r3, #15
 80010c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c4:	2302      	movs	r3, #2
 80010c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2102      	movs	r1, #2
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fbcf 	bl	8002880 <HAL_RCC_ClockConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010e8:	f000 f966 	bl	80013b8 <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3750      	adds	r7, #80	; 0x50
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000

080010fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_I2C3_Init+0x50>)
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <MX_I2C3_Init+0x54>)
 8001104:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_I2C3_Init+0x50>)
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <MX_I2C3_Init+0x58>)
 800110a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2C3_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_I2C3_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_I2C3_Init+0x50>)
 800111a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_I2C3_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_I2C3_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_I2C3_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_I2C3_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_I2C3_Init+0x50>)
 800113a:	f000 ffe5 	bl	8002108 <HAL_I2C_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001144:	f000 f938 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20004704 	.word	0x20004704
 8001150:	40005c00 	.word	0x40005c00
 8001154:	000186a0 	.word	0x000186a0

08001158 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115e:	f107 0320 	add.w	r3, r7, #32
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <MX_TIM2_Init+0xb0>)
 800117c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001180:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_TIM2_Init+0xb0>)
 8001184:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001188:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_TIM2_Init+0xb0>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_TIM2_Init+0xb0>)
 8001192:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001196:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_TIM2_Init+0xb0>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_TIM2_Init+0xb0>)
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011a4:	4818      	ldr	r0, [pc, #96]	; (8001208 <MX_TIM2_Init+0xb0>)
 80011a6:	f001 fd67 	bl	8002c78 <HAL_TIM_PWM_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80011b0:	f000 f902 	bl	80013b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	4619      	mov	r1, r3
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <MX_TIM2_Init+0xb0>)
 80011c4:	f002 fa86 	bl	80036d4 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011ce:	f000 f8f3 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d2:	2360      	movs	r3, #96	; 0x60
 80011d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4807      	ldr	r0, [pc, #28]	; (8001208 <MX_TIM2_Init+0xb0>)
 80011ea:	f001 ff4d 	bl	8003088 <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80011f4:	f000 f8e0 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <MX_TIM2_Init+0xb0>)
 80011fa:	f000 f99f 	bl	800153c <HAL_TIM_MspPostInit>

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20004904 	.word	0x20004904

0800120c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_USART1_UART_Init+0x50>)
 8001214:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001218:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800121c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001244:	f002 fac8 	bl	80037d8 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800124e:	f000 f8b3 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20004858 	.word	0x20004858
 800125c:	40011000 	.word	0x40011000

08001260 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_USART2_UART_Init+0x50>)
 8001268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_USART2_UART_Init+0x4c>)
 8001298:	f002 fa9e 	bl	80037d8 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012a2:	f000 f889 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000494c 	.word	0x2000494c
 80012b0:	40004400 	.word	0x40004400

080012b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <MX_GPIO_Init+0xe8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a32      	ldr	r2, [pc, #200]	; (800139c <MX_GPIO_Init+0xe8>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <MX_GPIO_Init+0xe8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <MX_GPIO_Init+0xe8>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a2b      	ldr	r2, [pc, #172]	; (800139c <MX_GPIO_Init+0xe8>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <MX_GPIO_Init+0xe8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <MX_GPIO_Init+0xe8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a24      	ldr	r2, [pc, #144]	; (800139c <MX_GPIO_Init+0xe8>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <MX_GPIO_Init+0xe8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_GPIO_Init+0xe8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a1d      	ldr	r2, [pc, #116]	; (800139c <MX_GPIO_Init+0xe8>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_GPIO_Init+0xe8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2120      	movs	r1, #32
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <MX_GPIO_Init+0xec>)
 8001340:	f000 fec8 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800134a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4812      	ldr	r0, [pc, #72]	; (80013a4 <MX_GPIO_Init+0xf0>)
 800135c:	f000 fd1e 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001360:	2342      	movs	r3, #66	; 0x42
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <MX_GPIO_Init+0xec>)
 8001374:	f000 fd12 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001378:	2320      	movs	r3, #32
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_GPIO_Init+0xec>)
 8001390:	f000 fd04 	bl	8001d9c <HAL_GPIO_Init>

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020800 	.word	0x40020800

080013a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f003 fa86 	bl	80048c2 <osDelay>
 80013b6:	e7fb      	b.n	80013b0 <StartDefaultTask+0x8>

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <Error_Handler+0x8>
	...

080013c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_MspInit+0x54>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a11      	ldr	r2, [pc, #68]	; (8001418 <HAL_MspInit+0x54>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_MspInit+0x54>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_MspInit+0x54>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_MspInit+0x54>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_MspInit+0x54>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	210f      	movs	r1, #15
 8001406:	f06f 0001 	mvn.w	r0, #1
 800140a:	f000 fbfe 	bl	8001c0a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <HAL_I2C_MspInit+0xc4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d14b      	bne.n	80014d6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_I2C_MspInit+0xc8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <HAL_I2C_MspInit+0xc8>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <HAL_I2C_MspInit+0xc8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_I2C_MspInit+0xc8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <HAL_I2C_MspInit+0xc8>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_I2C_MspInit+0xc8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001476:	f44f 7300 	mov.w	r3, #512	; 0x200
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001488:	2304      	movs	r3, #4
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4815      	ldr	r0, [pc, #84]	; (80014e8 <HAL_I2C_MspInit+0xcc>)
 8001494:	f000 fc82 	bl	8001d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149e:	2312      	movs	r3, #18
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014aa:	2304      	movs	r3, #4
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <HAL_I2C_MspInit+0xd0>)
 80014b6:	f000 fc71 	bl	8001d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_I2C_MspInit+0xc8>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_I2C_MspInit+0xc8>)
 80014c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_I2C_MspInit+0xc8>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40005c00 	.word	0x40005c00
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020800 	.word	0x40020800
 80014ec:	40020000 	.word	0x40020000

080014f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001500:	d115      	bne.n	800152e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_TIM_PWM_MspInit+0x48>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_TIM_PWM_MspInit+0x48>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_TIM_PWM_MspInit+0x48>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2105      	movs	r1, #5
 8001522:	201c      	movs	r0, #28
 8001524:	f000 fb71 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001528:	201c      	movs	r0, #28
 800152a:	f000 fb8a 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800155c:	d11d      	bne.n	800159a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_TIM_MspPostInit+0x68>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <HAL_TIM_MspPostInit+0x68>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_TIM_MspPostInit+0x68>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800157a:	2301      	movs	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800158a:	2301      	movs	r3, #1
 800158c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	4619      	mov	r1, r3
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <HAL_TIM_MspPostInit+0x6c>)
 8001596:	f000 fc01 	bl	8001d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000

080015ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a36      	ldr	r2, [pc, #216]	; (80016a4 <HAL_UART_MspInit+0xf8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d135      	bne.n	800163a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a34      	ldr	r2, [pc, #208]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 80015d8:	f043 0310 	orr.w	r3, r3, #16
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001606:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800160a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001618:	2307      	movs	r3, #7
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	4822      	ldr	r0, [pc, #136]	; (80016ac <HAL_UART_MspInit+0x100>)
 8001624:	f000 fbba 	bl	8001d9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2105      	movs	r1, #5
 800162c:	2025      	movs	r0, #37	; 0x25
 800162e:	f000 faec 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001632:	2025      	movs	r0, #37	; 0x25
 8001634:	f000 fb05 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001638:	e030      	b.n	800169c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <HAL_UART_MspInit+0x104>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d12b      	bne.n	800169c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 800164e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001652:	6413      	str	r3, [r2, #64]	; 0x40
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6313      	str	r3, [r2, #48]	; 0x30
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800167c:	230c      	movs	r3, #12
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168c:	2307      	movs	r3, #7
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <HAL_UART_MspInit+0x100>)
 8001698:	f000 fb80 	bl	8001d9c <HAL_GPIO_Init>
}
 800169c:	bf00      	nop
 800169e:	3730      	adds	r7, #48	; 0x30
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40011000 	.word	0x40011000
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40004400 	.word	0x40004400

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e4:	f000 f972 	bl	80019cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016e8:	f004 fca4 	bl	8006034 <xTaskGetSchedulerState>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d001      	beq.n	80016f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80016f2:	f005 fa99 	bl	8006c28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <TIM2_IRQHandler+0x10>)
 8001702:	f001 fbb9 	bl	8002e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20004904 	.word	0x20004904

08001710 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <USART1_IRQHandler+0x10>)
 8001716:	f002 f9e1 	bl	8003adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20004858 	.word	0x20004858

08001724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
	return 1;
 8001728:	2301      	movs	r3, #1
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_kill>:

int _kill(int pid, int sig)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800173e:	f005 fced 	bl	800711c <__errno>
 8001742:	4603      	mov	r3, r0
 8001744:	2216      	movs	r2, #22
 8001746:	601a      	str	r2, [r3, #0]
	return -1;
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <_exit>:

void _exit (int status)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ffe7 	bl	8001734 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001766:	e7fe      	b.n	8001766 <_exit+0x12>

08001768 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e00a      	b.n	8001790 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800177a:	f3af 8000 	nop.w
 800177e:	4601      	mov	r1, r0
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	60ba      	str	r2, [r7, #8]
 8001786:	b2ca      	uxtb	r2, r1
 8001788:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf0      	blt.n	800177a <_read+0x12>
	}

return len;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e009      	b.n	80017c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60ba      	str	r2, [r7, #8]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbf1      	blt.n	80017b4 <_write+0x12>
	}
	return len;
 80017d0:	687b      	ldr	r3, [r7, #4]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_close>:

int _close(int file)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	return -1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001802:	605a      	str	r2, [r3, #4]
	return 0;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <_isatty>:

int _isatty(int file)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	return 1;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
	return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f005 fc52 	bl	800711c <__errno>
 8001878:	4603      	mov	r3, r0
 800187a:	220c      	movs	r2, #12
 800187c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20020000 	.word	0x20020000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	200008a4 	.word	0x200008a4
 80018ac:	200049e8 	.word	0x200049e8

080018b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <SystemInit+0x20>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <SystemInit+0x20>)
 80018bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800190c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018da:	490e      	ldr	r1, [pc, #56]	; (8001914 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f0:	4c0b      	ldr	r4, [pc, #44]	; (8001920 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018fe:	f7ff ffd7 	bl	80018b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001902:	f005 fc11 	bl	8007128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001906:	f7ff fb4f 	bl	8000fa8 <main>
  bx  lr    
 800190a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800190c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001918:	0800a32c 	.word	0x0800a32c
  ldr r2, =_sbss
 800191c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001920:	200049e4 	.word	0x200049e4

08001924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC_IRQHandler>
	...

08001928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <HAL_Init+0x40>)
 8001932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_Init+0x40>)
 800193e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_Init+0x40>)
 800194a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001950:	2003      	movs	r0, #3
 8001952:	f000 f94f 	bl	8001bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001956:	200f      	movs	r0, #15
 8001958:	f000 f808 	bl	800196c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800195c:	f7ff fd32 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00

0800196c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_InitTick+0x54>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x58>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001982:	fbb3 f3f1 	udiv	r3, r3, r1
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f967 	bl	8001c5e <HAL_SYSTICK_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e00e      	b.n	80019b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d80a      	bhi.n	80019b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a0:	2200      	movs	r2, #0
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f000 f92f 	bl	8001c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ac:	4a06      	ldr	r2, [pc, #24]	; (80019c8 <HAL_InitTick+0x5c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000008 	.word	0x20000008
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20004990 	.word	0x20004990

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20004990 	.word	0x20004990

08001a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff ffee 	bl	80019f4 <HAL_GetTick>
 8001a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d005      	beq.n	8001a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_Delay+0x44>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a32:	bf00      	nop
 8001a34:	f7ff ffde 	bl	80019f4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8f7      	bhi.n	8001a34 <HAL_Delay+0x28>
  {
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008

08001a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f003 0307 	and.w	r3, r3, #7
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db0b      	blt.n	8001ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <__NVIC_EnableIRQ+0x38>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	2001      	movs	r0, #1
 8001ada:	fa00 f202 	lsl.w	r2, r0, r2
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	; (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	; (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f1c3 0307 	rsb	r3, r3, #7
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	bf28      	it	cs
 8001b66:	2304      	movcs	r3, #4
 8001b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d902      	bls.n	8001b78 <NVIC_EncodePriority+0x30>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3b03      	subs	r3, #3
 8001b76:	e000      	b.n	8001b7a <NVIC_EncodePriority+0x32>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43d9      	mvns	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	4313      	orrs	r3, r2
         );
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc0:	d301      	bcc.n	8001bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00f      	b.n	8001be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <SysTick_Config+0x40>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bce:	210f      	movs	r1, #15
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f7ff ff8e 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <SysTick_Config+0x40>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <SysTick_Config+0x40>)
 8001be0:	2207      	movs	r2, #7
 8001be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff29 	bl	8001a54 <__NVIC_SetPriorityGrouping>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1c:	f7ff ff3e 	bl	8001a9c <__NVIC_GetPriorityGrouping>
 8001c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	6978      	ldr	r0, [r7, #20]
 8001c28:	f7ff ff8e 	bl	8001b48 <NVIC_EncodePriority>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff5d 	bl	8001af4 <__NVIC_SetPriority>
}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff31 	bl	8001ab8 <__NVIC_EnableIRQ>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffa2 	bl	8001bb0 <SysTick_Config>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff feb6 	bl	80019f4 <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d008      	beq.n	8001ca8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e052      	b.n	8001d4e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0216 	bic.w	r2, r2, #22
 8001cb6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d103      	bne.n	8001cd8 <HAL_DMA_Abort+0x62>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0208 	bic.w	r2, r2, #8
 8001ce6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf8:	e013      	b.n	8001d22 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cfa:	f7ff fe7b 	bl	80019f4 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d90c      	bls.n	8001d22 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2203      	movs	r2, #3
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e015      	b.n	8001d4e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e4      	bne.n	8001cfa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	223f      	movs	r2, #63	; 0x3f
 8001d36:	409a      	lsls	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d004      	beq.n	8001d74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2280      	movs	r2, #128	; 0x80
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e00c      	b.n	8001d8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2205      	movs	r2, #5
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e159      	b.n	800206c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	f040 8148 	bne.w	8002066 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d005      	beq.n	8001dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d130      	bne.n	8001e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e24:	2201      	movs	r2, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 0201 	and.w	r2, r3, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d017      	beq.n	8001e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d123      	bne.n	8001ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	08da      	lsrs	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3208      	adds	r2, #8
 8001ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	220f      	movs	r2, #15
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3208      	adds	r2, #8
 8001eda:	69b9      	ldr	r1, [r7, #24]
 8001edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0203 	and.w	r2, r3, #3
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a2 	beq.w	8002066 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b57      	ldr	r3, [pc, #348]	; (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b54      	ldr	r3, [pc, #336]	; (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f3e:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_GPIO_Init+0x2ec>)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3302      	adds	r3, #2
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a49      	ldr	r2, [pc, #292]	; (800208c <HAL_GPIO_Init+0x2f0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d019      	beq.n	8001f9e <HAL_GPIO_Init+0x202>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a48      	ldr	r2, [pc, #288]	; (8002090 <HAL_GPIO_Init+0x2f4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0x1fe>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a47      	ldr	r2, [pc, #284]	; (8002094 <HAL_GPIO_Init+0x2f8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00d      	beq.n	8001f96 <HAL_GPIO_Init+0x1fa>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a46      	ldr	r2, [pc, #280]	; (8002098 <HAL_GPIO_Init+0x2fc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <HAL_GPIO_Init+0x1f6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a45      	ldr	r2, [pc, #276]	; (800209c <HAL_GPIO_Init+0x300>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_GPIO_Init+0x1f2>
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	e008      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f8e:	2307      	movs	r3, #7
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f92:	2303      	movs	r3, #3
 8001f94:	e004      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e002      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	f002 0203 	and.w	r2, r2, #3
 8001fa6:	0092      	lsls	r2, r2, #2
 8001fa8:	4093      	lsls	r3, r2
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb0:	4935      	ldr	r1, [pc, #212]	; (8002088 <HAL_GPIO_Init+0x2ec>)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe2:	4a2f      	ldr	r2, [pc, #188]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200c:	4a24      	ldr	r2, [pc, #144]	; (80020a0 <HAL_GPIO_Init+0x304>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002036:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_GPIO_Init+0x304>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002060:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3301      	adds	r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	2b0f      	cmp	r3, #15
 8002070:	f67f aea2 	bls.w	8001db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	40013800 	.word	0x40013800
 800208c:	40020000 	.word	0x40020000
 8002090:	40020400 	.word	0x40020400
 8002094:	40020800 	.word	0x40020800
 8002098:	40020c00 	.word	0x40020c00
 800209c:	40021000 	.word	0x40021000
 80020a0:	40013c00 	.word	0x40013c00

080020a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e001      	b.n	80020c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
 80020e0:	4613      	mov	r3, r2
 80020e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f0:	e003      	b.n	80020fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020f2:	887b      	ldrh	r3, [r7, #2]
 80020f4:	041a      	lsls	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e12b      	b.n	8002372 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff f974 	bl	800141c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800215a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800216a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800216c:	f000 fd5c 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 8002170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4a81      	ldr	r2, [pc, #516]	; (800237c <HAL_I2C_Init+0x274>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d807      	bhi.n	800218c <HAL_I2C_Init+0x84>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4a80      	ldr	r2, [pc, #512]	; (8002380 <HAL_I2C_Init+0x278>)
 8002180:	4293      	cmp	r3, r2
 8002182:	bf94      	ite	ls
 8002184:	2301      	movls	r3, #1
 8002186:	2300      	movhi	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	e006      	b.n	800219a <HAL_I2C_Init+0x92>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4a7d      	ldr	r2, [pc, #500]	; (8002384 <HAL_I2C_Init+0x27c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	bf94      	ite	ls
 8002194:	2301      	movls	r3, #1
 8002196:	2300      	movhi	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0e7      	b.n	8002372 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4a78      	ldr	r2, [pc, #480]	; (8002388 <HAL_I2C_Init+0x280>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0c9b      	lsrs	r3, r3, #18
 80021ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	430a      	orrs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a6a      	ldr	r2, [pc, #424]	; (800237c <HAL_I2C_Init+0x274>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d802      	bhi.n	80021dc <HAL_I2C_Init+0xd4>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3301      	adds	r3, #1
 80021da:	e009      	b.n	80021f0 <HAL_I2C_Init+0xe8>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	4a69      	ldr	r2, [pc, #420]	; (800238c <HAL_I2C_Init+0x284>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	099b      	lsrs	r3, r3, #6
 80021ee:	3301      	adds	r3, #1
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002202:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	495c      	ldr	r1, [pc, #368]	; (800237c <HAL_I2C_Init+0x274>)
 800220c:	428b      	cmp	r3, r1
 800220e:	d819      	bhi.n	8002244 <HAL_I2C_Init+0x13c>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e59      	subs	r1, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fbb1 f3f3 	udiv	r3, r1, r3
 800221e:	1c59      	adds	r1, r3, #1
 8002220:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002224:	400b      	ands	r3, r1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_I2C_Init+0x138>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1e59      	subs	r1, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fbb1 f3f3 	udiv	r3, r1, r3
 8002238:	3301      	adds	r3, #1
 800223a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223e:	e051      	b.n	80022e4 <HAL_I2C_Init+0x1dc>
 8002240:	2304      	movs	r3, #4
 8002242:	e04f      	b.n	80022e4 <HAL_I2C_Init+0x1dc>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d111      	bne.n	8002270 <HAL_I2C_Init+0x168>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1e58      	subs	r0, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	440b      	add	r3, r1
 800225a:	fbb0 f3f3 	udiv	r3, r0, r3
 800225e:	3301      	adds	r3, #1
 8002260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	e012      	b.n	8002296 <HAL_I2C_Init+0x18e>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1e58      	subs	r0, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	0099      	lsls	r1, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	fbb0 f3f3 	udiv	r3, r0, r3
 8002286:	3301      	adds	r3, #1
 8002288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Init+0x196>
 800229a:	2301      	movs	r3, #1
 800229c:	e022      	b.n	80022e4 <HAL_I2C_Init+0x1dc>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10e      	bne.n	80022c4 <HAL_I2C_Init+0x1bc>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1e58      	subs	r0, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	440b      	add	r3, r1
 80022b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c2:	e00f      	b.n	80022e4 <HAL_I2C_Init+0x1dc>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e58      	subs	r0, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	0099      	lsls	r1, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	6809      	ldr	r1, [r1, #0]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69da      	ldr	r2, [r3, #28]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6911      	ldr	r1, [r2, #16]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68d2      	ldr	r2, [r2, #12]
 800231e:	4311      	orrs	r1, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	430b      	orrs	r3, r1
 8002326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	000186a0 	.word	0x000186a0
 8002380:	001e847f 	.word	0x001e847f
 8002384:	003d08ff 	.word	0x003d08ff
 8002388:	431bde83 	.word	0x431bde83
 800238c:	10624dd3 	.word	0x10624dd3

08002390 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e264      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d075      	beq.n	800249a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ae:	4ba3      	ldr	r3, [pc, #652]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d00c      	beq.n	80023d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ba:	4ba0      	ldr	r3, [pc, #640]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d112      	bne.n	80023ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c6:	4b9d      	ldr	r3, [pc, #628]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d2:	d10b      	bne.n	80023ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d4:	4b99      	ldr	r3, [pc, #612]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d05b      	beq.n	8002498 <HAL_RCC_OscConfig+0x108>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d157      	bne.n	8002498 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e23f      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f4:	d106      	bne.n	8002404 <HAL_RCC_OscConfig+0x74>
 80023f6:	4b91      	ldr	r3, [pc, #580]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a90      	ldr	r2, [pc, #576]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e01d      	b.n	8002440 <HAL_RCC_OscConfig+0xb0>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x98>
 800240e:	4b8b      	ldr	r3, [pc, #556]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a8a      	ldr	r2, [pc, #552]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b88      	ldr	r3, [pc, #544]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a87      	ldr	r2, [pc, #540]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e00b      	b.n	8002440 <HAL_RCC_OscConfig+0xb0>
 8002428:	4b84      	ldr	r3, [pc, #528]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a83      	ldr	r2, [pc, #524]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 800242e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b81      	ldr	r3, [pc, #516]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a80      	ldr	r2, [pc, #512]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 800243a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff fad4 	bl	80019f4 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002450:	f7ff fad0 	bl	80019f4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e204      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	4b76      	ldr	r3, [pc, #472]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0xc0>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7ff fac0 	bl	80019f4 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002478:	f7ff fabc 	bl	80019f4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e1f0      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	4b6c      	ldr	r3, [pc, #432]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0xe8>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d063      	beq.n	800256e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024a6:	4b65      	ldr	r3, [pc, #404]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b2:	4b62      	ldr	r3, [pc, #392]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d11c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024be:	4b5f      	ldr	r3, [pc, #380]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d116      	bne.n	80024f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	4b5c      	ldr	r3, [pc, #368]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_RCC_OscConfig+0x152>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e1c4      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e2:	4b56      	ldr	r3, [pc, #344]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4952      	ldr	r1, [pc, #328]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f6:	e03a      	b.n	800256e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002500:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <HAL_RCC_OscConfig+0x2b0>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002506:	f7ff fa75 	bl	80019f4 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250e:	f7ff fa71 	bl	80019f4 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e1a5      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	4b46      	ldr	r3, [pc, #280]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	4b43      	ldr	r3, [pc, #268]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4940      	ldr	r1, [pc, #256]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]
 8002540:	e015      	b.n	800256e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002542:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <HAL_RCC_OscConfig+0x2b0>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7ff fa54 	bl	80019f4 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002550:	f7ff fa50 	bl	80019f4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e184      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	4b36      	ldr	r3, [pc, #216]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d030      	beq.n	80025dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <HAL_RCC_OscConfig+0x2b4>)
 8002584:	2201      	movs	r2, #1
 8002586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7ff fa34 	bl	80019f4 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002590:	f7ff fa30 	bl	80019f4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e164      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	4b26      	ldr	r3, [pc, #152]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x200>
 80025ae:	e015      	b.n	80025dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCC_OscConfig+0x2b4>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b6:	f7ff fa1d 	bl	80019f4 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025be:	f7ff fa19 	bl	80019f4 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e14d      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d0:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80025d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80a0 	beq.w	800272a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	4a0e      	ldr	r2, [pc, #56]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	6413      	str	r3, [r2, #64]	; 0x40
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <HAL_RCC_OscConfig+0x2ac>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_OscConfig+0x2b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d121      	bne.n	800266a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_RCC_OscConfig+0x2b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a07      	ldr	r2, [pc, #28]	; (8002648 <HAL_RCC_OscConfig+0x2b8>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002632:	f7ff f9df 	bl	80019f4 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	e011      	b.n	800265e <HAL_RCC_OscConfig+0x2ce>
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	42470000 	.word	0x42470000
 8002644:	42470e80 	.word	0x42470e80
 8002648:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7ff f9d2 	bl	80019f4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e106      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	4b85      	ldr	r3, [pc, #532]	; (8002874 <HAL_RCC_OscConfig+0x4e4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d106      	bne.n	8002680 <HAL_RCC_OscConfig+0x2f0>
 8002672:	4b81      	ldr	r3, [pc, #516]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a80      	ldr	r2, [pc, #512]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
 800267e:	e01c      	b.n	80026ba <HAL_RCC_OscConfig+0x32a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b05      	cmp	r3, #5
 8002686:	d10c      	bne.n	80026a2 <HAL_RCC_OscConfig+0x312>
 8002688:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	4a7a      	ldr	r2, [pc, #488]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6713      	str	r3, [r2, #112]	; 0x70
 8002694:	4b78      	ldr	r3, [pc, #480]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a77      	ldr	r2, [pc, #476]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
 80026a0:	e00b      	b.n	80026ba <HAL_RCC_OscConfig+0x32a>
 80026a2:	4b75      	ldr	r3, [pc, #468]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	4a74      	ldr	r2, [pc, #464]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	6713      	str	r3, [r2, #112]	; 0x70
 80026ae:	4b72      	ldr	r3, [pc, #456]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	4a71      	ldr	r2, [pc, #452]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 80026b4:	f023 0304 	bic.w	r3, r3, #4
 80026b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d015      	beq.n	80026ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7ff f997 	bl	80019f4 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7ff f993 	bl	80019f4 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0c5      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	4b65      	ldr	r3, [pc, #404]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ee      	beq.n	80026ca <HAL_RCC_OscConfig+0x33a>
 80026ec:	e014      	b.n	8002718 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7ff f981 	bl	80019f4 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7ff f97d 	bl	80019f4 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	; 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e0af      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270c:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ee      	bne.n	80026f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271e:	4b56      	ldr	r3, [pc, #344]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a55      	ldr	r2, [pc, #340]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 8002724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 809b 	beq.w	800286a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002734:	4b50      	ldr	r3, [pc, #320]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d05c      	beq.n	80027fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d141      	bne.n	80027cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002748:	4b4c      	ldr	r3, [pc, #304]	; (800287c <HAL_RCC_OscConfig+0x4ec>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274e:	f7ff f951 	bl	80019f4 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002756:	f7ff f94d 	bl	80019f4 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e081      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002768:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69da      	ldr	r2, [r3, #28]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	019b      	lsls	r3, r3, #6
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	3b01      	subs	r3, #1
 800278e:	041b      	lsls	r3, r3, #16
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	061b      	lsls	r3, r3, #24
 8002798:	4937      	ldr	r1, [pc, #220]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800279e:	4b37      	ldr	r3, [pc, #220]	; (800287c <HAL_RCC_OscConfig+0x4ec>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7ff f926 	bl	80019f4 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ac:	f7ff f922 	bl	80019f4 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e056      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x41c>
 80027ca:	e04e      	b.n	800286a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b2b      	ldr	r3, [pc, #172]	; (800287c <HAL_RCC_OscConfig+0x4ec>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7ff f90f 	bl	80019f4 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027da:	f7ff f90b 	bl	80019f4 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e03f      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x44a>
 80027f8:	e037      	b.n	800286a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e032      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002806:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_RCC_OscConfig+0x4e8>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d028      	beq.n	8002866 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d121      	bne.n	8002866 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d11a      	bne.n	8002866 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002836:	4013      	ands	r3, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800283c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800283e:	4293      	cmp	r3, r2
 8002840:	d111      	bne.n	8002866 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	3b01      	subs	r3, #1
 8002850:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d107      	bne.n	8002866 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40007000 	.word	0x40007000
 8002878:	40023800 	.word	0x40023800
 800287c:	42470060 	.word	0x42470060

08002880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0cc      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002894:	4b68      	ldr	r3, [pc, #416]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d90c      	bls.n	80028bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b63      	ldr	r3, [pc, #396]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0b8      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d020      	beq.n	800290a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d4:	4b59      	ldr	r3, [pc, #356]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028ec:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a52      	ldr	r2, [pc, #328]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f8:	4b50      	ldr	r3, [pc, #320]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	494d      	ldr	r1, [pc, #308]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	4313      	orrs	r3, r2
 8002908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d044      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d119      	bne.n	800295e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e07f      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d003      	beq.n	800293e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800293a:	2b03      	cmp	r3, #3
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293e:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e06f      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294e:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e067      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800295e:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f023 0203 	bic.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4934      	ldr	r1, [pc, #208]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	4313      	orrs	r3, r2
 800296e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002970:	f7ff f840 	bl	80019f4 <HAL_GetTick>
 8002974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	e00a      	b.n	800298e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002978:	f7ff f83c 	bl	80019f4 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e04f      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 020c 	and.w	r2, r3, #12
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	429a      	cmp	r2, r3
 800299e:	d1eb      	bne.n	8002978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d20c      	bcs.n	80029c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e032      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d4:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4916      	ldr	r1, [pc, #88]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	490e      	ldr	r1, [pc, #56]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a06:	f000 f821 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	490a      	ldr	r1, [pc, #40]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	5ccb      	ldrb	r3, [r1, r3]
 8002a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe ffa0 	bl	800196c <HAL_InitTick>

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023c00 	.word	0x40023c00
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	08009f24 	.word	0x08009f24
 8002a44:	20000000 	.word	0x20000000
 8002a48:	20000004 	.word	0x20000004

08002a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a64:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d00d      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0x40>
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	f200 80bd 	bhi.w	8002bf0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x34>
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d003      	beq.n	8002a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a7e:	e0b7      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b61      	ldr	r3, [pc, #388]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a82:	60bb      	str	r3, [r7, #8]
       break;
 8002a84:	e0b7      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a86:	4b61      	ldr	r3, [pc, #388]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a88:	60bb      	str	r3, [r7, #8]
      break;
 8002a8a:	e0b4      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a8c:	4b5d      	ldr	r3, [pc, #372]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a96:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d04d      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa2:	4b58      	ldr	r3, [pc, #352]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	099b      	lsrs	r3, r3, #6
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ab2:	f04f 0100 	mov.w	r1, #0
 8002ab6:	ea02 0800 	and.w	r8, r2, r0
 8002aba:	ea03 0901 	and.w	r9, r3, r1
 8002abe:	4640      	mov	r0, r8
 8002ac0:	4649      	mov	r1, r9
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	014b      	lsls	r3, r1, #5
 8002acc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ad0:	0142      	lsls	r2, r0, #5
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	ebb0 0008 	subs.w	r0, r0, r8
 8002ada:	eb61 0109 	sbc.w	r1, r1, r9
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	018b      	lsls	r3, r1, #6
 8002ae8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002aec:	0182      	lsls	r2, r0, #6
 8002aee:	1a12      	subs	r2, r2, r0
 8002af0:	eb63 0301 	sbc.w	r3, r3, r1
 8002af4:	f04f 0000 	mov.w	r0, #0
 8002af8:	f04f 0100 	mov.w	r1, #0
 8002afc:	00d9      	lsls	r1, r3, #3
 8002afe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b02:	00d0      	lsls	r0, r2, #3
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	eb12 0208 	adds.w	r2, r2, r8
 8002b0c:	eb43 0309 	adc.w	r3, r3, r9
 8002b10:	f04f 0000 	mov.w	r0, #0
 8002b14:	f04f 0100 	mov.w	r1, #0
 8002b18:	0259      	lsls	r1, r3, #9
 8002b1a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b1e:	0250      	lsls	r0, r2, #9
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	f7fe f842 	bl	8000bb8 <__aeabi_uldivmod>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4613      	mov	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e04a      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	099b      	lsrs	r3, r3, #6
 8002b44:	461a      	mov	r2, r3
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b4e:	f04f 0100 	mov.w	r1, #0
 8002b52:	ea02 0400 	and.w	r4, r2, r0
 8002b56:	ea03 0501 	and.w	r5, r3, r1
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	014b      	lsls	r3, r1, #5
 8002b68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b6c:	0142      	lsls	r2, r0, #5
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	1b00      	subs	r0, r0, r4
 8002b74:	eb61 0105 	sbc.w	r1, r1, r5
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	018b      	lsls	r3, r1, #6
 8002b82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b86:	0182      	lsls	r2, r0, #6
 8002b88:	1a12      	subs	r2, r2, r0
 8002b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8e:	f04f 0000 	mov.w	r0, #0
 8002b92:	f04f 0100 	mov.w	r1, #0
 8002b96:	00d9      	lsls	r1, r3, #3
 8002b98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b9c:	00d0      	lsls	r0, r2, #3
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	1912      	adds	r2, r2, r4
 8002ba4:	eb45 0303 	adc.w	r3, r5, r3
 8002ba8:	f04f 0000 	mov.w	r0, #0
 8002bac:	f04f 0100 	mov.w	r1, #0
 8002bb0:	0299      	lsls	r1, r3, #10
 8002bb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bb6:	0290      	lsls	r0, r2, #10
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	f7fd fff6 	bl	8000bb8 <__aeabi_uldivmod>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	60bb      	str	r3, [r7, #8]
      break;
 8002bee:	e002      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bf2:	60bb      	str	r3, [r7, #8]
      break;
 8002bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	00f42400 	.word	0x00f42400
 8002c0c:	007a1200 	.word	0x007a1200

08002c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000000 	.word	0x20000000

08002c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c2c:	f7ff fff0 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	0a9b      	lsrs	r3, r3, #10
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4903      	ldr	r1, [pc, #12]	; (8002c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08009f34 	.word	0x08009f34

08002c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c54:	f7ff ffdc 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	0b5b      	lsrs	r3, r3, #13
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4903      	ldr	r1, [pc, #12]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	08009f34 	.word	0x08009f34

08002c78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e041      	b.n	8002d0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fe fc26 	bl	80014f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	f000 fada 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_TIM_PWM_Start+0x24>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e022      	b.n	8002d82 <HAL_TIM_PWM_Start+0x6a>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d109      	bne.n	8002d56 <HAL_TIM_PWM_Start+0x3e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	bf14      	ite	ne
 8002d4e:	2301      	movne	r3, #1
 8002d50:	2300      	moveq	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	e015      	b.n	8002d82 <HAL_TIM_PWM_Start+0x6a>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d109      	bne.n	8002d70 <HAL_TIM_PWM_Start+0x58>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	bf14      	ite	ne
 8002d68:	2301      	movne	r3, #1
 8002d6a:	2300      	moveq	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e008      	b.n	8002d82 <HAL_TIM_PWM_Start+0x6a>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	bf14      	ite	ne
 8002d7c:	2301      	movne	r3, #1
 8002d7e:	2300      	moveq	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e068      	b.n	8002e5c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d104      	bne.n	8002d9a <HAL_TIM_PWM_Start+0x82>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d98:	e013      	b.n	8002dc2 <HAL_TIM_PWM_Start+0xaa>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d104      	bne.n	8002daa <HAL_TIM_PWM_Start+0x92>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da8:	e00b      	b.n	8002dc2 <HAL_TIM_PWM_Start+0xaa>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d104      	bne.n	8002dba <HAL_TIM_PWM_Start+0xa2>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db8:	e003      	b.n	8002dc2 <HAL_TIM_PWM_Start+0xaa>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fc5c 	bl	8003688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a23      	ldr	r2, [pc, #140]	; (8002e64 <HAL_TIM_PWM_Start+0x14c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d107      	bne.n	8002dea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <HAL_TIM_PWM_Start+0x14c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d018      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x10e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfc:	d013      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x10e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a19      	ldr	r2, [pc, #100]	; (8002e68 <HAL_TIM_PWM_Start+0x150>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00e      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x10e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a17      	ldr	r2, [pc, #92]	; (8002e6c <HAL_TIM_PWM_Start+0x154>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x10e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <HAL_TIM_PWM_Start+0x158>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x10e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_TIM_PWM_Start+0x15c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d111      	bne.n	8002e4a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b06      	cmp	r3, #6
 8002e36:	d010      	beq.n	8002e5a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e48:	e007      	b.n	8002e5a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800
 8002e70:	40000c00 	.word	0x40000c00
 8002e74:	40014000 	.word	0x40014000

08002e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d122      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d11b      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0202 	mvn.w	r2, #2
 8002ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f9ba 	bl	8003234 <HAL_TIM_IC_CaptureCallback>
 8002ec0:	e005      	b.n	8002ece <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f9ac 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f9bd 	bl	8003248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d122      	bne.n	8002f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d11b      	bne.n	8002f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0204 	mvn.w	r2, #4
 8002ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f990 	bl	8003234 <HAL_TIM_IC_CaptureCallback>
 8002f14:	e005      	b.n	8002f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f982 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f993 	bl	8003248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d122      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d11b      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0208 	mvn.w	r2, #8
 8002f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2204      	movs	r2, #4
 8002f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f966 	bl	8003234 <HAL_TIM_IC_CaptureCallback>
 8002f68:	e005      	b.n	8002f76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f958 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f969 	bl	8003248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d122      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d11b      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0210 	mvn.w	r2, #16
 8002fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2208      	movs	r2, #8
 8002fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f93c 	bl	8003234 <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f92e 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f93f 	bl	8003248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d10e      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0201 	mvn.w	r2, #1
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f908 	bl	800320c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b80      	cmp	r3, #128	; 0x80
 8003008:	d10e      	bne.n	8003028 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	2b80      	cmp	r3, #128	; 0x80
 8003016:	d107      	bne.n	8003028 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fbce 	bl	80037c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003032:	2b40      	cmp	r3, #64	; 0x40
 8003034:	d10e      	bne.n	8003054 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d107      	bne.n	8003054 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f904 	bl	800325c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b20      	cmp	r3, #32
 8003060:	d10e      	bne.n	8003080 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b20      	cmp	r3, #32
 800306e:	d107      	bne.n	8003080 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0220 	mvn.w	r2, #32
 8003078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fb98 	bl	80037b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e0ae      	b.n	8003204 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	f200 809f 	bhi.w	80031f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	080031f5 	.word	0x080031f5
 80030c4:	080031f5 	.word	0x080031f5
 80030c8:	080031f5 	.word	0x080031f5
 80030cc:	08003131 	.word	0x08003131
 80030d0:	080031f5 	.word	0x080031f5
 80030d4:	080031f5 	.word	0x080031f5
 80030d8:	080031f5 	.word	0x080031f5
 80030dc:	08003173 	.word	0x08003173
 80030e0:	080031f5 	.word	0x080031f5
 80030e4:	080031f5 	.word	0x080031f5
 80030e8:	080031f5 	.word	0x080031f5
 80030ec:	080031b3 	.word	0x080031b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f93a 	bl	8003370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0208 	orr.w	r2, r2, #8
 800310a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0204 	bic.w	r2, r2, #4
 800311a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6999      	ldr	r1, [r3, #24]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	619a      	str	r2, [r3, #24]
      break;
 800312e:	e064      	b.n	80031fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f980 	bl	800343c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800314a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6999      	ldr	r1, [r3, #24]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	021a      	lsls	r2, r3, #8
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	619a      	str	r2, [r3, #24]
      break;
 8003170:	e043      	b.n	80031fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f9cb 	bl	8003514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0208 	orr.w	r2, r2, #8
 800318c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0204 	bic.w	r2, r2, #4
 800319c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69d9      	ldr	r1, [r3, #28]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	61da      	str	r2, [r3, #28]
      break;
 80031b0:	e023      	b.n	80031fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fa15 	bl	80035e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69d9      	ldr	r1, [r3, #28]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	021a      	lsls	r2, r3, #8
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	61da      	str	r2, [r3, #28]
      break;
 80031f2:	e002      	b.n	80031fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	75fb      	strb	r3, [r7, #23]
      break;
 80031f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a34      	ldr	r2, [pc, #208]	; (8003354 <TIM_Base_SetConfig+0xe4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00f      	beq.n	80032a8 <TIM_Base_SetConfig+0x38>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328e:	d00b      	beq.n	80032a8 <TIM_Base_SetConfig+0x38>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a31      	ldr	r2, [pc, #196]	; (8003358 <TIM_Base_SetConfig+0xe8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <TIM_Base_SetConfig+0x38>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a30      	ldr	r2, [pc, #192]	; (800335c <TIM_Base_SetConfig+0xec>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d003      	beq.n	80032a8 <TIM_Base_SetConfig+0x38>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a2f      	ldr	r2, [pc, #188]	; (8003360 <TIM_Base_SetConfig+0xf0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d108      	bne.n	80032ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <TIM_Base_SetConfig+0xe4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01b      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c8:	d017      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a22      	ldr	r2, [pc, #136]	; (8003358 <TIM_Base_SetConfig+0xe8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a21      	ldr	r2, [pc, #132]	; (800335c <TIM_Base_SetConfig+0xec>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00f      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a20      	ldr	r2, [pc, #128]	; (8003360 <TIM_Base_SetConfig+0xf0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00b      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <TIM_Base_SetConfig+0xf4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d007      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <TIM_Base_SetConfig+0xf8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1d      	ldr	r2, [pc, #116]	; (800336c <TIM_Base_SetConfig+0xfc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d108      	bne.n	800330c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a08      	ldr	r2, [pc, #32]	; (8003354 <TIM_Base_SetConfig+0xe4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	615a      	str	r2, [r3, #20]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40010000 	.word	0x40010000
 8003358:	40000400 	.word	0x40000400
 800335c:	40000800 	.word	0x40000800
 8003360:	40000c00 	.word	0x40000c00
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800

08003370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f023 0201 	bic.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f023 0302 	bic.w	r3, r3, #2
 80033b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <TIM_OC1_SetConfig+0xc8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d10c      	bne.n	80033e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0308 	bic.w	r3, r3, #8
 80033d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f023 0304 	bic.w	r3, r3, #4
 80033e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a13      	ldr	r2, [pc, #76]	; (8003438 <TIM_OC1_SetConfig+0xc8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d111      	bne.n	8003412 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	621a      	str	r2, [r3, #32]
}
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	40010000 	.word	0x40010000

0800343c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f023 0210 	bic.w	r2, r3, #16
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800346a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 0320 	bic.w	r3, r3, #32
 8003486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a1e      	ldr	r2, [pc, #120]	; (8003510 <TIM_OC2_SetConfig+0xd4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d10d      	bne.n	80034b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a15      	ldr	r2, [pc, #84]	; (8003510 <TIM_OC2_SetConfig+0xd4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d113      	bne.n	80034e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40010000 	.word	0x40010000

08003514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800355c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <TIM_OC3_SetConfig+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10d      	bne.n	800358e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800358c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <TIM_OC3_SetConfig+0xd0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d113      	bne.n	80035be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800359c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	621a      	str	r2, [r3, #32]
}
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	40010000 	.word	0x40010000

080035e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	031b      	lsls	r3, r3, #12
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a10      	ldr	r2, [pc, #64]	; (8003684 <TIM_OC4_SetConfig+0x9c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d109      	bne.n	800365c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800364e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	019b      	lsls	r3, r3, #6
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40010000 	.word	0x40010000

08003688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	2201      	movs	r2, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1a      	ldr	r2, [r3, #32]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	401a      	ands	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1a      	ldr	r2, [r3, #32]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	431a      	orrs	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e050      	b.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d018      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003738:	d013      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00e      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d009      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a15      	ldr	r2, [pc, #84]	; (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a13      	ldr	r2, [pc, #76]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10c      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	4313      	orrs	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40010000 	.word	0x40010000
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40000800 	.word	0x40000800
 80037a8:	40000c00 	.word	0x40000c00
 80037ac:	40014000 	.word	0x40014000

080037b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e03f      	b.n	800386a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd fed4 	bl	80015ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2224      	movs	r2, #36	; 0x24
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800381a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fe1d 	bl	800445c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b08a      	sub	sp, #40	; 0x28
 8003876:	af02      	add	r7, sp, #8
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	4613      	mov	r3, r2
 8003880:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b20      	cmp	r3, #32
 8003890:	d17c      	bne.n	800398c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <HAL_UART_Transmit+0x2c>
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e075      	b.n	800398e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_UART_Transmit+0x3e>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e06e      	b.n	800398e <HAL_UART_Transmit+0x11c>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2221      	movs	r2, #33	; 0x21
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038c6:	f7fe f895 	bl	80019f4 <HAL_GetTick>
 80038ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	88fa      	ldrh	r2, [r7, #6]
 80038d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	88fa      	ldrh	r2, [r7, #6]
 80038d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e0:	d108      	bne.n	80038f4 <HAL_UART_Transmit+0x82>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d104      	bne.n	80038f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	e003      	b.n	80038fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003904:	e02a      	b.n	800395c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2200      	movs	r2, #0
 800390e:	2180      	movs	r1, #128	; 0x80
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fb9b 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e036      	b.n	800398e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10b      	bne.n	800393e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003934:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	3302      	adds	r3, #2
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	e007      	b.n	800394e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	3301      	adds	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1cf      	bne.n	8003906 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	2140      	movs	r1, #64	; 0x40
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fb6b 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e006      	b.n	800398e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b08a      	sub	sp, #40	; 0x28
 800399a:	af02      	add	r7, sp, #8
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	f040 808c 	bne.w	8003ad0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_UART_Receive+0x2e>
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e084      	b.n	8003ad2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_UART_Receive+0x40>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e07d      	b.n	8003ad2 <HAL_UART_Receive+0x13c>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2222      	movs	r2, #34	; 0x22
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039f2:	f7fd ffff 	bl	80019f4 <HAL_GetTick>
 80039f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	88fa      	ldrh	r2, [r7, #6]
 80039fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	88fa      	ldrh	r2, [r7, #6]
 8003a02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0c:	d108      	bne.n	8003a20 <HAL_UART_Receive+0x8a>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	e003      	b.n	8003a28 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a30:	e043      	b.n	8003aba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2120      	movs	r1, #32
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fb05 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e042      	b.n	8003ad2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	3302      	adds	r3, #2
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	e01f      	b.n	8003aac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a74:	d007      	beq.n	8003a86 <HAL_UART_Receive+0xf0>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <HAL_UART_Receive+0xfe>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e008      	b.n	8003aa6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1b6      	bne.n	8003a32 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e000      	b.n	8003ad2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b0ba      	sub	sp, #232	; 0xe8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_UART_IRQHandler+0x66>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fbd3 	bl	80042e6 <UART_Receive_IT>
      return;
 8003b40:	e256      	b.n	8003ff0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80de 	beq.w	8003d08 <HAL_UART_IRQHandler+0x22c>
 8003b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80d1 	beq.w	8003d08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_UART_IRQHandler+0xae>
 8003b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_UART_IRQHandler+0xd2>
 8003b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f043 0202 	orr.w	r2, r3, #2
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xf6>
 8003bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f043 0204 	orr.w	r2, r3, #4
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d011      	beq.n	8003c02 <HAL_UART_IRQHandler+0x126>
 8003bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d105      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f043 0208 	orr.w	r2, r3, #8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 81ed 	beq.w	8003fe6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_UART_IRQHandler+0x14e>
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fb5e 	bl	80042e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <HAL_UART_IRQHandler+0x17a>
 8003c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d04f      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa66 	bl	8004128 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d141      	bne.n	8003cee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3314      	adds	r3, #20
 8003c70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3314      	adds	r3, #20
 8003c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1d9      	bne.n	8003c6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d013      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	4a7d      	ldr	r2, [pc, #500]	; (8003eb8 <HAL_UART_IRQHandler+0x3dc>)
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe f843 	bl	8001d56 <HAL_DMA_Abort_IT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d016      	beq.n	8003d04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce4:	e00e      	b.n	8003d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f99a 	bl	8004020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	e00a      	b.n	8003d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f996 	bl	8004020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	e006      	b.n	8003d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f992 	bl	8004020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d02:	e170      	b.n	8003fe6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	bf00      	nop
    return;
 8003d06:	e16e      	b.n	8003fe6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f040 814a 	bne.w	8003fa6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 8143 	beq.w	8003fa6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 813c 	beq.w	8003fa6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	f040 80b4 	bne.w	8003ebc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8140 	beq.w	8003fea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d72:	429a      	cmp	r2, r3
 8003d74:	f080 8139 	bcs.w	8003fea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8a:	f000 8088 	beq.w	8003e9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	330c      	adds	r3, #12
 8003db6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1d9      	bne.n	8003d8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3314      	adds	r3, #20
 8003dfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e1      	bne.n	8003dda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3314      	adds	r3, #20
 8003e36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e3      	bne.n	8003e16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6e:	f023 0310 	bic.w	r3, r3, #16
 8003e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e80:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e3      	bne.n	8003e5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fd feec 	bl	8001c76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8c0 	bl	8004034 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eb4:	e099      	b.n	8003fea <HAL_UART_IRQHandler+0x50e>
 8003eb6:	bf00      	nop
 8003eb8:	080041ef 	.word	0x080041ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 808b 	beq.w	8003fee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8086 	beq.w	8003fee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	330c      	adds	r3, #12
 8003f02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f06:	647a      	str	r2, [r7, #68]	; 0x44
 8003f08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e3      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	623b      	str	r3, [r7, #32]
   return(result);
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3314      	adds	r3, #20
 8003f3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f3e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e3      	bne.n	8003f1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0310 	bic.w	r3, r3, #16
 8003f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f84:	61fa      	str	r2, [r7, #28]
 8003f86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	69b9      	ldr	r1, [r7, #24]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	617b      	str	r3, [r7, #20]
   return(result);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e3      	bne.n	8003f60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f848 	bl	8004034 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fa4:	e023      	b.n	8003fee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x4ea>
 8003fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f929 	bl	8004216 <UART_Transmit_IT>
    return;
 8003fc4:	e014      	b.n	8003ff0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00e      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x514>
 8003fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d008      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f969 	bl	80042b6 <UART_EndTransmit_IT>
    return;
 8003fe4:	e004      	b.n	8003ff0 <HAL_UART_IRQHandler+0x514>
    return;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <HAL_UART_IRQHandler+0x514>
      return;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <HAL_UART_IRQHandler+0x514>
      return;
 8003fee:	bf00      	nop
  }
}
 8003ff0:	37e8      	adds	r7, #232	; 0xe8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop

08003ff8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b090      	sub	sp, #64	; 0x40
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405c:	e050      	b.n	8004100 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d04c      	beq.n	8004100 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <UART_WaitOnFlagUntilTimeout+0x30>
 800406c:	f7fd fcc2 	bl	80019f4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004078:	429a      	cmp	r2, r3
 800407a:	d241      	bcs.n	8004100 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800409c:	637a      	str	r2, [r7, #52]	; 0x34
 800409e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e5      	bne.n	800407c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3314      	adds	r3, #20
 80040b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	613b      	str	r3, [r7, #16]
   return(result);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f023 0301 	bic.w	r3, r3, #1
 80040c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3314      	adds	r3, #20
 80040ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040d0:	623a      	str	r2, [r7, #32]
 80040d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	69f9      	ldr	r1, [r7, #28]
 80040d6:	6a3a      	ldr	r2, [r7, #32]
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e5      	bne.n	80040b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e00f      	b.n	8004120 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4013      	ands	r3, r2
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	429a      	cmp	r2, r3
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	429a      	cmp	r2, r3
 800411c:	d09f      	beq.n	800405e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3740      	adds	r7, #64	; 0x40
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b095      	sub	sp, #84	; 0x54
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004150:	643a      	str	r2, [r7, #64]	; 0x40
 8004152:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004156:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800415e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3314      	adds	r3, #20
 800416a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	61fb      	str	r3, [r7, #28]
   return(result);
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	64bb      	str	r3, [r7, #72]	; 0x48
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3314      	adds	r3, #20
 8004182:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004184:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800418a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e5      	bne.n	8004164 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	2b01      	cmp	r3, #1
 800419e:	d119      	bne.n	80041d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f023 0310 	bic.w	r3, r3, #16
 80041b6:	647b      	str	r3, [r7, #68]	; 0x44
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041c0:	61ba      	str	r2, [r7, #24]
 80041c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6979      	ldr	r1, [r7, #20]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	613b      	str	r3, [r7, #16]
   return(result);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e5      	bne.n	80041a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041e2:	bf00      	nop
 80041e4:	3754      	adds	r7, #84	; 0x54
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff ff09 	bl	8004020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b21      	cmp	r3, #33	; 0x21
 8004228:	d13e      	bne.n	80042a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	d114      	bne.n	800425e <UART_Transmit_IT+0x48>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d110      	bne.n	800425e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004250:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	1c9a      	adds	r2, r3, #2
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	621a      	str	r2, [r3, #32]
 800425c:	e008      	b.n	8004270 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	1c59      	adds	r1, r3, #1
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6211      	str	r1, [r2, #32]
 8004268:	781a      	ldrb	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29b      	uxth	r3, r3
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4619      	mov	r1, r3
 800427e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10f      	bne.n	80042a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004292:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff fe8e 	bl	8003ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b08c      	sub	sp, #48	; 0x30
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b22      	cmp	r3, #34	; 0x22
 80042f8:	f040 80ab 	bne.w	8004452 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004304:	d117      	bne.n	8004336 <UART_Receive_IT+0x50>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d113      	bne.n	8004336 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800430e:	2300      	movs	r3, #0
 8004310:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004324:	b29a      	uxth	r2, r3
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	1c9a      	adds	r2, r3, #2
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	629a      	str	r2, [r3, #40]	; 0x28
 8004334:	e026      	b.n	8004384 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004348:	d007      	beq.n	800435a <UART_Receive_IT+0x74>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <UART_Receive_IT+0x82>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e008      	b.n	800437a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004374:	b2da      	uxtb	r2, r3
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29b      	uxth	r3, r3
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4619      	mov	r1, r3
 8004392:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004394:	2b00      	cmp	r3, #0
 8004396:	d15a      	bne.n	800444e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0220 	bic.w	r2, r2, #32
 80043a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d135      	bne.n	8004444 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	613b      	str	r3, [r7, #16]
   return(result);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f023 0310 	bic.w	r3, r3, #16
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	623a      	str	r2, [r7, #32]
 8004400:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	69f9      	ldr	r1, [r7, #28]
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	61bb      	str	r3, [r7, #24]
   return(result);
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e5      	bne.n	80043de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b10      	cmp	r3, #16
 800441e:	d10a      	bne.n	8004436 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff fdf9 	bl	8004034 <HAL_UARTEx_RxEventCallback>
 8004442:	e002      	b.n	800444a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fde1 	bl	800400c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e002      	b.n	8004454 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3730      	adds	r7, #48	; 0x30
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004460:	b09f      	sub	sp, #124	; 0x7c
 8004462:	af00      	add	r7, sp, #0
 8004464:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004472:	68d9      	ldr	r1, [r3, #12]
 8004474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	ea40 0301 	orr.w	r3, r0, r1
 800447c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800447e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	431a      	orrs	r2, r3
 8004488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	431a      	orrs	r2, r3
 800448e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	4313      	orrs	r3, r2
 8004494:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044a0:	f021 010c 	bic.w	r1, r1, #12
 80044a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044aa:	430b      	orrs	r3, r1
 80044ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ba:	6999      	ldr	r1, [r3, #24]
 80044bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	ea40 0301 	orr.w	r3, r0, r1
 80044c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4bc5      	ldr	r3, [pc, #788]	; (80047e0 <UART_SetConfig+0x384>)
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d004      	beq.n	80044da <UART_SetConfig+0x7e>
 80044d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4bc3      	ldr	r3, [pc, #780]	; (80047e4 <UART_SetConfig+0x388>)
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d103      	bne.n	80044e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044da:	f7fe fbb9 	bl	8002c50 <HAL_RCC_GetPCLK2Freq>
 80044de:	6778      	str	r0, [r7, #116]	; 0x74
 80044e0:	e002      	b.n	80044e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044e2:	f7fe fba1 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 80044e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f0:	f040 80b6 	bne.w	8004660 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f6:	461c      	mov	r4, r3
 80044f8:	f04f 0500 	mov.w	r5, #0
 80044fc:	4622      	mov	r2, r4
 80044fe:	462b      	mov	r3, r5
 8004500:	1891      	adds	r1, r2, r2
 8004502:	6439      	str	r1, [r7, #64]	; 0x40
 8004504:	415b      	adcs	r3, r3
 8004506:	647b      	str	r3, [r7, #68]	; 0x44
 8004508:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800450c:	1912      	adds	r2, r2, r4
 800450e:	eb45 0303 	adc.w	r3, r5, r3
 8004512:	f04f 0000 	mov.w	r0, #0
 8004516:	f04f 0100 	mov.w	r1, #0
 800451a:	00d9      	lsls	r1, r3, #3
 800451c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004520:	00d0      	lsls	r0, r2, #3
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	1911      	adds	r1, r2, r4
 8004528:	6639      	str	r1, [r7, #96]	; 0x60
 800452a:	416b      	adcs	r3, r5
 800452c:	667b      	str	r3, [r7, #100]	; 0x64
 800452e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	461a      	mov	r2, r3
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	1891      	adds	r1, r2, r2
 800453a:	63b9      	str	r1, [r7, #56]	; 0x38
 800453c:	415b      	adcs	r3, r3
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004544:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004548:	f7fc fb36 	bl	8000bb8 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4ba5      	ldr	r3, [pc, #660]	; (80047e8 <UART_SetConfig+0x38c>)
 8004552:	fba3 2302 	umull	r2, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	011e      	lsls	r6, r3, #4
 800455a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800455c:	461c      	mov	r4, r3
 800455e:	f04f 0500 	mov.w	r5, #0
 8004562:	4622      	mov	r2, r4
 8004564:	462b      	mov	r3, r5
 8004566:	1891      	adds	r1, r2, r2
 8004568:	6339      	str	r1, [r7, #48]	; 0x30
 800456a:	415b      	adcs	r3, r3
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
 800456e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004572:	1912      	adds	r2, r2, r4
 8004574:	eb45 0303 	adc.w	r3, r5, r3
 8004578:	f04f 0000 	mov.w	r0, #0
 800457c:	f04f 0100 	mov.w	r1, #0
 8004580:	00d9      	lsls	r1, r3, #3
 8004582:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004586:	00d0      	lsls	r0, r2, #3
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	1911      	adds	r1, r2, r4
 800458e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004590:	416b      	adcs	r3, r5
 8004592:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	461a      	mov	r2, r3
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	1891      	adds	r1, r2, r2
 80045a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80045a2:	415b      	adcs	r3, r3
 80045a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045ae:	f7fc fb03 	bl	8000bb8 <__aeabi_uldivmod>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4b8c      	ldr	r3, [pc, #560]	; (80047e8 <UART_SetConfig+0x38c>)
 80045b8:	fba3 1302 	umull	r1, r3, r3, r2
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	2164      	movs	r1, #100	; 0x64
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	3332      	adds	r3, #50	; 0x32
 80045ca:	4a87      	ldr	r2, [pc, #540]	; (80047e8 <UART_SetConfig+0x38c>)
 80045cc:	fba2 2303 	umull	r2, r3, r2, r3
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045d8:	441e      	add	r6, r3
 80045da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045dc:	4618      	mov	r0, r3
 80045de:	f04f 0100 	mov.w	r1, #0
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	1894      	adds	r4, r2, r2
 80045e8:	623c      	str	r4, [r7, #32]
 80045ea:	415b      	adcs	r3, r3
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
 80045ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045f2:	1812      	adds	r2, r2, r0
 80045f4:	eb41 0303 	adc.w	r3, r1, r3
 80045f8:	f04f 0400 	mov.w	r4, #0
 80045fc:	f04f 0500 	mov.w	r5, #0
 8004600:	00dd      	lsls	r5, r3, #3
 8004602:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004606:	00d4      	lsls	r4, r2, #3
 8004608:	4622      	mov	r2, r4
 800460a:	462b      	mov	r3, r5
 800460c:	1814      	adds	r4, r2, r0
 800460e:	653c      	str	r4, [r7, #80]	; 0x50
 8004610:	414b      	adcs	r3, r1
 8004612:	657b      	str	r3, [r7, #84]	; 0x54
 8004614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	461a      	mov	r2, r3
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	1891      	adds	r1, r2, r2
 8004620:	61b9      	str	r1, [r7, #24]
 8004622:	415b      	adcs	r3, r3
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800462a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800462e:	f7fc fac3 	bl	8000bb8 <__aeabi_uldivmod>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4b6c      	ldr	r3, [pc, #432]	; (80047e8 <UART_SetConfig+0x38c>)
 8004638:	fba3 1302 	umull	r1, r3, r3, r2
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	2164      	movs	r1, #100	; 0x64
 8004640:	fb01 f303 	mul.w	r3, r1, r3
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	3332      	adds	r3, #50	; 0x32
 800464a:	4a67      	ldr	r2, [pc, #412]	; (80047e8 <UART_SetConfig+0x38c>)
 800464c:	fba2 2303 	umull	r2, r3, r2, r3
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	f003 0207 	and.w	r2, r3, #7
 8004656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4432      	add	r2, r6
 800465c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800465e:	e0b9      	b.n	80047d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004662:	461c      	mov	r4, r3
 8004664:	f04f 0500 	mov.w	r5, #0
 8004668:	4622      	mov	r2, r4
 800466a:	462b      	mov	r3, r5
 800466c:	1891      	adds	r1, r2, r2
 800466e:	6139      	str	r1, [r7, #16]
 8004670:	415b      	adcs	r3, r3
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004678:	1912      	adds	r2, r2, r4
 800467a:	eb45 0303 	adc.w	r3, r5, r3
 800467e:	f04f 0000 	mov.w	r0, #0
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	00d9      	lsls	r1, r3, #3
 8004688:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800468c:	00d0      	lsls	r0, r2, #3
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	eb12 0804 	adds.w	r8, r2, r4
 8004696:	eb43 0905 	adc.w	r9, r3, r5
 800469a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4618      	mov	r0, r3
 80046a0:	f04f 0100 	mov.w	r1, #0
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	008b      	lsls	r3, r1, #2
 80046ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046b2:	0082      	lsls	r2, r0, #2
 80046b4:	4640      	mov	r0, r8
 80046b6:	4649      	mov	r1, r9
 80046b8:	f7fc fa7e 	bl	8000bb8 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4b49      	ldr	r3, [pc, #292]	; (80047e8 <UART_SetConfig+0x38c>)
 80046c2:	fba3 2302 	umull	r2, r3, r3, r2
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	011e      	lsls	r6, r3, #4
 80046ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046cc:	4618      	mov	r0, r3
 80046ce:	f04f 0100 	mov.w	r1, #0
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	1894      	adds	r4, r2, r2
 80046d8:	60bc      	str	r4, [r7, #8]
 80046da:	415b      	adcs	r3, r3
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e2:	1812      	adds	r2, r2, r0
 80046e4:	eb41 0303 	adc.w	r3, r1, r3
 80046e8:	f04f 0400 	mov.w	r4, #0
 80046ec:	f04f 0500 	mov.w	r5, #0
 80046f0:	00dd      	lsls	r5, r3, #3
 80046f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046f6:	00d4      	lsls	r4, r2, #3
 80046f8:	4622      	mov	r2, r4
 80046fa:	462b      	mov	r3, r5
 80046fc:	1814      	adds	r4, r2, r0
 80046fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8004700:	414b      	adcs	r3, r1
 8004702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4618      	mov	r0, r3
 800470a:	f04f 0100 	mov.w	r1, #0
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	008b      	lsls	r3, r1, #2
 8004718:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800471c:	0082      	lsls	r2, r0, #2
 800471e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004722:	f7fc fa49 	bl	8000bb8 <__aeabi_uldivmod>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4b2f      	ldr	r3, [pc, #188]	; (80047e8 <UART_SetConfig+0x38c>)
 800472c:	fba3 1302 	umull	r1, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	2164      	movs	r1, #100	; 0x64
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	3332      	adds	r3, #50	; 0x32
 800473e:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <UART_SetConfig+0x38c>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800474a:	441e      	add	r6, r3
 800474c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800474e:	4618      	mov	r0, r3
 8004750:	f04f 0100 	mov.w	r1, #0
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	1894      	adds	r4, r2, r2
 800475a:	603c      	str	r4, [r7, #0]
 800475c:	415b      	adcs	r3, r3
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004764:	1812      	adds	r2, r2, r0
 8004766:	eb41 0303 	adc.w	r3, r1, r3
 800476a:	f04f 0400 	mov.w	r4, #0
 800476e:	f04f 0500 	mov.w	r5, #0
 8004772:	00dd      	lsls	r5, r3, #3
 8004774:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004778:	00d4      	lsls	r4, r2, #3
 800477a:	4622      	mov	r2, r4
 800477c:	462b      	mov	r3, r5
 800477e:	eb12 0a00 	adds.w	sl, r2, r0
 8004782:	eb43 0b01 	adc.w	fp, r3, r1
 8004786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4618      	mov	r0, r3
 800478c:	f04f 0100 	mov.w	r1, #0
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	008b      	lsls	r3, r1, #2
 800479a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800479e:	0082      	lsls	r2, r0, #2
 80047a0:	4650      	mov	r0, sl
 80047a2:	4659      	mov	r1, fp
 80047a4:	f7fc fa08 	bl	8000bb8 <__aeabi_uldivmod>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <UART_SetConfig+0x38c>)
 80047ae:	fba3 1302 	umull	r1, r3, r3, r2
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2164      	movs	r1, #100	; 0x64
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	3332      	adds	r3, #50	; 0x32
 80047c0:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <UART_SetConfig+0x38c>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	f003 020f 	and.w	r2, r3, #15
 80047cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4432      	add	r2, r6
 80047d2:	609a      	str	r2, [r3, #8]
}
 80047d4:	bf00      	nop
 80047d6:	377c      	adds	r7, #124	; 0x7c
 80047d8:	46bd      	mov	sp, r7
 80047da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047de:	bf00      	nop
 80047e0:	40011000 	.word	0x40011000
 80047e4:	40011400 	.word	0x40011400
 80047e8:	51eb851f 	.word	0x51eb851f

080047ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80047fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047fe:	2b84      	cmp	r3, #132	; 0x84
 8004800:	d005      	beq.n	800480e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004802:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	3303      	adds	r3, #3
 800480c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800480e:	68fb      	ldr	r3, [r7, #12]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004820:	f000 ffc8 	bl	80057b4 <vTaskStartScheduler>
  
  return osOK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	bd80      	pop	{r7, pc}

0800482a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800482a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482c:	b089      	sub	sp, #36	; 0x24
 800482e:	af04      	add	r7, sp, #16
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d020      	beq.n	800487e <osThreadCreate+0x54>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01c      	beq.n	800487e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685c      	ldr	r4, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681d      	ldr	r5, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691e      	ldr	r6, [r3, #16]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff ffc8 	bl	80047ec <makeFreeRtosPriority>
 800485c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004866:	9202      	str	r2, [sp, #8]
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	9100      	str	r1, [sp, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	4632      	mov	r2, r6
 8004870:	4629      	mov	r1, r5
 8004872:	4620      	mov	r0, r4
 8004874:	f000 fdd6 	bl	8005424 <xTaskCreateStatic>
 8004878:	4603      	mov	r3, r0
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e01c      	b.n	80048b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685c      	ldr	r4, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800488a:	b29e      	uxth	r6, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff ffaa 	bl	80047ec <makeFreeRtosPriority>
 8004898:	4602      	mov	r2, r0
 800489a:	f107 030c 	add.w	r3, r7, #12
 800489e:	9301      	str	r3, [sp, #4]
 80048a0:	9200      	str	r2, [sp, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	4632      	mov	r2, r6
 80048a6:	4629      	mov	r1, r5
 80048a8:	4620      	mov	r0, r4
 80048aa:	f000 fe18 	bl	80054de <xTaskCreate>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d001      	beq.n	80048b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e000      	b.n	80048ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80048b8:	68fb      	ldr	r3, [r7, #12]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <osDelay+0x16>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	e000      	b.n	80048da <osDelay+0x18>
 80048d8:	2301      	movs	r3, #1
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 ff36 	bl	800574c <vTaskDelay>
  
  return osOK;
 80048e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f103 0208 	add.w	r2, r3, #8
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004902:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f103 0208 	add.w	r2, r3, #8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f103 0208 	add.w	r2, r3, #8
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	601a      	str	r2, [r3, #0]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d103      	bne.n	80049ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	e00c      	b.n	80049c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3308      	adds	r3, #8
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	e002      	b.n	80049ba <vListInsert+0x2e>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d2f6      	bcs.n	80049b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]
}
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6892      	ldr	r2, [r2, #8]
 8004a14:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6852      	ldr	r2, [r2, #4]
 8004a1e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d103      	bne.n	8004a32 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	1e5a      	subs	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a7e:	f002 f841 	bl	8006b04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	441a      	add	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	441a      	add	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	22ff      	movs	r2, #255	; 0xff
 8004ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	22ff      	movs	r2, #255	; 0xff
 8004aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d114      	bne.n	8004afe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01a      	beq.n	8004b12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3310      	adds	r3, #16
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 f8eb 	bl	8005cbc <xTaskRemoveFromEventList>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d012      	beq.n	8004b12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <xQueueGenericReset+0xcc>)
 8004aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	e009      	b.n	8004b12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3310      	adds	r3, #16
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fef1 	bl	80048ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3324      	adds	r3, #36	; 0x24
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff feec 	bl	80048ea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b12:	f002 f827 	bl	8006b64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b16:	2301      	movs	r3, #1
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08e      	sub	sp, #56	; 0x38
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <xQueueGenericCreateStatic+0x52>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <xQueueGenericCreateStatic+0x56>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <xQueueGenericCreateStatic+0x58>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	623b      	str	r3, [r7, #32]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <xQueueGenericCreateStatic+0x7e>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <xQueueGenericCreateStatic+0x82>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <xQueueGenericCreateStatic+0x84>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	61fb      	str	r3, [r7, #28]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bc2:	2348      	movs	r3, #72	; 0x48
 8004bc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b48      	cmp	r3, #72	; 0x48
 8004bca:	d00a      	beq.n	8004be2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	61bb      	str	r3, [r7, #24]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004be2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f805 	bl	8004c14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3730      	adds	r7, #48	; 0x30
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e002      	b.n	8004c36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c42:	2101      	movs	r1, #1
 8004c44:	69b8      	ldr	r0, [r7, #24]
 8004c46:	f7ff ff05 	bl	8004a54 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08e      	sub	sp, #56	; 0x38
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c62:	2300      	movs	r3, #0
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <xQueueGenericSend+0x32>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d103      	bne.n	8004c94 <xQueueGenericSend+0x40>
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <xQueueGenericSend+0x44>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <xQueueGenericSend+0x46>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <xQueueGenericSend+0x60>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d103      	bne.n	8004cc2 <xQueueGenericSend+0x6e>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <xQueueGenericSend+0x72>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <xQueueGenericSend+0x74>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	623b      	str	r3, [r7, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ce2:	f001 f9a7 	bl	8006034 <xTaskGetSchedulerState>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <xQueueGenericSend+0x9e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <xQueueGenericSend+0xa2>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <xQueueGenericSend+0xa4>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10a      	bne.n	8004d12 <xQueueGenericSend+0xbe>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	61fb      	str	r3, [r7, #28]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d12:	f001 fef7 	bl	8006b04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d302      	bcc.n	8004d28 <xQueueGenericSend+0xd4>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d129      	bne.n	8004d7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d2e:	f000 fa0b 	bl	8005148 <prvCopyDataToQueue>
 8004d32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d010      	beq.n	8004d5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	3324      	adds	r3, #36	; 0x24
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 ffbb 	bl	8005cbc <xTaskRemoveFromEventList>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d013      	beq.n	8004d74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d4c:	4b3f      	ldr	r3, [pc, #252]	; (8004e4c <xQueueGenericSend+0x1f8>)
 8004d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	e00a      	b.n	8004d74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d64:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <xQueueGenericSend+0x1f8>)
 8004d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d74:	f001 fef6 	bl	8006b64 <vPortExitCritical>
				return pdPASS;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e063      	b.n	8004e44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d82:	f001 feef 	bl	8006b64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e05c      	b.n	8004e44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d90:	f107 0314 	add.w	r3, r7, #20
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fff3 	bl	8005d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d9e:	f001 fee1 	bl	8006b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004da2:	f000 fd6d 	bl	8005880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004da6:	f001 fead 	bl	8006b04 <vPortEnterCritical>
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004db0:	b25b      	sxtb	r3, r3
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d103      	bne.n	8004dc0 <xQueueGenericSend+0x16c>
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dc6:	b25b      	sxtb	r3, r3
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d103      	bne.n	8004dd6 <xQueueGenericSend+0x182>
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dd6:	f001 fec5 	bl	8006b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dda:	1d3a      	adds	r2, r7, #4
 8004ddc:	f107 0314 	add.w	r3, r7, #20
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 ffe2 	bl	8005dac <xTaskCheckForTimeOut>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d124      	bne.n	8004e38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004df0:	f000 faa2 	bl	8005338 <prvIsQueueFull>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d018      	beq.n	8004e2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	3310      	adds	r3, #16
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 ff0a 	bl	8005c1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e0a:	f000 fa2d 	bl	8005268 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e0e:	f000 fd45 	bl	800589c <xTaskResumeAll>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f47f af7c 	bne.w	8004d12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <xQueueGenericSend+0x1f8>)
 8004e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	e772      	b.n	8004d12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e2e:	f000 fa1b 	bl	8005268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e32:	f000 fd33 	bl	800589c <xTaskResumeAll>
 8004e36:	e76c      	b.n	8004d12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e3a:	f000 fa15 	bl	8005268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e3e:	f000 fd2d 	bl	800589c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3738      	adds	r7, #56	; 0x38
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	e000ed04 	.word	0xe000ed04

08004e50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b090      	sub	sp, #64	; 0x40
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d103      	bne.n	8004e8c <xQueueGenericSendFromISR+0x3c>
 8004e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <xQueueGenericSendFromISR+0x40>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <xQueueGenericSendFromISR+0x42>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10a      	bne.n	8004eac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d103      	bne.n	8004eba <xQueueGenericSendFromISR+0x6a>
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <xQueueGenericSendFromISR+0x6e>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <xQueueGenericSendFromISR+0x70>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	623b      	str	r3, [r7, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004eda:	f001 fef5 	bl	8006cc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ede:	f3ef 8211 	mrs	r2, BASEPRI
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	61fa      	str	r2, [r7, #28]
 8004ef4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ef8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <xQueueGenericSendFromISR+0xbc>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d12f      	bne.n	8004f6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f22:	f000 f911 	bl	8005148 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d112      	bne.n	8004f56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d016      	beq.n	8004f66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	3324      	adds	r3, #36	; 0x24
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 febd 	bl	8005cbc <xTaskRemoveFromEventList>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00e      	beq.n	8004f66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e007      	b.n	8004f66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	b25a      	sxtb	r2, r3
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f66:	2301      	movs	r3, #1
 8004f68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004f6a:	e001      	b.n	8004f70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3740      	adds	r7, #64	; 0x40
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08c      	sub	sp, #48	; 0x30
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <xQueueReceive+0x30>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	623b      	str	r3, [r7, #32]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <xQueueReceive+0x3e>
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <xQueueReceive+0x42>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <xQueueReceive+0x44>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <xQueueReceive+0x5e>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	61fb      	str	r3, [r7, #28]
}
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fe6:	f001 f825 	bl	8006034 <xTaskGetSchedulerState>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <xQueueReceive+0x6e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <xQueueReceive+0x72>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <xQueueReceive+0x74>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <xQueueReceive+0x8e>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	61bb      	str	r3, [r7, #24]
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005016:	f001 fd75 	bl	8006b04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01f      	beq.n	8005066 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800502a:	f000 f8f7 	bl	800521c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	1e5a      	subs	r2, r3, #1
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00f      	beq.n	800505e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	3310      	adds	r3, #16
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fe3a 	bl	8005cbc <xTaskRemoveFromEventList>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800504e:	4b3d      	ldr	r3, [pc, #244]	; (8005144 <xQueueReceive+0x1bc>)
 8005050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800505e:	f001 fd81 	bl	8006b64 <vPortExitCritical>
				return pdPASS;
 8005062:	2301      	movs	r3, #1
 8005064:	e069      	b.n	800513a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800506c:	f001 fd7a 	bl	8006b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005070:	2300      	movs	r3, #0
 8005072:	e062      	b.n	800513a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800507a:	f107 0310 	add.w	r3, r7, #16
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fe7e 	bl	8005d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005084:	2301      	movs	r3, #1
 8005086:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005088:	f001 fd6c 	bl	8006b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800508c:	f000 fbf8 	bl	8005880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005090:	f001 fd38 	bl	8006b04 <vPortEnterCritical>
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800509a:	b25b      	sxtb	r3, r3
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d103      	bne.n	80050aa <xQueueReceive+0x122>
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b0:	b25b      	sxtb	r3, r3
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d103      	bne.n	80050c0 <xQueueReceive+0x138>
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c0:	f001 fd50 	bl	8006b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050c4:	1d3a      	adds	r2, r7, #4
 80050c6:	f107 0310 	add.w	r3, r7, #16
 80050ca:	4611      	mov	r1, r2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fe6d 	bl	8005dac <xTaskCheckForTimeOut>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d123      	bne.n	8005120 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050da:	f000 f917 	bl	800530c <prvIsQueueEmpty>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d017      	beq.n	8005114 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	3324      	adds	r3, #36	; 0x24
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	4611      	mov	r1, r2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fd95 	bl	8005c1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f4:	f000 f8b8 	bl	8005268 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050f8:	f000 fbd0 	bl	800589c <xTaskResumeAll>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d189      	bne.n	8005016 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005102:	4b10      	ldr	r3, [pc, #64]	; (8005144 <xQueueReceive+0x1bc>)
 8005104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	e780      	b.n	8005016 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005116:	f000 f8a7 	bl	8005268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800511a:	f000 fbbf 	bl	800589c <xTaskResumeAll>
 800511e:	e77a      	b.n	8005016 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005122:	f000 f8a1 	bl	8005268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005126:	f000 fbb9 	bl	800589c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800512a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800512c:	f000 f8ee 	bl	800530c <prvIsQueueEmpty>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	f43f af6f 	beq.w	8005016 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005138:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800513a:	4618      	mov	r0, r3
 800513c:	3730      	adds	r7, #48	; 0x30
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	e000ed04 	.word	0xe000ed04

08005148 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10d      	bne.n	8005182 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d14d      	bne.n	800520a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	4618      	mov	r0, r3
 8005174:	f000 ff7c 	bl	8006070 <xTaskPriorityDisinherit>
 8005178:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	e043      	b.n	800520a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d119      	bne.n	80051bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6858      	ldr	r0, [r3, #4]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	461a      	mov	r2, r3
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	f001 ffec 	bl	8007170 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	441a      	add	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d32b      	bcc.n	800520a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	605a      	str	r2, [r3, #4]
 80051ba:	e026      	b.n	800520a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68d8      	ldr	r0, [r3, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	461a      	mov	r2, r3
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	f001 ffd2 	bl	8007170 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	425b      	negs	r3, r3
 80051d6:	441a      	add	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d207      	bcs.n	80051f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	425b      	negs	r3, r3
 80051f2:	441a      	add	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d105      	bne.n	800520a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	3b01      	subs	r3, #1
 8005208:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005212:	697b      	ldr	r3, [r7, #20]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d018      	beq.n	8005260 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	441a      	add	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	429a      	cmp	r2, r3
 8005246:	d303      	bcc.n	8005250 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68d9      	ldr	r1, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	461a      	mov	r2, r3
 800525a:	6838      	ldr	r0, [r7, #0]
 800525c:	f001 ff88 	bl	8007170 <memcpy>
	}
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005270:	f001 fc48 	bl	8006b04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800527a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800527c:	e011      	b.n	80052a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b00      	cmp	r3, #0
 8005284:	d012      	beq.n	80052ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3324      	adds	r3, #36	; 0x24
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fd16 	bl	8005cbc <xTaskRemoveFromEventList>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005296:	f000 fdeb 	bl	8005e70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	3b01      	subs	r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	dce9      	bgt.n	800527e <prvUnlockQueue+0x16>
 80052aa:	e000      	b.n	80052ae <prvUnlockQueue+0x46>
					break;
 80052ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	22ff      	movs	r2, #255	; 0xff
 80052b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052b6:	f001 fc55 	bl	8006b64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052ba:	f001 fc23 	bl	8006b04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052c6:	e011      	b.n	80052ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d012      	beq.n	80052f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3310      	adds	r3, #16
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fcf1 	bl	8005cbc <xTaskRemoveFromEventList>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052e0:	f000 fdc6 	bl	8005e70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052e4:	7bbb      	ldrb	r3, [r7, #14]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	dce9      	bgt.n	80052c8 <prvUnlockQueue+0x60>
 80052f4:	e000      	b.n	80052f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	22ff      	movs	r2, #255	; 0xff
 80052fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005300:	f001 fc30 	bl	8006b64 <vPortExitCritical>
}
 8005304:	bf00      	nop
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005314:	f001 fbf6 	bl	8006b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	2b00      	cmp	r3, #0
 800531e:	d102      	bne.n	8005326 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005320:	2301      	movs	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e001      	b.n	800532a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800532a:	f001 fc1b 	bl	8006b64 <vPortExitCritical>

	return xReturn;
 800532e:	68fb      	ldr	r3, [r7, #12]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005340:	f001 fbe0 	bl	8006b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534c:	429a      	cmp	r2, r3
 800534e:	d102      	bne.n	8005356 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005350:	2301      	movs	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e001      	b.n	800535a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800535a:	f001 fc03 	bl	8006b64 <vPortExitCritical>

	return xReturn;
 800535e:	68fb      	ldr	r3, [r7, #12]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	e014      	b.n	80053a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005378:	4a0f      	ldr	r2, [pc, #60]	; (80053b8 <vQueueAddToRegistry+0x50>)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10b      	bne.n	800539c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005384:	490c      	ldr	r1, [pc, #48]	; (80053b8 <vQueueAddToRegistry+0x50>)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800538e:	4a0a      	ldr	r2, [pc, #40]	; (80053b8 <vQueueAddToRegistry+0x50>)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800539a:	e006      	b.n	80053aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b07      	cmp	r3, #7
 80053a6:	d9e7      	bls.n	8005378 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20004994 	.word	0x20004994

080053bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053cc:	f001 fb9a 	bl	8006b04 <vPortEnterCritical>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053d6:	b25b      	sxtb	r3, r3
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d103      	bne.n	80053e6 <vQueueWaitForMessageRestricted+0x2a>
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053ec:	b25b      	sxtb	r3, r3
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f2:	d103      	bne.n	80053fc <vQueueWaitForMessageRestricted+0x40>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053fc:	f001 fbb2 	bl	8006b64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	3324      	adds	r3, #36	; 0x24
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fc27 	bl	8005c64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005416:	6978      	ldr	r0, [r7, #20]
 8005418:	f7ff ff26 	bl	8005268 <prvUnlockQueue>
	}
 800541c:	bf00      	nop
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08e      	sub	sp, #56	; 0x38
 8005428:	af04      	add	r7, sp, #16
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	623b      	str	r3, [r7, #32]
}
 800544a:	bf00      	nop
 800544c:	e7fe      	b.n	800544c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <xTaskCreateStatic+0x46>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	61fb      	str	r3, [r7, #28]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800546a:	2354      	movs	r3, #84	; 0x54
 800546c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b54      	cmp	r3, #84	; 0x54
 8005472:	d00a      	beq.n	800548a <xTaskCreateStatic+0x66>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	61bb      	str	r3, [r7, #24]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800548a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800548c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548e:	2b00      	cmp	r3, #0
 8005490:	d01e      	beq.n	80054d0 <xTaskCreateStatic+0xac>
 8005492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01b      	beq.n	80054d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	2202      	movs	r2, #2
 80054a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054aa:	2300      	movs	r3, #0
 80054ac:	9303      	str	r3, [sp, #12]
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	9302      	str	r3, [sp, #8]
 80054b2:	f107 0314 	add.w	r3, r7, #20
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f850 	bl	8005568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054ca:	f000 f8d5 	bl	8005678 <prvAddNewTaskToReadyList>
 80054ce:	e001      	b.n	80054d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054d4:	697b      	ldr	r3, [r7, #20]
	}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3728      	adds	r7, #40	; 0x28
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b08c      	sub	sp, #48	; 0x30
 80054e2:	af04      	add	r7, sp, #16
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4613      	mov	r3, r2
 80054ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f001 fc28 	bl	8006d48 <pvPortMalloc>
 80054f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00e      	beq.n	800551e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005500:	2054      	movs	r0, #84	; 0x54
 8005502:	f001 fc21 	bl	8006d48 <pvPortMalloc>
 8005506:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
 8005514:	e005      	b.n	8005522 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005516:	6978      	ldr	r0, [r7, #20]
 8005518:	f001 fce2 	bl	8006ee0 <vPortFree>
 800551c:	e001      	b.n	8005522 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d017      	beq.n	8005558 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	2300      	movs	r3, #0
 8005534:	9303      	str	r3, [sp, #12]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	9302      	str	r3, [sp, #8]
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f80e 	bl	8005568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800554c:	69f8      	ldr	r0, [r7, #28]
 800554e:	f000 f893 	bl	8005678 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005552:	2301      	movs	r3, #1
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	e002      	b.n	800555e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005558:	f04f 33ff 	mov.w	r3, #4294967295
 800555c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800555e:	69bb      	ldr	r3, [r7, #24]
	}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005580:	3b01      	subs	r3, #1
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	f023 0307 	bic.w	r3, r3, #7
 800558e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	617b      	str	r3, [r7, #20]
}
 80055ac:	bf00      	nop
 80055ae:	e7fe      	b.n	80055ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d01f      	beq.n	80055f6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	e012      	b.n	80055e2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	7819      	ldrb	r1, [r3, #0]
 80055c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	3334      	adds	r3, #52	; 0x34
 80055cc:	460a      	mov	r2, r1
 80055ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d006      	beq.n	80055ea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	3301      	adds	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	2b0f      	cmp	r3, #15
 80055e6:	d9e9      	bls.n	80055bc <prvInitialiseNewTask+0x54>
 80055e8:	e000      	b.n	80055ec <prvInitialiseNewTask+0x84>
			{
				break;
 80055ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055f4:	e003      	b.n	80055fe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	2b06      	cmp	r3, #6
 8005602:	d901      	bls.n	8005608 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005604:	2306      	movs	r3, #6
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800560c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005612:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	2200      	movs	r2, #0
 8005618:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	3304      	adds	r3, #4
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff f983 	bl	800492a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	3318      	adds	r3, #24
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff f97e 	bl	800492a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005632:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	f1c3 0207 	rsb	r2, r3, #7
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005642:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	2200      	movs	r2, #0
 8005648:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	68f9      	ldr	r1, [r7, #12]
 8005656:	69b8      	ldr	r0, [r7, #24]
 8005658:	f001 f928 	bl	80068ac <pxPortInitialiseStack>
 800565c:	4602      	mov	r2, r0
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800566c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800566e:	bf00      	nop
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005680:	f001 fa40 	bl	8006b04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005684:	4b2a      	ldr	r3, [pc, #168]	; (8005730 <prvAddNewTaskToReadyList+0xb8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	4a29      	ldr	r2, [pc, #164]	; (8005730 <prvAddNewTaskToReadyList+0xb8>)
 800568c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800568e:	4b29      	ldr	r3, [pc, #164]	; (8005734 <prvAddNewTaskToReadyList+0xbc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005696:	4a27      	ldr	r2, [pc, #156]	; (8005734 <prvAddNewTaskToReadyList+0xbc>)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800569c:	4b24      	ldr	r3, [pc, #144]	; (8005730 <prvAddNewTaskToReadyList+0xb8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d110      	bne.n	80056c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056a4:	f000 fc08 	bl	8005eb8 <prvInitialiseTaskLists>
 80056a8:	e00d      	b.n	80056c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056aa:	4b23      	ldr	r3, [pc, #140]	; (8005738 <prvAddNewTaskToReadyList+0xc0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056b2:	4b20      	ldr	r3, [pc, #128]	; (8005734 <prvAddNewTaskToReadyList+0xbc>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	429a      	cmp	r2, r3
 80056be:	d802      	bhi.n	80056c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056c0:	4a1c      	ldr	r2, [pc, #112]	; (8005734 <prvAddNewTaskToReadyList+0xbc>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <prvAddNewTaskToReadyList+0xc4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3301      	adds	r3, #1
 80056cc:	4a1b      	ldr	r2, [pc, #108]	; (800573c <prvAddNewTaskToReadyList+0xc4>)
 80056ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	2201      	movs	r2, #1
 80056d6:	409a      	lsls	r2, r3
 80056d8:	4b19      	ldr	r3, [pc, #100]	; (8005740 <prvAddNewTaskToReadyList+0xc8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4313      	orrs	r3, r2
 80056de:	4a18      	ldr	r2, [pc, #96]	; (8005740 <prvAddNewTaskToReadyList+0xc8>)
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4a15      	ldr	r2, [pc, #84]	; (8005744 <prvAddNewTaskToReadyList+0xcc>)
 80056f0:	441a      	add	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f7ff f923 	bl	8004944 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056fe:	f001 fa31 	bl	8006b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005702:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <prvAddNewTaskToReadyList+0xc0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00e      	beq.n	8005728 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800570a:	4b0a      	ldr	r3, [pc, #40]	; (8005734 <prvAddNewTaskToReadyList+0xbc>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	429a      	cmp	r2, r3
 8005716:	d207      	bcs.n	8005728 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005718:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <prvAddNewTaskToReadyList+0xd0>)
 800571a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005728:	bf00      	nop
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	200009a8 	.word	0x200009a8
 8005734:	200008a8 	.word	0x200008a8
 8005738:	200009b4 	.word	0x200009b4
 800573c:	200009c4 	.word	0x200009c4
 8005740:	200009b0 	.word	0x200009b0
 8005744:	200008ac 	.word	0x200008ac
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d017      	beq.n	800578e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800575e:	4b13      	ldr	r3, [pc, #76]	; (80057ac <vTaskDelay+0x60>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <vTaskDelay+0x30>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	60bb      	str	r3, [r7, #8]
}
 8005778:	bf00      	nop
 800577a:	e7fe      	b.n	800577a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800577c:	f000 f880 	bl	8005880 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005780:	2100      	movs	r1, #0
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fcfa 	bl	800617c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005788:	f000 f888 	bl	800589c <xTaskResumeAll>
 800578c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d107      	bne.n	80057a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <vTaskDelay+0x64>)
 8005796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	200009d0 	.word	0x200009d0
 80057b0:	e000ed04 	.word	0xe000ed04

080057b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057c2:	463a      	mov	r2, r7
 80057c4:	1d39      	adds	r1, r7, #4
 80057c6:	f107 0308 	add.w	r3, r7, #8
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fb fb70 	bl	8000eb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	9202      	str	r2, [sp, #8]
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	2300      	movs	r3, #0
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	2300      	movs	r3, #0
 80057e0:	460a      	mov	r2, r1
 80057e2:	4921      	ldr	r1, [pc, #132]	; (8005868 <vTaskStartScheduler+0xb4>)
 80057e4:	4821      	ldr	r0, [pc, #132]	; (800586c <vTaskStartScheduler+0xb8>)
 80057e6:	f7ff fe1d 	bl	8005424 <xTaskCreateStatic>
 80057ea:	4603      	mov	r3, r0
 80057ec:	4a20      	ldr	r2, [pc, #128]	; (8005870 <vTaskStartScheduler+0xbc>)
 80057ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057f0:	4b1f      	ldr	r3, [pc, #124]	; (8005870 <vTaskStartScheduler+0xbc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057f8:	2301      	movs	r3, #1
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e001      	b.n	8005802 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d102      	bne.n	800580e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005808:	f000 fd1e 	bl	8006248 <xTimerCreateTimerTask>
 800580c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d116      	bne.n	8005842 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	613b      	str	r3, [r7, #16]
}
 8005826:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005828:	4b12      	ldr	r3, [pc, #72]	; (8005874 <vTaskStartScheduler+0xc0>)
 800582a:	f04f 32ff 	mov.w	r2, #4294967295
 800582e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005830:	4b11      	ldr	r3, [pc, #68]	; (8005878 <vTaskStartScheduler+0xc4>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005836:	4b11      	ldr	r3, [pc, #68]	; (800587c <vTaskStartScheduler+0xc8>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800583c:	f001 f8c0 	bl	80069c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005840:	e00e      	b.n	8005860 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d10a      	bne.n	8005860 <vTaskStartScheduler+0xac>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	60fb      	str	r3, [r7, #12]
}
 800585c:	bf00      	nop
 800585e:	e7fe      	b.n	800585e <vTaskStartScheduler+0xaa>
}
 8005860:	bf00      	nop
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	08009f0c 	.word	0x08009f0c
 800586c:	08005e89 	.word	0x08005e89
 8005870:	200009cc 	.word	0x200009cc
 8005874:	200009c8 	.word	0x200009c8
 8005878:	200009b4 	.word	0x200009b4
 800587c:	200009ac 	.word	0x200009ac

08005880 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <vTaskSuspendAll+0x18>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	4a03      	ldr	r2, [pc, #12]	; (8005898 <vTaskSuspendAll+0x18>)
 800588c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800588e:	bf00      	nop
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	200009d0 	.word	0x200009d0

0800589c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058aa:	4b41      	ldr	r3, [pc, #260]	; (80059b0 <xTaskResumeAll+0x114>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	603b      	str	r3, [r7, #0]
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058c8:	f001 f91c 	bl	8006b04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058cc:	4b38      	ldr	r3, [pc, #224]	; (80059b0 <xTaskResumeAll+0x114>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	4a37      	ldr	r2, [pc, #220]	; (80059b0 <xTaskResumeAll+0x114>)
 80058d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058d6:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <xTaskResumeAll+0x114>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d161      	bne.n	80059a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058de:	4b35      	ldr	r3, [pc, #212]	; (80059b4 <xTaskResumeAll+0x118>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d05d      	beq.n	80059a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058e6:	e02e      	b.n	8005946 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058e8:	4b33      	ldr	r3, [pc, #204]	; (80059b8 <xTaskResumeAll+0x11c>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3318      	adds	r3, #24
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff f882 	bl	80049fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3304      	adds	r3, #4
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff f87d 	bl	80049fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	2201      	movs	r2, #1
 800590a:	409a      	lsls	r2, r3
 800590c:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <xTaskResumeAll+0x120>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4313      	orrs	r3, r2
 8005912:	4a2a      	ldr	r2, [pc, #168]	; (80059bc <xTaskResumeAll+0x120>)
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4a27      	ldr	r2, [pc, #156]	; (80059c0 <xTaskResumeAll+0x124>)
 8005924:	441a      	add	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3304      	adds	r3, #4
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f7ff f809 	bl	8004944 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005936:	4b23      	ldr	r3, [pc, #140]	; (80059c4 <xTaskResumeAll+0x128>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	429a      	cmp	r2, r3
 800593e:	d302      	bcc.n	8005946 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005940:	4b21      	ldr	r3, [pc, #132]	; (80059c8 <xTaskResumeAll+0x12c>)
 8005942:	2201      	movs	r2, #1
 8005944:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005946:	4b1c      	ldr	r3, [pc, #112]	; (80059b8 <xTaskResumeAll+0x11c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1cc      	bne.n	80058e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005954:	f000 fb4e 	bl	8005ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005958:	4b1c      	ldr	r3, [pc, #112]	; (80059cc <xTaskResumeAll+0x130>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d010      	beq.n	8005986 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005964:	f000 f846 	bl	80059f4 <xTaskIncrementTick>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800596e:	4b16      	ldr	r3, [pc, #88]	; (80059c8 <xTaskResumeAll+0x12c>)
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3b01      	subs	r3, #1
 8005978:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f1      	bne.n	8005964 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005980:	4b12      	ldr	r3, [pc, #72]	; (80059cc <xTaskResumeAll+0x130>)
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <xTaskResumeAll+0x12c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d009      	beq.n	80059a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800598e:	2301      	movs	r3, #1
 8005990:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005992:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <xTaskResumeAll+0x134>)
 8005994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059a2:	f001 f8df 	bl	8006b64 <vPortExitCritical>

	return xAlreadyYielded;
 80059a6:	68bb      	ldr	r3, [r7, #8]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	200009d0 	.word	0x200009d0
 80059b4:	200009a8 	.word	0x200009a8
 80059b8:	20000968 	.word	0x20000968
 80059bc:	200009b0 	.word	0x200009b0
 80059c0:	200008ac 	.word	0x200008ac
 80059c4:	200008a8 	.word	0x200008a8
 80059c8:	200009bc 	.word	0x200009bc
 80059cc:	200009b8 	.word	0x200009b8
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059da:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <xTaskGetTickCount+0x1c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059e0:	687b      	ldr	r3, [r7, #4]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	200009ac 	.word	0x200009ac

080059f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059fe:	4b4e      	ldr	r3, [pc, #312]	; (8005b38 <xTaskIncrementTick+0x144>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f040 808e 	bne.w	8005b24 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a08:	4b4c      	ldr	r3, [pc, #304]	; (8005b3c <xTaskIncrementTick+0x148>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a10:	4a4a      	ldr	r2, [pc, #296]	; (8005b3c <xTaskIncrementTick+0x148>)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d120      	bne.n	8005a5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a1c:	4b48      	ldr	r3, [pc, #288]	; (8005b40 <xTaskIncrementTick+0x14c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <xTaskIncrementTick+0x48>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	603b      	str	r3, [r7, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	e7fe      	b.n	8005a3a <xTaskIncrementTick+0x46>
 8005a3c:	4b40      	ldr	r3, [pc, #256]	; (8005b40 <xTaskIncrementTick+0x14c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	4b40      	ldr	r3, [pc, #256]	; (8005b44 <xTaskIncrementTick+0x150>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a3e      	ldr	r2, [pc, #248]	; (8005b40 <xTaskIncrementTick+0x14c>)
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	4a3e      	ldr	r2, [pc, #248]	; (8005b44 <xTaskIncrementTick+0x150>)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	4b3d      	ldr	r3, [pc, #244]	; (8005b48 <xTaskIncrementTick+0x154>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	4a3c      	ldr	r2, [pc, #240]	; (8005b48 <xTaskIncrementTick+0x154>)
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	f000 facb 	bl	8005ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a5e:	4b3b      	ldr	r3, [pc, #236]	; (8005b4c <xTaskIncrementTick+0x158>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d348      	bcc.n	8005afa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a68:	4b35      	ldr	r3, [pc, #212]	; (8005b40 <xTaskIncrementTick+0x14c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a72:	4b36      	ldr	r3, [pc, #216]	; (8005b4c <xTaskIncrementTick+0x158>)
 8005a74:	f04f 32ff 	mov.w	r2, #4294967295
 8005a78:	601a      	str	r2, [r3, #0]
					break;
 8005a7a:	e03e      	b.n	8005afa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a7c:	4b30      	ldr	r3, [pc, #192]	; (8005b40 <xTaskIncrementTick+0x14c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d203      	bcs.n	8005a9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a94:	4a2d      	ldr	r2, [pc, #180]	; (8005b4c <xTaskIncrementTick+0x158>)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a9a:	e02e      	b.n	8005afa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe ffac 	bl	80049fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d004      	beq.n	8005ab8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	3318      	adds	r3, #24
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe ffa3 	bl	80049fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	2201      	movs	r2, #1
 8005abe:	409a      	lsls	r2, r3
 8005ac0:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <xTaskIncrementTick+0x15c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	4a22      	ldr	r2, [pc, #136]	; (8005b50 <xTaskIncrementTick+0x15c>)
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <xTaskIncrementTick+0x160>)
 8005ad8:	441a      	add	r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f7fe ff2f 	bl	8004944 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aea:	4b1b      	ldr	r3, [pc, #108]	; (8005b58 <xTaskIncrementTick+0x164>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d3b9      	bcc.n	8005a68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005af8:	e7b6      	b.n	8005a68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005afa:	4b17      	ldr	r3, [pc, #92]	; (8005b58 <xTaskIncrementTick+0x164>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b00:	4914      	ldr	r1, [pc, #80]	; (8005b54 <xTaskIncrementTick+0x160>)
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d901      	bls.n	8005b16 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005b12:	2301      	movs	r3, #1
 8005b14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b16:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <xTaskIncrementTick+0x168>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	e004      	b.n	8005b2e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b24:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <xTaskIncrementTick+0x16c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	4a0d      	ldr	r2, [pc, #52]	; (8005b60 <xTaskIncrementTick+0x16c>)
 8005b2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b2e:	697b      	ldr	r3, [r7, #20]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	200009d0 	.word	0x200009d0
 8005b3c:	200009ac 	.word	0x200009ac
 8005b40:	20000960 	.word	0x20000960
 8005b44:	20000964 	.word	0x20000964
 8005b48:	200009c0 	.word	0x200009c0
 8005b4c:	200009c8 	.word	0x200009c8
 8005b50:	200009b0 	.word	0x200009b0
 8005b54:	200008ac 	.word	0x200008ac
 8005b58:	200008a8 	.word	0x200008a8
 8005b5c:	200009bc 	.word	0x200009bc
 8005b60:	200009b8 	.word	0x200009b8

08005b64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b6a:	4b27      	ldr	r3, [pc, #156]	; (8005c08 <vTaskSwitchContext+0xa4>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b72:	4b26      	ldr	r3, [pc, #152]	; (8005c0c <vTaskSwitchContext+0xa8>)
 8005b74:	2201      	movs	r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b78:	e03f      	b.n	8005bfa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005b7a:	4b24      	ldr	r3, [pc, #144]	; (8005c0c <vTaskSwitchContext+0xa8>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b80:	4b23      	ldr	r3, [pc, #140]	; (8005c10 <vTaskSwitchContext+0xac>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	fab3 f383 	clz	r3, r3
 8005b8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
 8005b90:	f1c3 031f 	rsb	r3, r3, #31
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	491f      	ldr	r1, [pc, #124]	; (8005c14 <vTaskSwitchContext+0xb0>)
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	607b      	str	r3, [r7, #4]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <vTaskSwitchContext+0x5a>
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4a12      	ldr	r2, [pc, #72]	; (8005c14 <vTaskSwitchContext+0xb0>)
 8005bcc:	4413      	add	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	605a      	str	r2, [r3, #4]
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	3308      	adds	r3, #8
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d104      	bne.n	8005bf0 <vTaskSwitchContext+0x8c>
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	4a08      	ldr	r2, [pc, #32]	; (8005c18 <vTaskSwitchContext+0xb4>)
 8005bf8:	6013      	str	r3, [r2, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	200009d0 	.word	0x200009d0
 8005c0c:	200009bc 	.word	0x200009bc
 8005c10:	200009b0 	.word	0x200009b0
 8005c14:	200008ac 	.word	0x200008ac
 8005c18:	200008a8 	.word	0x200008a8

08005c1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	60fb      	str	r3, [r7, #12]
}
 8005c3e:	bf00      	nop
 8005c40:	e7fe      	b.n	8005c40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c42:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <vTaskPlaceOnEventList+0x44>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3318      	adds	r3, #24
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fe fe9e 	bl	800498c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c50:	2101      	movs	r1, #1
 8005c52:	6838      	ldr	r0, [r7, #0]
 8005c54:	f000 fa92 	bl	800617c <prvAddCurrentTaskToDelayedList>
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	200008a8 	.word	0x200008a8

08005c64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	617b      	str	r3, [r7, #20]
}
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3318      	adds	r3, #24
 8005c92:	4619      	mov	r1, r3
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7fe fe55 	bl	8004944 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	68b8      	ldr	r0, [r7, #8]
 8005caa:	f000 fa67 	bl	800617c <prvAddCurrentTaskToDelayedList>
	}
 8005cae:	bf00      	nop
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	200008a8 	.word	0x200008a8

08005cbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	60fb      	str	r3, [r7, #12]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3318      	adds	r3, #24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fe fe86 	bl	80049fe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf2:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <xTaskRemoveFromEventList+0xac>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d11c      	bne.n	8005d34 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe fe7d 	bl	80049fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	2201      	movs	r2, #1
 8005d0a:	409a      	lsls	r2, r3
 8005d0c:	4b17      	ldr	r3, [pc, #92]	; (8005d6c <xTaskRemoveFromEventList+0xb0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	4a16      	ldr	r2, [pc, #88]	; (8005d6c <xTaskRemoveFromEventList+0xb0>)
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4a13      	ldr	r2, [pc, #76]	; (8005d70 <xTaskRemoveFromEventList+0xb4>)
 8005d24:	441a      	add	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	f7fe fe09 	bl	8004944 <vListInsertEnd>
 8005d32:	e005      	b.n	8005d40 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	3318      	adds	r3, #24
 8005d38:	4619      	mov	r1, r3
 8005d3a:	480e      	ldr	r0, [pc, #56]	; (8005d74 <xTaskRemoveFromEventList+0xb8>)
 8005d3c:	f7fe fe02 	bl	8004944 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <xTaskRemoveFromEventList+0xbc>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d905      	bls.n	8005d5a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d52:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <xTaskRemoveFromEventList+0xc0>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	e001      	b.n	8005d5e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d5e:	697b      	ldr	r3, [r7, #20]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	200009d0 	.word	0x200009d0
 8005d6c:	200009b0 	.word	0x200009b0
 8005d70:	200008ac 	.word	0x200008ac
 8005d74:	20000968 	.word	0x20000968
 8005d78:	200008a8 	.word	0x200008a8
 8005d7c:	200009bc 	.word	0x200009bc

08005d80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d88:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <vTaskInternalSetTimeOutState+0x24>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <vTaskInternalSetTimeOutState+0x28>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	605a      	str	r2, [r3, #4]
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	200009c0 	.word	0x200009c0
 8005da8:	200009ac 	.word	0x200009ac

08005dac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	613b      	str	r3, [r7, #16]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	60fb      	str	r3, [r7, #12]
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005dee:	f000 fe89 	bl	8006b04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005df2:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <xTaskCheckForTimeOut+0xbc>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0a:	d102      	bne.n	8005e12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	e023      	b.n	8005e5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <xTaskCheckForTimeOut+0xc0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d007      	beq.n	8005e2e <xTaskCheckForTimeOut+0x82>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d302      	bcc.n	8005e2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	61fb      	str	r3, [r7, #28]
 8005e2c:	e015      	b.n	8005e5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d20b      	bcs.n	8005e50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff ff9b 	bl	8005d80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	e004      	b.n	8005e5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e56:	2301      	movs	r3, #1
 8005e58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e5a:	f000 fe83 	bl	8006b64 <vPortExitCritical>

	return xReturn;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3720      	adds	r7, #32
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	200009ac 	.word	0x200009ac
 8005e6c:	200009c0 	.word	0x200009c0

08005e70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e74:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <vTaskMissedYield+0x14>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	200009bc 	.word	0x200009bc

08005e88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e90:	f000 f852 	bl	8005f38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e94:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <prvIdleTask+0x28>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d9f9      	bls.n	8005e90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <prvIdleTask+0x2c>)
 8005e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005eac:	e7f0      	b.n	8005e90 <prvIdleTask+0x8>
 8005eae:	bf00      	nop
 8005eb0:	200008ac 	.word	0x200008ac
 8005eb4:	e000ed04 	.word	0xe000ed04

08005eb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	607b      	str	r3, [r7, #4]
 8005ec2:	e00c      	b.n	8005ede <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <prvInitialiseTaskLists+0x60>)
 8005ed0:	4413      	add	r3, r2
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fe fd09 	bl	80048ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3301      	adds	r3, #1
 8005edc:	607b      	str	r3, [r7, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b06      	cmp	r3, #6
 8005ee2:	d9ef      	bls.n	8005ec4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ee4:	480d      	ldr	r0, [pc, #52]	; (8005f1c <prvInitialiseTaskLists+0x64>)
 8005ee6:	f7fe fd00 	bl	80048ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eea:	480d      	ldr	r0, [pc, #52]	; (8005f20 <prvInitialiseTaskLists+0x68>)
 8005eec:	f7fe fcfd 	bl	80048ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ef0:	480c      	ldr	r0, [pc, #48]	; (8005f24 <prvInitialiseTaskLists+0x6c>)
 8005ef2:	f7fe fcfa 	bl	80048ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ef6:	480c      	ldr	r0, [pc, #48]	; (8005f28 <prvInitialiseTaskLists+0x70>)
 8005ef8:	f7fe fcf7 	bl	80048ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005efc:	480b      	ldr	r0, [pc, #44]	; (8005f2c <prvInitialiseTaskLists+0x74>)
 8005efe:	f7fe fcf4 	bl	80048ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f02:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <prvInitialiseTaskLists+0x78>)
 8005f04:	4a05      	ldr	r2, [pc, #20]	; (8005f1c <prvInitialiseTaskLists+0x64>)
 8005f06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <prvInitialiseTaskLists+0x7c>)
 8005f0a:	4a05      	ldr	r2, [pc, #20]	; (8005f20 <prvInitialiseTaskLists+0x68>)
 8005f0c:	601a      	str	r2, [r3, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	200008ac 	.word	0x200008ac
 8005f1c:	20000938 	.word	0x20000938
 8005f20:	2000094c 	.word	0x2000094c
 8005f24:	20000968 	.word	0x20000968
 8005f28:	2000097c 	.word	0x2000097c
 8005f2c:	20000994 	.word	0x20000994
 8005f30:	20000960 	.word	0x20000960
 8005f34:	20000964 	.word	0x20000964

08005f38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f3e:	e019      	b.n	8005f74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f40:	f000 fde0 	bl	8006b04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f44:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <prvCheckTasksWaitingTermination+0x50>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fe fd54 	bl	80049fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f56:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <prvCheckTasksWaitingTermination+0x54>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	4a0b      	ldr	r2, [pc, #44]	; (8005f8c <prvCheckTasksWaitingTermination+0x54>)
 8005f5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <prvCheckTasksWaitingTermination+0x58>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	4a0a      	ldr	r2, [pc, #40]	; (8005f90 <prvCheckTasksWaitingTermination+0x58>)
 8005f68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f6a:	f000 fdfb 	bl	8006b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f810 	bl	8005f94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <prvCheckTasksWaitingTermination+0x58>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e1      	bne.n	8005f40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	2000097c 	.word	0x2000097c
 8005f8c:	200009a8 	.word	0x200009a8
 8005f90:	20000990 	.word	0x20000990

08005f94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d108      	bne.n	8005fb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 ff98 	bl	8006ee0 <vPortFree>
				vPortFree( pxTCB );
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 ff95 	bl	8006ee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fb6:	e018      	b.n	8005fea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d103      	bne.n	8005fca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 ff8c 	bl	8006ee0 <vPortFree>
	}
 8005fc8:	e00f      	b.n	8005fea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d00a      	beq.n	8005fea <prvDeleteTCB+0x56>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	60fb      	str	r3, [r7, #12]
}
 8005fe6:	bf00      	nop
 8005fe8:	e7fe      	b.n	8005fe8 <prvDeleteTCB+0x54>
	}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	; (800602c <prvResetNextTaskUnblockTime+0x38>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <prvResetNextTaskUnblockTime+0x3c>)
 8006006:	f04f 32ff 	mov.w	r2, #4294967295
 800600a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800600c:	e008      	b.n	8006020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800600e:	4b07      	ldr	r3, [pc, #28]	; (800602c <prvResetNextTaskUnblockTime+0x38>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4a04      	ldr	r2, [pc, #16]	; (8006030 <prvResetNextTaskUnblockTime+0x3c>)
 800601e:	6013      	str	r3, [r2, #0]
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000960 	.word	0x20000960
 8006030:	200009c8 	.word	0x200009c8

08006034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800603a:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <xTaskGetSchedulerState+0x34>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d102      	bne.n	8006048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006042:	2301      	movs	r3, #1
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	e008      	b.n	800605a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006048:	4b08      	ldr	r3, [pc, #32]	; (800606c <xTaskGetSchedulerState+0x38>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006050:	2302      	movs	r3, #2
 8006052:	607b      	str	r3, [r7, #4]
 8006054:	e001      	b.n	800605a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006056:	2300      	movs	r3, #0
 8006058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800605a:	687b      	ldr	r3, [r7, #4]
	}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	200009b4 	.word	0x200009b4
 800606c:	200009d0 	.word	0x200009d0

08006070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d06e      	beq.n	8006164 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006086:	4b3a      	ldr	r3, [pc, #232]	; (8006170 <xTaskPriorityDisinherit+0x100>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	429a      	cmp	r2, r3
 800608e:	d00a      	beq.n	80060a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	60bb      	str	r3, [r7, #8]
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c8:	1e5a      	subs	r2, r3, #1
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d044      	beq.n	8006164 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d140      	bne.n	8006164 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fe fc89 	bl	80049fe <uxListRemove>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d115      	bne.n	800611e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f6:	491f      	ldr	r1, [pc, #124]	; (8006174 <xTaskPriorityDisinherit+0x104>)
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	440b      	add	r3, r1
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xTaskPriorityDisinherit+0xae>
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	2201      	movs	r2, #1
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	43da      	mvns	r2, r3
 8006114:	4b18      	ldr	r3, [pc, #96]	; (8006178 <xTaskPriorityDisinherit+0x108>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4013      	ands	r3, r2
 800611a:	4a17      	ldr	r2, [pc, #92]	; (8006178 <xTaskPriorityDisinherit+0x108>)
 800611c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	f1c3 0207 	rsb	r2, r3, #7
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	2201      	movs	r2, #1
 8006138:	409a      	lsls	r2, r3
 800613a:	4b0f      	ldr	r3, [pc, #60]	; (8006178 <xTaskPriorityDisinherit+0x108>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4313      	orrs	r3, r2
 8006140:	4a0d      	ldr	r2, [pc, #52]	; (8006178 <xTaskPriorityDisinherit+0x108>)
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4a08      	ldr	r2, [pc, #32]	; (8006174 <xTaskPriorityDisinherit+0x104>)
 8006152:	441a      	add	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f7fe fbf2 	bl	8004944 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006160:	2301      	movs	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006164:	697b      	ldr	r3, [r7, #20]
	}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	200008a8 	.word	0x200008a8
 8006174:	200008ac 	.word	0x200008ac
 8006178:	200009b0 	.word	0x200009b0

0800617c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006186:	4b29      	ldr	r3, [pc, #164]	; (800622c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800618c:	4b28      	ldr	r3, [pc, #160]	; (8006230 <prvAddCurrentTaskToDelayedList+0xb4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3304      	adds	r3, #4
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fc33 	bl	80049fe <uxListRemove>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10b      	bne.n	80061b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800619e:	4b24      	ldr	r3, [pc, #144]	; (8006230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	2201      	movs	r2, #1
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	43da      	mvns	r2, r3
 80061ac:	4b21      	ldr	r3, [pc, #132]	; (8006234 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4013      	ands	r3, r2
 80061b2:	4a20      	ldr	r2, [pc, #128]	; (8006234 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d10a      	bne.n	80061d4 <prvAddCurrentTaskToDelayedList+0x58>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061c4:	4b1a      	ldr	r3, [pc, #104]	; (8006230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4619      	mov	r1, r3
 80061cc:	481a      	ldr	r0, [pc, #104]	; (8006238 <prvAddCurrentTaskToDelayedList+0xbc>)
 80061ce:	f7fe fbb9 	bl	8004944 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061d2:	e026      	b.n	8006222 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4413      	add	r3, r2
 80061da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061dc:	4b14      	ldr	r3, [pc, #80]	; (8006230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d209      	bcs.n	8006200 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ec:	4b13      	ldr	r3, [pc, #76]	; (800623c <prvAddCurrentTaskToDelayedList+0xc0>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	4b0f      	ldr	r3, [pc, #60]	; (8006230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3304      	adds	r3, #4
 80061f6:	4619      	mov	r1, r3
 80061f8:	4610      	mov	r0, r2
 80061fa:	f7fe fbc7 	bl	800498c <vListInsert>
}
 80061fe:	e010      	b.n	8006222 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006200:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3304      	adds	r3, #4
 800620a:	4619      	mov	r1, r3
 800620c:	4610      	mov	r0, r2
 800620e:	f7fe fbbd 	bl	800498c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006212:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	429a      	cmp	r2, r3
 800621a:	d202      	bcs.n	8006222 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800621c:	4a09      	ldr	r2, [pc, #36]	; (8006244 <prvAddCurrentTaskToDelayedList+0xc8>)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	6013      	str	r3, [r2, #0]
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	200009ac 	.word	0x200009ac
 8006230:	200008a8 	.word	0x200008a8
 8006234:	200009b0 	.word	0x200009b0
 8006238:	20000994 	.word	0x20000994
 800623c:	20000964 	.word	0x20000964
 8006240:	20000960 	.word	0x20000960
 8006244:	200009c8 	.word	0x200009c8

08006248 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	; 0x28
 800624c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006252:	f000 faeb 	bl	800682c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006256:	4b1c      	ldr	r3, [pc, #112]	; (80062c8 <xTimerCreateTimerTask+0x80>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d021      	beq.n	80062a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006266:	1d3a      	adds	r2, r7, #4
 8006268:	f107 0108 	add.w	r1, r7, #8
 800626c:	f107 030c 	add.w	r3, r7, #12
 8006270:	4618      	mov	r0, r3
 8006272:	f7fa fe37 	bl	8000ee4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	9202      	str	r2, [sp, #8]
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	2302      	movs	r3, #2
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	2300      	movs	r3, #0
 8006286:	460a      	mov	r2, r1
 8006288:	4910      	ldr	r1, [pc, #64]	; (80062cc <xTimerCreateTimerTask+0x84>)
 800628a:	4811      	ldr	r0, [pc, #68]	; (80062d0 <xTimerCreateTimerTask+0x88>)
 800628c:	f7ff f8ca 	bl	8005424 <xTaskCreateStatic>
 8006290:	4603      	mov	r3, r0
 8006292:	4a10      	ldr	r2, [pc, #64]	; (80062d4 <xTimerCreateTimerTask+0x8c>)
 8006294:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006296:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <xTimerCreateTimerTask+0x8c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800629e:	2301      	movs	r3, #1
 80062a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	613b      	str	r3, [r7, #16]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062be:	697b      	ldr	r3, [r7, #20]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20000a04 	.word	0x20000a04
 80062cc:	08009f14 	.word	0x08009f14
 80062d0:	0800640d 	.word	0x0800640d
 80062d4:	20000a08 	.word	0x20000a08

080062d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08a      	sub	sp, #40	; 0x28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <xTimerGenericCommand+0x2e>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	623b      	str	r3, [r7, #32]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006306:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <xTimerGenericCommand+0x98>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d02a      	beq.n	8006364 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b05      	cmp	r3, #5
 800631e:	dc18      	bgt.n	8006352 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006320:	f7ff fe88 	bl	8006034 <xTaskGetSchedulerState>
 8006324:	4603      	mov	r3, r0
 8006326:	2b02      	cmp	r3, #2
 8006328:	d109      	bne.n	800633e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800632a:	4b11      	ldr	r3, [pc, #68]	; (8006370 <xTimerGenericCommand+0x98>)
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	f107 0114 	add.w	r1, r7, #20
 8006332:	2300      	movs	r3, #0
 8006334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006336:	f7fe fc8d 	bl	8004c54 <xQueueGenericSend>
 800633a:	6278      	str	r0, [r7, #36]	; 0x24
 800633c:	e012      	b.n	8006364 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800633e:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <xTimerGenericCommand+0x98>)
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	f107 0114 	add.w	r1, r7, #20
 8006346:	2300      	movs	r3, #0
 8006348:	2200      	movs	r2, #0
 800634a:	f7fe fc83 	bl	8004c54 <xQueueGenericSend>
 800634e:	6278      	str	r0, [r7, #36]	; 0x24
 8006350:	e008      	b.n	8006364 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <xTimerGenericCommand+0x98>)
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	f107 0114 	add.w	r1, r7, #20
 800635a:	2300      	movs	r3, #0
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	f7fe fd77 	bl	8004e50 <xQueueGenericSendFromISR>
 8006362:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006366:	4618      	mov	r0, r3
 8006368:	3728      	adds	r7, #40	; 0x28
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000a04 	.word	0x20000a04

08006374 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af02      	add	r7, sp, #8
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637e:	4b22      	ldr	r3, [pc, #136]	; (8006408 <prvProcessExpiredTimer+0x94>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3304      	adds	r3, #4
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe fb36 	bl	80049fe <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d022      	beq.n	80063e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	18d1      	adds	r1, r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	6978      	ldr	r0, [r7, #20]
 80063ae:	f000 f8d1 	bl	8006554 <prvInsertTimerInActiveList>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01f      	beq.n	80063f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063b8:	2300      	movs	r3, #0
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	2300      	movs	r3, #0
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	2100      	movs	r1, #0
 80063c2:	6978      	ldr	r0, [r7, #20]
 80063c4:	f7ff ff88 	bl	80062d8 <xTimerGenericCommand>
 80063c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d113      	bne.n	80063f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	6978      	ldr	r0, [r7, #20]
 80063fe:	4798      	blx	r3
}
 8006400:	bf00      	nop
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	200009fc 	.word	0x200009fc

0800640c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006414:	f107 0308 	add.w	r3, r7, #8
 8006418:	4618      	mov	r0, r3
 800641a:	f000 f857 	bl	80064cc <prvGetNextExpireTime>
 800641e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4619      	mov	r1, r3
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f803 	bl	8006430 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800642a:	f000 f8d5 	bl	80065d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800642e:	e7f1      	b.n	8006414 <prvTimerTask+0x8>

08006430 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800643a:	f7ff fa21 	bl	8005880 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800643e:	f107 0308 	add.w	r3, r7, #8
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f866 	bl	8006514 <prvSampleTimeNow>
 8006448:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d130      	bne.n	80064b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <prvProcessTimerOrBlockTask+0x3c>
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	429a      	cmp	r2, r3
 800645c:	d806      	bhi.n	800646c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800645e:	f7ff fa1d 	bl	800589c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006462:	68f9      	ldr	r1, [r7, #12]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff ff85 	bl	8006374 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800646a:	e024      	b.n	80064b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d008      	beq.n	8006484 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006472:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <prvProcessTimerOrBlockTask+0x90>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <prvProcessTimerOrBlockTask+0x50>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <prvProcessTimerOrBlockTask+0x52>
 8006480:	2300      	movs	r3, #0
 8006482:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006484:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <prvProcessTimerOrBlockTask+0x94>)
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	4619      	mov	r1, r3
 8006492:	f7fe ff93 	bl	80053bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006496:	f7ff fa01 	bl	800589c <xTaskResumeAll>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064a0:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <prvProcessTimerOrBlockTask+0x98>)
 80064a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	f3bf 8f6f 	isb	sy
}
 80064b0:	e001      	b.n	80064b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064b2:	f7ff f9f3 	bl	800589c <xTaskResumeAll>
}
 80064b6:	bf00      	nop
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000a00 	.word	0x20000a00
 80064c4:	20000a04 	.word	0x20000a04
 80064c8:	e000ed04 	.word	0xe000ed04

080064cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064d4:	4b0e      	ldr	r3, [pc, #56]	; (8006510 <prvGetNextExpireTime+0x44>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <prvGetNextExpireTime+0x16>
 80064de:	2201      	movs	r2, #1
 80064e0:	e000      	b.n	80064e4 <prvGetNextExpireTime+0x18>
 80064e2:	2200      	movs	r2, #0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d105      	bne.n	80064fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <prvGetNextExpireTime+0x44>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e001      	b.n	8006500 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006500:	68fb      	ldr	r3, [r7, #12]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	200009fc 	.word	0x200009fc

08006514 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800651c:	f7ff fa5a 	bl	80059d4 <xTaskGetTickCount>
 8006520:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <prvSampleTimeNow+0x3c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	429a      	cmp	r2, r3
 800652a:	d205      	bcs.n	8006538 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800652c:	f000 f91a 	bl	8006764 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	e002      	b.n	800653e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800653e:	4a04      	ldr	r2, [pc, #16]	; (8006550 <prvSampleTimeNow+0x3c>)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006544:	68fb      	ldr	r3, [r7, #12]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000a0c 	.word	0x20000a0c

08006554 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d812      	bhi.n	80065a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	1ad2      	subs	r2, r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	429a      	cmp	r2, r3
 8006586:	d302      	bcc.n	800658e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006588:	2301      	movs	r3, #1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e01b      	b.n	80065c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800658e:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <prvInsertTimerInActiveList+0x7c>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3304      	adds	r3, #4
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f7fe f9f7 	bl	800498c <vListInsert>
 800659e:	e012      	b.n	80065c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d206      	bcs.n	80065b6 <prvInsertTimerInActiveList+0x62>
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e007      	b.n	80065c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065b6:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <prvInsertTimerInActiveList+0x80>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3304      	adds	r3, #4
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f7fe f9e3 	bl	800498c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065c6:	697b      	ldr	r3, [r7, #20]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20000a00 	.word	0x20000a00
 80065d4:	200009fc 	.word	0x200009fc

080065d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	; 0x30
 80065dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065de:	e0ae      	b.n	800673e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f2c0 80aa 	blt.w	800673c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	3304      	adds	r3, #4
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe fa00 	bl	80049fe <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065fe:	1d3b      	adds	r3, r7, #4
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff ff87 	bl	8006514 <prvSampleTimeNow>
 8006606:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b09      	cmp	r3, #9
 800660c:	f200 8097 	bhi.w	800673e <prvProcessReceivedCommands+0x166>
 8006610:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <prvProcessReceivedCommands+0x40>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	08006641 	.word	0x08006641
 800661c:	08006641 	.word	0x08006641
 8006620:	08006641 	.word	0x08006641
 8006624:	080066b5 	.word	0x080066b5
 8006628:	080066c9 	.word	0x080066c9
 800662c:	08006713 	.word	0x08006713
 8006630:	08006641 	.word	0x08006641
 8006634:	08006641 	.word	0x08006641
 8006638:	080066b5 	.word	0x080066b5
 800663c:	080066c9 	.word	0x080066c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006646:	f043 0301 	orr.w	r3, r3, #1
 800664a:	b2da      	uxtb	r2, r3
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	18d1      	adds	r1, r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a3a      	ldr	r2, [r7, #32]
 800665e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006660:	f7ff ff78 	bl	8006554 <prvInsertTimerInActiveList>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d069      	beq.n	800673e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006670:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d05e      	beq.n	800673e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	441a      	add	r2, r3
 8006688:	2300      	movs	r3, #0
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	2300      	movs	r3, #0
 800668e:	2100      	movs	r1, #0
 8006690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006692:	f7ff fe21 	bl	80062d8 <xTimerGenericCommand>
 8006696:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d14f      	bne.n	800673e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	61bb      	str	r3, [r7, #24]
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80066c6:	e03a      	b.n	800673e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <prvProcessReceivedCommands+0x126>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	617b      	str	r3, [r7, #20]
}
 80066fa:	bf00      	nop
 80066fc:	e7fe      	b.n	80066fc <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	18d1      	adds	r1, r2, r3
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	6a3a      	ldr	r2, [r7, #32]
 800670a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800670c:	f7ff ff22 	bl	8006554 <prvInsertTimerInActiveList>
					break;
 8006710:	e015      	b.n	800673e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d103      	bne.n	8006728 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8006720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006722:	f000 fbdd 	bl	8006ee0 <vPortFree>
 8006726:	e00a      	b.n	800673e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	b2da      	uxtb	r2, r3
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800673a:	e000      	b.n	800673e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800673c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800673e:	4b08      	ldr	r3, [pc, #32]	; (8006760 <prvProcessReceivedCommands+0x188>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f107 0108 	add.w	r1, r7, #8
 8006746:	2200      	movs	r2, #0
 8006748:	4618      	mov	r0, r3
 800674a:	f7fe fc1d 	bl	8004f88 <xQueueReceive>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	f47f af45 	bne.w	80065e0 <prvProcessReceivedCommands+0x8>
	}
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	3728      	adds	r7, #40	; 0x28
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20000a04 	.word	0x20000a04

08006764 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800676a:	e048      	b.n	80067fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800676c:	4b2d      	ldr	r3, [pc, #180]	; (8006824 <prvSwitchTimerLists+0xc0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006776:	4b2b      	ldr	r3, [pc, #172]	; (8006824 <prvSwitchTimerLists+0xc0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3304      	adds	r3, #4
 8006784:	4618      	mov	r0, r3
 8006786:	f7fe f93a 	bl	80049fe <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d02e      	beq.n	80067fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4413      	add	r3, r2
 80067a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d90e      	bls.n	80067d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067be:	4b19      	ldr	r3, [pc, #100]	; (8006824 <prvSwitchTimerLists+0xc0>)
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f7fe f8df 	bl	800498c <vListInsert>
 80067ce:	e016      	b.n	80067fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067d0:	2300      	movs	r3, #0
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	2300      	movs	r3, #0
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	2100      	movs	r1, #0
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff fd7c 	bl	80062d8 <xTimerGenericCommand>
 80067e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	603b      	str	r3, [r7, #0]
}
 80067fa:	bf00      	nop
 80067fc:	e7fe      	b.n	80067fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067fe:	4b09      	ldr	r3, [pc, #36]	; (8006824 <prvSwitchTimerLists+0xc0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1b1      	bne.n	800676c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006808:	4b06      	ldr	r3, [pc, #24]	; (8006824 <prvSwitchTimerLists+0xc0>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800680e:	4b06      	ldr	r3, [pc, #24]	; (8006828 <prvSwitchTimerLists+0xc4>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a04      	ldr	r2, [pc, #16]	; (8006824 <prvSwitchTimerLists+0xc0>)
 8006814:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006816:	4a04      	ldr	r2, [pc, #16]	; (8006828 <prvSwitchTimerLists+0xc4>)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	6013      	str	r3, [r2, #0]
}
 800681c:	bf00      	nop
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	200009fc 	.word	0x200009fc
 8006828:	20000a00 	.word	0x20000a00

0800682c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006832:	f000 f967 	bl	8006b04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006836:	4b15      	ldr	r3, [pc, #84]	; (800688c <prvCheckForValidListAndQueue+0x60>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d120      	bne.n	8006880 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800683e:	4814      	ldr	r0, [pc, #80]	; (8006890 <prvCheckForValidListAndQueue+0x64>)
 8006840:	f7fe f853 	bl	80048ea <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006844:	4813      	ldr	r0, [pc, #76]	; (8006894 <prvCheckForValidListAndQueue+0x68>)
 8006846:	f7fe f850 	bl	80048ea <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800684a:	4b13      	ldr	r3, [pc, #76]	; (8006898 <prvCheckForValidListAndQueue+0x6c>)
 800684c:	4a10      	ldr	r2, [pc, #64]	; (8006890 <prvCheckForValidListAndQueue+0x64>)
 800684e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006850:	4b12      	ldr	r3, [pc, #72]	; (800689c <prvCheckForValidListAndQueue+0x70>)
 8006852:	4a10      	ldr	r2, [pc, #64]	; (8006894 <prvCheckForValidListAndQueue+0x68>)
 8006854:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006856:	2300      	movs	r3, #0
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <prvCheckForValidListAndQueue+0x74>)
 800685c:	4a11      	ldr	r2, [pc, #68]	; (80068a4 <prvCheckForValidListAndQueue+0x78>)
 800685e:	210c      	movs	r1, #12
 8006860:	200a      	movs	r0, #10
 8006862:	f7fe f95f 	bl	8004b24 <xQueueGenericCreateStatic>
 8006866:	4603      	mov	r3, r0
 8006868:	4a08      	ldr	r2, [pc, #32]	; (800688c <prvCheckForValidListAndQueue+0x60>)
 800686a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800686c:	4b07      	ldr	r3, [pc, #28]	; (800688c <prvCheckForValidListAndQueue+0x60>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006874:	4b05      	ldr	r3, [pc, #20]	; (800688c <prvCheckForValidListAndQueue+0x60>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	490b      	ldr	r1, [pc, #44]	; (80068a8 <prvCheckForValidListAndQueue+0x7c>)
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fd74 	bl	8005368 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006880:	f000 f970 	bl	8006b64 <vPortExitCritical>
}
 8006884:	bf00      	nop
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000a04 	.word	0x20000a04
 8006890:	200009d4 	.word	0x200009d4
 8006894:	200009e8 	.word	0x200009e8
 8006898:	200009fc 	.word	0x200009fc
 800689c:	20000a00 	.word	0x20000a00
 80068a0:	20000a88 	.word	0x20000a88
 80068a4:	20000a10 	.word	0x20000a10
 80068a8:	08009f1c 	.word	0x08009f1c

080068ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3b04      	subs	r3, #4
 80068bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3b04      	subs	r3, #4
 80068ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f023 0201 	bic.w	r2, r3, #1
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3b04      	subs	r3, #4
 80068da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068dc:	4a0c      	ldr	r2, [pc, #48]	; (8006910 <pxPortInitialiseStack+0x64>)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3b14      	subs	r3, #20
 80068e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f06f 0202 	mvn.w	r2, #2
 80068fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3b20      	subs	r3, #32
 8006900:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006902:	68fb      	ldr	r3, [r7, #12]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	08006915 	.word	0x08006915

08006914 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <prvTaskExitError+0x54>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006926:	d00a      	beq.n	800693e <prvTaskExitError+0x2a>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	60fb      	str	r3, [r7, #12]
}
 800693a:	bf00      	nop
 800693c:	e7fe      	b.n	800693c <prvTaskExitError+0x28>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	60bb      	str	r3, [r7, #8]
}
 8006950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006952:	bf00      	nop
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0fc      	beq.n	8006954 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800695a:	bf00      	nop
 800695c:	bf00      	nop
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	2000000c 	.word	0x2000000c
 800696c:	00000000 	.word	0x00000000

08006970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <pxCurrentTCBConst2>)
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	6808      	ldr	r0, [r1, #0]
 8006976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	f380 8809 	msr	PSP, r0
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f04f 0000 	mov.w	r0, #0
 8006986:	f380 8811 	msr	BASEPRI, r0
 800698a:	4770      	bx	lr
 800698c:	f3af 8000 	nop.w

08006990 <pxCurrentTCBConst2>:
 8006990:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006998:	4808      	ldr	r0, [pc, #32]	; (80069bc <prvPortStartFirstTask+0x24>)
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f380 8808 	msr	MSP, r0
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f380 8814 	msr	CONTROL, r0
 80069aa:	b662      	cpsie	i
 80069ac:	b661      	cpsie	f
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	df00      	svc	0
 80069b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069ba:	bf00      	nop
 80069bc:	e000ed08 	.word	0xe000ed08

080069c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069c6:	4b46      	ldr	r3, [pc, #280]	; (8006ae0 <xPortStartScheduler+0x120>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a46      	ldr	r2, [pc, #280]	; (8006ae4 <xPortStartScheduler+0x124>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d10a      	bne.n	80069e6 <xPortStartScheduler+0x26>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	613b      	str	r3, [r7, #16]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069e6:	4b3e      	ldr	r3, [pc, #248]	; (8006ae0 <xPortStartScheduler+0x120>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a3f      	ldr	r2, [pc, #252]	; (8006ae8 <xPortStartScheduler+0x128>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d10a      	bne.n	8006a06 <xPortStartScheduler+0x46>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	60fb      	str	r3, [r7, #12]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a06:	4b39      	ldr	r3, [pc, #228]	; (8006aec <xPortStartScheduler+0x12c>)
 8006a08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	22ff      	movs	r2, #255	; 0xff
 8006a16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	4b31      	ldr	r3, [pc, #196]	; (8006af0 <xPortStartScheduler+0x130>)
 8006a2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a2e:	4b31      	ldr	r3, [pc, #196]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a30:	2207      	movs	r2, #7
 8006a32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a34:	e009      	b.n	8006a4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006a36:	4b2f      	ldr	r3, [pc, #188]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	4a2d      	ldr	r2, [pc, #180]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a52:	2b80      	cmp	r3, #128	; 0x80
 8006a54:	d0ef      	beq.n	8006a36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a56:	4b27      	ldr	r3, [pc, #156]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f1c3 0307 	rsb	r3, r3, #7
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d00a      	beq.n	8006a78 <xPortStartScheduler+0xb8>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	60bb      	str	r3, [r7, #8]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a78:	4b1e      	ldr	r3, [pc, #120]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	021b      	lsls	r3, r3, #8
 8006a7e:	4a1d      	ldr	r2, [pc, #116]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a82:	4b1c      	ldr	r3, [pc, #112]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a96:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <xPortStartScheduler+0x138>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a17      	ldr	r2, [pc, #92]	; (8006af8 <xPortStartScheduler+0x138>)
 8006a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006aa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006aa2:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <xPortStartScheduler+0x138>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <xPortStartScheduler+0x138>)
 8006aa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006aac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006aae:	f000 f8dd 	bl	8006c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ab2:	4b12      	ldr	r3, [pc, #72]	; (8006afc <xPortStartScheduler+0x13c>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ab8:	f000 f8fc 	bl	8006cb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006abc:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <xPortStartScheduler+0x140>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a0f      	ldr	r2, [pc, #60]	; (8006b00 <xPortStartScheduler+0x140>)
 8006ac2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ac6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ac8:	f7ff ff66 	bl	8006998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006acc:	f7ff f84a 	bl	8005b64 <vTaskSwitchContext>
	prvTaskExitError();
 8006ad0:	f7ff ff20 	bl	8006914 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	e000ed00 	.word	0xe000ed00
 8006ae4:	410fc271 	.word	0x410fc271
 8006ae8:	410fc270 	.word	0x410fc270
 8006aec:	e000e400 	.word	0xe000e400
 8006af0:	20000ad0 	.word	0x20000ad0
 8006af4:	20000ad4 	.word	0x20000ad4
 8006af8:	e000ed20 	.word	0xe000ed20
 8006afc:	2000000c 	.word	0x2000000c
 8006b00:	e000ef34 	.word	0xe000ef34

08006b04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	607b      	str	r3, [r7, #4]
}
 8006b1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b1e:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <vPortEnterCritical+0x58>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3301      	adds	r3, #1
 8006b24:	4a0d      	ldr	r2, [pc, #52]	; (8006b5c <vPortEnterCritical+0x58>)
 8006b26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <vPortEnterCritical+0x58>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d10f      	bne.n	8006b50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <vPortEnterCritical+0x5c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	603b      	str	r3, [r7, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <vPortEnterCritical+0x4a>
	}
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	2000000c 	.word	0x2000000c
 8006b60:	e000ed04 	.word	0xe000ed04

08006b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b6a:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <vPortExitCritical+0x50>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <vPortExitCritical+0x24>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	607b      	str	r3, [r7, #4]
}
 8006b84:	bf00      	nop
 8006b86:	e7fe      	b.n	8006b86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <vPortExitCritical+0x50>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <vPortExitCritical+0x50>)
 8006b90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b92:	4b08      	ldr	r3, [pc, #32]	; (8006bb4 <vPortExitCritical+0x50>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d105      	bne.n	8006ba6 <vPortExitCritical+0x42>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	f383 8811 	msr	BASEPRI, r3
}
 8006ba4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	2000000c 	.word	0x2000000c
	...

08006bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bc0:	f3ef 8009 	mrs	r0, PSP
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <pxCurrentTCBConst>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f01e 0f10 	tst.w	lr, #16
 8006bd0:	bf08      	it	eq
 8006bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	6010      	str	r0, [r2, #0]
 8006bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006be4:	f380 8811 	msr	BASEPRI, r0
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f7fe ffb8 	bl	8005b64 <vTaskSwitchContext>
 8006bf4:	f04f 0000 	mov.w	r0, #0
 8006bf8:	f380 8811 	msr	BASEPRI, r0
 8006bfc:	bc09      	pop	{r0, r3}
 8006bfe:	6819      	ldr	r1, [r3, #0]
 8006c00:	6808      	ldr	r0, [r1, #0]
 8006c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c06:	f01e 0f10 	tst.w	lr, #16
 8006c0a:	bf08      	it	eq
 8006c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c10:	f380 8809 	msr	PSP, r0
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	f3af 8000 	nop.w

08006c20 <pxCurrentTCBConst>:
 8006c20:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop

08006c28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
}
 8006c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c42:	f7fe fed7 	bl	80059f4 <xTaskIncrementTick>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c4c:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <xPortSysTickHandler+0x40>)
 8006c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	2300      	movs	r3, #0
 8006c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f383 8811 	msr	BASEPRI, r3
}
 8006c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c70:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <vPortSetupTimerInterrupt+0x34>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c76:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <vPortSetupTimerInterrupt+0x38>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <vPortSetupTimerInterrupt+0x3c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <vPortSetupTimerInterrupt+0x40>)
 8006c82:	fba2 2303 	umull	r2, r3, r2, r3
 8006c86:	099b      	lsrs	r3, r3, #6
 8006c88:	4a09      	ldr	r2, [pc, #36]	; (8006cb0 <vPortSetupTimerInterrupt+0x44>)
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c8e:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <vPortSetupTimerInterrupt+0x34>)
 8006c90:	2207      	movs	r2, #7
 8006c92:	601a      	str	r2, [r3, #0]
}
 8006c94:	bf00      	nop
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	e000e010 	.word	0xe000e010
 8006ca4:	e000e018 	.word	0xe000e018
 8006ca8:	20000000 	.word	0x20000000
 8006cac:	10624dd3 	.word	0x10624dd3
 8006cb0:	e000e014 	.word	0xe000e014

08006cb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006cb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006cc4 <vPortEnableVFP+0x10>
 8006cb8:	6801      	ldr	r1, [r0, #0]
 8006cba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006cbe:	6001      	str	r1, [r0, #0]
 8006cc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cc2:	bf00      	nop
 8006cc4:	e000ed88 	.word	0xe000ed88

08006cc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cce:	f3ef 8305 	mrs	r3, IPSR
 8006cd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b0f      	cmp	r3, #15
 8006cd8:	d914      	bls.n	8006d04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cda:	4a17      	ldr	r2, [pc, #92]	; (8006d38 <vPortValidateInterruptPriority+0x70>)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ce4:	4b15      	ldr	r3, [pc, #84]	; (8006d3c <vPortValidateInterruptPriority+0x74>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	7afa      	ldrb	r2, [r7, #11]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d20a      	bcs.n	8006d04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	607b      	str	r3, [r7, #4]
}
 8006d00:	bf00      	nop
 8006d02:	e7fe      	b.n	8006d02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d04:	4b0e      	ldr	r3, [pc, #56]	; (8006d40 <vPortValidateInterruptPriority+0x78>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d0c:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <vPortValidateInterruptPriority+0x7c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d90a      	bls.n	8006d2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	603b      	str	r3, [r7, #0]
}
 8006d26:	bf00      	nop
 8006d28:	e7fe      	b.n	8006d28 <vPortValidateInterruptPriority+0x60>
	}
 8006d2a:	bf00      	nop
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	e000e3f0 	.word	0xe000e3f0
 8006d3c:	20000ad0 	.word	0x20000ad0
 8006d40:	e000ed0c 	.word	0xe000ed0c
 8006d44:	20000ad4 	.word	0x20000ad4

08006d48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08a      	sub	sp, #40	; 0x28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d54:	f7fe fd94 	bl	8005880 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d58:	4b5b      	ldr	r3, [pc, #364]	; (8006ec8 <pvPortMalloc+0x180>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d60:	f000 f920 	bl	8006fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d64:	4b59      	ldr	r3, [pc, #356]	; (8006ecc <pvPortMalloc+0x184>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f040 8093 	bne.w	8006e98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01d      	beq.n	8006db4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d78:	2208      	movs	r2, #8
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d014      	beq.n	8006db4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f023 0307 	bic.w	r3, r3, #7
 8006d90:	3308      	adds	r3, #8
 8006d92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <pvPortMalloc+0x6c>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	617b      	str	r3, [r7, #20]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d06e      	beq.n	8006e98 <pvPortMalloc+0x150>
 8006dba:	4b45      	ldr	r3, [pc, #276]	; (8006ed0 <pvPortMalloc+0x188>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d869      	bhi.n	8006e98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dc4:	4b43      	ldr	r3, [pc, #268]	; (8006ed4 <pvPortMalloc+0x18c>)
 8006dc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dc8:	4b42      	ldr	r3, [pc, #264]	; (8006ed4 <pvPortMalloc+0x18c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dce:	e004      	b.n	8006dda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d903      	bls.n	8006dec <pvPortMalloc+0xa4>
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1f1      	bne.n	8006dd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dec:	4b36      	ldr	r3, [pc, #216]	; (8006ec8 <pvPortMalloc+0x180>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d050      	beq.n	8006e98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2208      	movs	r2, #8
 8006dfc:	4413      	add	r3, r2
 8006dfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	2308      	movs	r3, #8
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d91f      	bls.n	8006e58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <pvPortMalloc+0xf8>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	613b      	str	r3, [r7, #16]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	1ad2      	subs	r2, r2, r3
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e52:	69b8      	ldr	r0, [r7, #24]
 8006e54:	f000 f908 	bl	8007068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e58:	4b1d      	ldr	r3, [pc, #116]	; (8006ed0 <pvPortMalloc+0x188>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	4a1b      	ldr	r2, [pc, #108]	; (8006ed0 <pvPortMalloc+0x188>)
 8006e64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e66:	4b1a      	ldr	r3, [pc, #104]	; (8006ed0 <pvPortMalloc+0x188>)
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ed8 <pvPortMalloc+0x190>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d203      	bcs.n	8006e7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e72:	4b17      	ldr	r3, [pc, #92]	; (8006ed0 <pvPortMalloc+0x188>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a18      	ldr	r2, [pc, #96]	; (8006ed8 <pvPortMalloc+0x190>)
 8006e78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	4b13      	ldr	r3, [pc, #76]	; (8006ecc <pvPortMalloc+0x184>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	431a      	orrs	r2, r3
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e8e:	4b13      	ldr	r3, [pc, #76]	; (8006edc <pvPortMalloc+0x194>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3301      	adds	r3, #1
 8006e94:	4a11      	ldr	r2, [pc, #68]	; (8006edc <pvPortMalloc+0x194>)
 8006e96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e98:	f7fe fd00 	bl	800589c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <pvPortMalloc+0x174>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	60fb      	str	r3, [r7, #12]
}
 8006eb8:	bf00      	nop
 8006eba:	e7fe      	b.n	8006eba <pvPortMalloc+0x172>
	return pvReturn;
 8006ebc:	69fb      	ldr	r3, [r7, #28]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3728      	adds	r7, #40	; 0x28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	200046e0 	.word	0x200046e0
 8006ecc:	200046f4 	.word	0x200046f4
 8006ed0:	200046e4 	.word	0x200046e4
 8006ed4:	200046d8 	.word	0x200046d8
 8006ed8:	200046e8 	.word	0x200046e8
 8006edc:	200046ec 	.word	0x200046ec

08006ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d04d      	beq.n	8006f8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	425b      	negs	r3, r3
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4413      	add	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <vPortFree+0xb8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <vPortFree+0x44>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	60fb      	str	r3, [r7, #12]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <vPortFree+0x62>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	60bb      	str	r3, [r7, #8]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <vPortFree+0xb8>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d01e      	beq.n	8006f8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d11a      	bne.n	8006f8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <vPortFree+0xb8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	43db      	mvns	r3, r3
 8006f62:	401a      	ands	r2, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f68:	f7fe fc8a 	bl	8005880 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <vPortFree+0xbc>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4413      	add	r3, r2
 8006f76:	4a09      	ldr	r2, [pc, #36]	; (8006f9c <vPortFree+0xbc>)
 8006f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f7a:	6938      	ldr	r0, [r7, #16]
 8006f7c:	f000 f874 	bl	8007068 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <vPortFree+0xc0>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3301      	adds	r3, #1
 8006f86:	4a06      	ldr	r2, [pc, #24]	; (8006fa0 <vPortFree+0xc0>)
 8006f88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f8a:	f7fe fc87 	bl	800589c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f8e:	bf00      	nop
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	200046f4 	.word	0x200046f4
 8006f9c:	200046e4 	.word	0x200046e4
 8006fa0:	200046f0 	.word	0x200046f0

08006fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006faa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fb0:	4b27      	ldr	r3, [pc, #156]	; (8007050 <prvHeapInit+0xac>)
 8006fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00c      	beq.n	8006fd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3307      	adds	r3, #7
 8006fc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0307 	bic.w	r3, r3, #7
 8006fca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	4a1f      	ldr	r2, [pc, #124]	; (8007050 <prvHeapInit+0xac>)
 8006fd4:	4413      	add	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fdc:	4a1d      	ldr	r2, [pc, #116]	; (8007054 <prvHeapInit+0xb0>)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fe2:	4b1c      	ldr	r3, [pc, #112]	; (8007054 <prvHeapInit+0xb0>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	4413      	add	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	1a9b      	subs	r3, r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0307 	bic.w	r3, r3, #7
 8006ffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4a15      	ldr	r2, [pc, #84]	; (8007058 <prvHeapInit+0xb4>)
 8007004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <prvHeapInit+0xb4>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2200      	movs	r2, #0
 800700c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800700e:	4b12      	ldr	r3, [pc, #72]	; (8007058 <prvHeapInit+0xb4>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	1ad2      	subs	r2, r2, r3
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007024:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <prvHeapInit+0xb4>)
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	4a0a      	ldr	r2, [pc, #40]	; (800705c <prvHeapInit+0xb8>)
 8007032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	4a09      	ldr	r2, [pc, #36]	; (8007060 <prvHeapInit+0xbc>)
 800703a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800703c:	4b09      	ldr	r3, [pc, #36]	; (8007064 <prvHeapInit+0xc0>)
 800703e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007042:	601a      	str	r2, [r3, #0]
}
 8007044:	bf00      	nop
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	20000ad8 	.word	0x20000ad8
 8007054:	200046d8 	.word	0x200046d8
 8007058:	200046e0 	.word	0x200046e0
 800705c:	200046e8 	.word	0x200046e8
 8007060:	200046e4 	.word	0x200046e4
 8007064:	200046f4 	.word	0x200046f4

08007068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007070:	4b28      	ldr	r3, [pc, #160]	; (8007114 <prvInsertBlockIntoFreeList+0xac>)
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	e002      	b.n	800707c <prvInsertBlockIntoFreeList+0x14>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	429a      	cmp	r2, r3
 8007084:	d8f7      	bhi.n	8007076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	4413      	add	r3, r2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	429a      	cmp	r2, r3
 8007096:	d108      	bne.n	80070aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	441a      	add	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	441a      	add	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d118      	bne.n	80070f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4b15      	ldr	r3, [pc, #84]	; (8007118 <prvInsertBlockIntoFreeList+0xb0>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d00d      	beq.n	80070e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	441a      	add	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	e008      	b.n	80070f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070e6:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <prvInsertBlockIntoFreeList+0xb0>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	e003      	b.n	80070f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d002      	beq.n	8007106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007106:	bf00      	nop
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	200046d8 	.word	0x200046d8
 8007118:	200046e0 	.word	0x200046e0

0800711c <__errno>:
 800711c:	4b01      	ldr	r3, [pc, #4]	; (8007124 <__errno+0x8>)
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	20000010 	.word	0x20000010

08007128 <__libc_init_array>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	4d0d      	ldr	r5, [pc, #52]	; (8007160 <__libc_init_array+0x38>)
 800712c:	4c0d      	ldr	r4, [pc, #52]	; (8007164 <__libc_init_array+0x3c>)
 800712e:	1b64      	subs	r4, r4, r5
 8007130:	10a4      	asrs	r4, r4, #2
 8007132:	2600      	movs	r6, #0
 8007134:	42a6      	cmp	r6, r4
 8007136:	d109      	bne.n	800714c <__libc_init_array+0x24>
 8007138:	4d0b      	ldr	r5, [pc, #44]	; (8007168 <__libc_init_array+0x40>)
 800713a:	4c0c      	ldr	r4, [pc, #48]	; (800716c <__libc_init_array+0x44>)
 800713c:	f002 feb4 	bl	8009ea8 <_init>
 8007140:	1b64      	subs	r4, r4, r5
 8007142:	10a4      	asrs	r4, r4, #2
 8007144:	2600      	movs	r6, #0
 8007146:	42a6      	cmp	r6, r4
 8007148:	d105      	bne.n	8007156 <__libc_init_array+0x2e>
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007150:	4798      	blx	r3
 8007152:	3601      	adds	r6, #1
 8007154:	e7ee      	b.n	8007134 <__libc_init_array+0xc>
 8007156:	f855 3b04 	ldr.w	r3, [r5], #4
 800715a:	4798      	blx	r3
 800715c:	3601      	adds	r6, #1
 800715e:	e7f2      	b.n	8007146 <__libc_init_array+0x1e>
 8007160:	0800a324 	.word	0x0800a324
 8007164:	0800a324 	.word	0x0800a324
 8007168:	0800a324 	.word	0x0800a324
 800716c:	0800a328 	.word	0x0800a328

08007170 <memcpy>:
 8007170:	440a      	add	r2, r1
 8007172:	4291      	cmp	r1, r2
 8007174:	f100 33ff 	add.w	r3, r0, #4294967295
 8007178:	d100      	bne.n	800717c <memcpy+0xc>
 800717a:	4770      	bx	lr
 800717c:	b510      	push	{r4, lr}
 800717e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007186:	4291      	cmp	r1, r2
 8007188:	d1f9      	bne.n	800717e <memcpy+0xe>
 800718a:	bd10      	pop	{r4, pc}

0800718c <memset>:
 800718c:	4402      	add	r2, r0
 800718e:	4603      	mov	r3, r0
 8007190:	4293      	cmp	r3, r2
 8007192:	d100      	bne.n	8007196 <memset+0xa>
 8007194:	4770      	bx	lr
 8007196:	f803 1b01 	strb.w	r1, [r3], #1
 800719a:	e7f9      	b.n	8007190 <memset+0x4>

0800719c <__cvt>:
 800719c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	ec55 4b10 	vmov	r4, r5, d0
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	460e      	mov	r6, r1
 80071a8:	4619      	mov	r1, r3
 80071aa:	462b      	mov	r3, r5
 80071ac:	bfbb      	ittet	lt
 80071ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071b2:	461d      	movlt	r5, r3
 80071b4:	2300      	movge	r3, #0
 80071b6:	232d      	movlt	r3, #45	; 0x2d
 80071b8:	700b      	strb	r3, [r1, #0]
 80071ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071c0:	4691      	mov	r9, r2
 80071c2:	f023 0820 	bic.w	r8, r3, #32
 80071c6:	bfbc      	itt	lt
 80071c8:	4622      	movlt	r2, r4
 80071ca:	4614      	movlt	r4, r2
 80071cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071d0:	d005      	beq.n	80071de <__cvt+0x42>
 80071d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071d6:	d100      	bne.n	80071da <__cvt+0x3e>
 80071d8:	3601      	adds	r6, #1
 80071da:	2102      	movs	r1, #2
 80071dc:	e000      	b.n	80071e0 <__cvt+0x44>
 80071de:	2103      	movs	r1, #3
 80071e0:	ab03      	add	r3, sp, #12
 80071e2:	9301      	str	r3, [sp, #4]
 80071e4:	ab02      	add	r3, sp, #8
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	ec45 4b10 	vmov	d0, r4, r5
 80071ec:	4653      	mov	r3, sl
 80071ee:	4632      	mov	r2, r6
 80071f0:	f000 fcea 	bl	8007bc8 <_dtoa_r>
 80071f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071f8:	4607      	mov	r7, r0
 80071fa:	d102      	bne.n	8007202 <__cvt+0x66>
 80071fc:	f019 0f01 	tst.w	r9, #1
 8007200:	d022      	beq.n	8007248 <__cvt+0xac>
 8007202:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007206:	eb07 0906 	add.w	r9, r7, r6
 800720a:	d110      	bne.n	800722e <__cvt+0x92>
 800720c:	783b      	ldrb	r3, [r7, #0]
 800720e:	2b30      	cmp	r3, #48	; 0x30
 8007210:	d10a      	bne.n	8007228 <__cvt+0x8c>
 8007212:	2200      	movs	r2, #0
 8007214:	2300      	movs	r3, #0
 8007216:	4620      	mov	r0, r4
 8007218:	4629      	mov	r1, r5
 800721a:	f7f9 fc5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800721e:	b918      	cbnz	r0, 8007228 <__cvt+0x8c>
 8007220:	f1c6 0601 	rsb	r6, r6, #1
 8007224:	f8ca 6000 	str.w	r6, [sl]
 8007228:	f8da 3000 	ldr.w	r3, [sl]
 800722c:	4499      	add	r9, r3
 800722e:	2200      	movs	r2, #0
 8007230:	2300      	movs	r3, #0
 8007232:	4620      	mov	r0, r4
 8007234:	4629      	mov	r1, r5
 8007236:	f7f9 fc4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800723a:	b108      	cbz	r0, 8007240 <__cvt+0xa4>
 800723c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007240:	2230      	movs	r2, #48	; 0x30
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	454b      	cmp	r3, r9
 8007246:	d307      	bcc.n	8007258 <__cvt+0xbc>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800724c:	1bdb      	subs	r3, r3, r7
 800724e:	4638      	mov	r0, r7
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	b004      	add	sp, #16
 8007254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007258:	1c59      	adds	r1, r3, #1
 800725a:	9103      	str	r1, [sp, #12]
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	e7f0      	b.n	8007242 <__cvt+0xa6>

08007260 <__exponent>:
 8007260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007262:	4603      	mov	r3, r0
 8007264:	2900      	cmp	r1, #0
 8007266:	bfb8      	it	lt
 8007268:	4249      	neglt	r1, r1
 800726a:	f803 2b02 	strb.w	r2, [r3], #2
 800726e:	bfb4      	ite	lt
 8007270:	222d      	movlt	r2, #45	; 0x2d
 8007272:	222b      	movge	r2, #43	; 0x2b
 8007274:	2909      	cmp	r1, #9
 8007276:	7042      	strb	r2, [r0, #1]
 8007278:	dd2a      	ble.n	80072d0 <__exponent+0x70>
 800727a:	f10d 0407 	add.w	r4, sp, #7
 800727e:	46a4      	mov	ip, r4
 8007280:	270a      	movs	r7, #10
 8007282:	46a6      	mov	lr, r4
 8007284:	460a      	mov	r2, r1
 8007286:	fb91 f6f7 	sdiv	r6, r1, r7
 800728a:	fb07 1516 	mls	r5, r7, r6, r1
 800728e:	3530      	adds	r5, #48	; 0x30
 8007290:	2a63      	cmp	r2, #99	; 0x63
 8007292:	f104 34ff 	add.w	r4, r4, #4294967295
 8007296:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800729a:	4631      	mov	r1, r6
 800729c:	dcf1      	bgt.n	8007282 <__exponent+0x22>
 800729e:	3130      	adds	r1, #48	; 0x30
 80072a0:	f1ae 0502 	sub.w	r5, lr, #2
 80072a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072a8:	1c44      	adds	r4, r0, #1
 80072aa:	4629      	mov	r1, r5
 80072ac:	4561      	cmp	r1, ip
 80072ae:	d30a      	bcc.n	80072c6 <__exponent+0x66>
 80072b0:	f10d 0209 	add.w	r2, sp, #9
 80072b4:	eba2 020e 	sub.w	r2, r2, lr
 80072b8:	4565      	cmp	r5, ip
 80072ba:	bf88      	it	hi
 80072bc:	2200      	movhi	r2, #0
 80072be:	4413      	add	r3, r2
 80072c0:	1a18      	subs	r0, r3, r0
 80072c2:	b003      	add	sp, #12
 80072c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072ce:	e7ed      	b.n	80072ac <__exponent+0x4c>
 80072d0:	2330      	movs	r3, #48	; 0x30
 80072d2:	3130      	adds	r1, #48	; 0x30
 80072d4:	7083      	strb	r3, [r0, #2]
 80072d6:	70c1      	strb	r1, [r0, #3]
 80072d8:	1d03      	adds	r3, r0, #4
 80072da:	e7f1      	b.n	80072c0 <__exponent+0x60>

080072dc <_printf_float>:
 80072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	ed2d 8b02 	vpush	{d8}
 80072e4:	b08d      	sub	sp, #52	; 0x34
 80072e6:	460c      	mov	r4, r1
 80072e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80072ec:	4616      	mov	r6, r2
 80072ee:	461f      	mov	r7, r3
 80072f0:	4605      	mov	r5, r0
 80072f2:	f001 fa55 	bl	80087a0 <_localeconv_r>
 80072f6:	f8d0 a000 	ldr.w	sl, [r0]
 80072fa:	4650      	mov	r0, sl
 80072fc:	f7f8 ff70 	bl	80001e0 <strlen>
 8007300:	2300      	movs	r3, #0
 8007302:	930a      	str	r3, [sp, #40]	; 0x28
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	9305      	str	r3, [sp, #20]
 8007308:	f8d8 3000 	ldr.w	r3, [r8]
 800730c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007310:	3307      	adds	r3, #7
 8007312:	f023 0307 	bic.w	r3, r3, #7
 8007316:	f103 0208 	add.w	r2, r3, #8
 800731a:	f8c8 2000 	str.w	r2, [r8]
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007326:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800732a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800732e:	9307      	str	r3, [sp, #28]
 8007330:	f8cd 8018 	str.w	r8, [sp, #24]
 8007334:	ee08 0a10 	vmov	s16, r0
 8007338:	4b9f      	ldr	r3, [pc, #636]	; (80075b8 <_printf_float+0x2dc>)
 800733a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800733e:	f04f 32ff 	mov.w	r2, #4294967295
 8007342:	f7f9 fbfb 	bl	8000b3c <__aeabi_dcmpun>
 8007346:	bb88      	cbnz	r0, 80073ac <_printf_float+0xd0>
 8007348:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800734c:	4b9a      	ldr	r3, [pc, #616]	; (80075b8 <_printf_float+0x2dc>)
 800734e:	f04f 32ff 	mov.w	r2, #4294967295
 8007352:	f7f9 fbd5 	bl	8000b00 <__aeabi_dcmple>
 8007356:	bb48      	cbnz	r0, 80073ac <_printf_float+0xd0>
 8007358:	2200      	movs	r2, #0
 800735a:	2300      	movs	r3, #0
 800735c:	4640      	mov	r0, r8
 800735e:	4649      	mov	r1, r9
 8007360:	f7f9 fbc4 	bl	8000aec <__aeabi_dcmplt>
 8007364:	b110      	cbz	r0, 800736c <_printf_float+0x90>
 8007366:	232d      	movs	r3, #45	; 0x2d
 8007368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800736c:	4b93      	ldr	r3, [pc, #588]	; (80075bc <_printf_float+0x2e0>)
 800736e:	4894      	ldr	r0, [pc, #592]	; (80075c0 <_printf_float+0x2e4>)
 8007370:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007374:	bf94      	ite	ls
 8007376:	4698      	movls	r8, r3
 8007378:	4680      	movhi	r8, r0
 800737a:	2303      	movs	r3, #3
 800737c:	6123      	str	r3, [r4, #16]
 800737e:	9b05      	ldr	r3, [sp, #20]
 8007380:	f023 0204 	bic.w	r2, r3, #4
 8007384:	6022      	str	r2, [r4, #0]
 8007386:	f04f 0900 	mov.w	r9, #0
 800738a:	9700      	str	r7, [sp, #0]
 800738c:	4633      	mov	r3, r6
 800738e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007390:	4621      	mov	r1, r4
 8007392:	4628      	mov	r0, r5
 8007394:	f000 f9d8 	bl	8007748 <_printf_common>
 8007398:	3001      	adds	r0, #1
 800739a:	f040 8090 	bne.w	80074be <_printf_float+0x1e2>
 800739e:	f04f 30ff 	mov.w	r0, #4294967295
 80073a2:	b00d      	add	sp, #52	; 0x34
 80073a4:	ecbd 8b02 	vpop	{d8}
 80073a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ac:	4642      	mov	r2, r8
 80073ae:	464b      	mov	r3, r9
 80073b0:	4640      	mov	r0, r8
 80073b2:	4649      	mov	r1, r9
 80073b4:	f7f9 fbc2 	bl	8000b3c <__aeabi_dcmpun>
 80073b8:	b140      	cbz	r0, 80073cc <_printf_float+0xf0>
 80073ba:	464b      	mov	r3, r9
 80073bc:	2b00      	cmp	r3, #0
 80073be:	bfbc      	itt	lt
 80073c0:	232d      	movlt	r3, #45	; 0x2d
 80073c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073c6:	487f      	ldr	r0, [pc, #508]	; (80075c4 <_printf_float+0x2e8>)
 80073c8:	4b7f      	ldr	r3, [pc, #508]	; (80075c8 <_printf_float+0x2ec>)
 80073ca:	e7d1      	b.n	8007370 <_printf_float+0x94>
 80073cc:	6863      	ldr	r3, [r4, #4]
 80073ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073d2:	9206      	str	r2, [sp, #24]
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	d13f      	bne.n	8007458 <_printf_float+0x17c>
 80073d8:	2306      	movs	r3, #6
 80073da:	6063      	str	r3, [r4, #4]
 80073dc:	9b05      	ldr	r3, [sp, #20]
 80073de:	6861      	ldr	r1, [r4, #4]
 80073e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073e4:	2300      	movs	r3, #0
 80073e6:	9303      	str	r3, [sp, #12]
 80073e8:	ab0a      	add	r3, sp, #40	; 0x28
 80073ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80073ee:	ab09      	add	r3, sp, #36	; 0x24
 80073f0:	ec49 8b10 	vmov	d0, r8, r9
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	6022      	str	r2, [r4, #0]
 80073f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80073fc:	4628      	mov	r0, r5
 80073fe:	f7ff fecd 	bl	800719c <__cvt>
 8007402:	9b06      	ldr	r3, [sp, #24]
 8007404:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007406:	2b47      	cmp	r3, #71	; 0x47
 8007408:	4680      	mov	r8, r0
 800740a:	d108      	bne.n	800741e <_printf_float+0x142>
 800740c:	1cc8      	adds	r0, r1, #3
 800740e:	db02      	blt.n	8007416 <_printf_float+0x13a>
 8007410:	6863      	ldr	r3, [r4, #4]
 8007412:	4299      	cmp	r1, r3
 8007414:	dd41      	ble.n	800749a <_printf_float+0x1be>
 8007416:	f1ab 0b02 	sub.w	fp, fp, #2
 800741a:	fa5f fb8b 	uxtb.w	fp, fp
 800741e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007422:	d820      	bhi.n	8007466 <_printf_float+0x18a>
 8007424:	3901      	subs	r1, #1
 8007426:	465a      	mov	r2, fp
 8007428:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800742c:	9109      	str	r1, [sp, #36]	; 0x24
 800742e:	f7ff ff17 	bl	8007260 <__exponent>
 8007432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007434:	1813      	adds	r3, r2, r0
 8007436:	2a01      	cmp	r2, #1
 8007438:	4681      	mov	r9, r0
 800743a:	6123      	str	r3, [r4, #16]
 800743c:	dc02      	bgt.n	8007444 <_printf_float+0x168>
 800743e:	6822      	ldr	r2, [r4, #0]
 8007440:	07d2      	lsls	r2, r2, #31
 8007442:	d501      	bpl.n	8007448 <_printf_float+0x16c>
 8007444:	3301      	adds	r3, #1
 8007446:	6123      	str	r3, [r4, #16]
 8007448:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800744c:	2b00      	cmp	r3, #0
 800744e:	d09c      	beq.n	800738a <_printf_float+0xae>
 8007450:	232d      	movs	r3, #45	; 0x2d
 8007452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007456:	e798      	b.n	800738a <_printf_float+0xae>
 8007458:	9a06      	ldr	r2, [sp, #24]
 800745a:	2a47      	cmp	r2, #71	; 0x47
 800745c:	d1be      	bne.n	80073dc <_printf_float+0x100>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1bc      	bne.n	80073dc <_printf_float+0x100>
 8007462:	2301      	movs	r3, #1
 8007464:	e7b9      	b.n	80073da <_printf_float+0xfe>
 8007466:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800746a:	d118      	bne.n	800749e <_printf_float+0x1c2>
 800746c:	2900      	cmp	r1, #0
 800746e:	6863      	ldr	r3, [r4, #4]
 8007470:	dd0b      	ble.n	800748a <_printf_float+0x1ae>
 8007472:	6121      	str	r1, [r4, #16]
 8007474:	b913      	cbnz	r3, 800747c <_printf_float+0x1a0>
 8007476:	6822      	ldr	r2, [r4, #0]
 8007478:	07d0      	lsls	r0, r2, #31
 800747a:	d502      	bpl.n	8007482 <_printf_float+0x1a6>
 800747c:	3301      	adds	r3, #1
 800747e:	440b      	add	r3, r1
 8007480:	6123      	str	r3, [r4, #16]
 8007482:	65a1      	str	r1, [r4, #88]	; 0x58
 8007484:	f04f 0900 	mov.w	r9, #0
 8007488:	e7de      	b.n	8007448 <_printf_float+0x16c>
 800748a:	b913      	cbnz	r3, 8007492 <_printf_float+0x1b6>
 800748c:	6822      	ldr	r2, [r4, #0]
 800748e:	07d2      	lsls	r2, r2, #31
 8007490:	d501      	bpl.n	8007496 <_printf_float+0x1ba>
 8007492:	3302      	adds	r3, #2
 8007494:	e7f4      	b.n	8007480 <_printf_float+0x1a4>
 8007496:	2301      	movs	r3, #1
 8007498:	e7f2      	b.n	8007480 <_printf_float+0x1a4>
 800749a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800749e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a0:	4299      	cmp	r1, r3
 80074a2:	db05      	blt.n	80074b0 <_printf_float+0x1d4>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	6121      	str	r1, [r4, #16]
 80074a8:	07d8      	lsls	r0, r3, #31
 80074aa:	d5ea      	bpl.n	8007482 <_printf_float+0x1a6>
 80074ac:	1c4b      	adds	r3, r1, #1
 80074ae:	e7e7      	b.n	8007480 <_printf_float+0x1a4>
 80074b0:	2900      	cmp	r1, #0
 80074b2:	bfd4      	ite	le
 80074b4:	f1c1 0202 	rsble	r2, r1, #2
 80074b8:	2201      	movgt	r2, #1
 80074ba:	4413      	add	r3, r2
 80074bc:	e7e0      	b.n	8007480 <_printf_float+0x1a4>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	055a      	lsls	r2, r3, #21
 80074c2:	d407      	bmi.n	80074d4 <_printf_float+0x1f8>
 80074c4:	6923      	ldr	r3, [r4, #16]
 80074c6:	4642      	mov	r2, r8
 80074c8:	4631      	mov	r1, r6
 80074ca:	4628      	mov	r0, r5
 80074cc:	47b8      	blx	r7
 80074ce:	3001      	adds	r0, #1
 80074d0:	d12c      	bne.n	800752c <_printf_float+0x250>
 80074d2:	e764      	b.n	800739e <_printf_float+0xc2>
 80074d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074d8:	f240 80e0 	bls.w	800769c <_printf_float+0x3c0>
 80074dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074e0:	2200      	movs	r2, #0
 80074e2:	2300      	movs	r3, #0
 80074e4:	f7f9 faf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d034      	beq.n	8007556 <_printf_float+0x27a>
 80074ec:	4a37      	ldr	r2, [pc, #220]	; (80075cc <_printf_float+0x2f0>)
 80074ee:	2301      	movs	r3, #1
 80074f0:	4631      	mov	r1, r6
 80074f2:	4628      	mov	r0, r5
 80074f4:	47b8      	blx	r7
 80074f6:	3001      	adds	r0, #1
 80074f8:	f43f af51 	beq.w	800739e <_printf_float+0xc2>
 80074fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007500:	429a      	cmp	r2, r3
 8007502:	db02      	blt.n	800750a <_printf_float+0x22e>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	07d8      	lsls	r0, r3, #31
 8007508:	d510      	bpl.n	800752c <_printf_float+0x250>
 800750a:	ee18 3a10 	vmov	r3, s16
 800750e:	4652      	mov	r2, sl
 8007510:	4631      	mov	r1, r6
 8007512:	4628      	mov	r0, r5
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	f43f af41 	beq.w	800739e <_printf_float+0xc2>
 800751c:	f04f 0800 	mov.w	r8, #0
 8007520:	f104 091a 	add.w	r9, r4, #26
 8007524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007526:	3b01      	subs	r3, #1
 8007528:	4543      	cmp	r3, r8
 800752a:	dc09      	bgt.n	8007540 <_printf_float+0x264>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	079b      	lsls	r3, r3, #30
 8007530:	f100 8105 	bmi.w	800773e <_printf_float+0x462>
 8007534:	68e0      	ldr	r0, [r4, #12]
 8007536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007538:	4298      	cmp	r0, r3
 800753a:	bfb8      	it	lt
 800753c:	4618      	movlt	r0, r3
 800753e:	e730      	b.n	80073a2 <_printf_float+0xc6>
 8007540:	2301      	movs	r3, #1
 8007542:	464a      	mov	r2, r9
 8007544:	4631      	mov	r1, r6
 8007546:	4628      	mov	r0, r5
 8007548:	47b8      	blx	r7
 800754a:	3001      	adds	r0, #1
 800754c:	f43f af27 	beq.w	800739e <_printf_float+0xc2>
 8007550:	f108 0801 	add.w	r8, r8, #1
 8007554:	e7e6      	b.n	8007524 <_printf_float+0x248>
 8007556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007558:	2b00      	cmp	r3, #0
 800755a:	dc39      	bgt.n	80075d0 <_printf_float+0x2f4>
 800755c:	4a1b      	ldr	r2, [pc, #108]	; (80075cc <_printf_float+0x2f0>)
 800755e:	2301      	movs	r3, #1
 8007560:	4631      	mov	r1, r6
 8007562:	4628      	mov	r0, r5
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	f43f af19 	beq.w	800739e <_printf_float+0xc2>
 800756c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007570:	4313      	orrs	r3, r2
 8007572:	d102      	bne.n	800757a <_printf_float+0x29e>
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	07d9      	lsls	r1, r3, #31
 8007578:	d5d8      	bpl.n	800752c <_printf_float+0x250>
 800757a:	ee18 3a10 	vmov	r3, s16
 800757e:	4652      	mov	r2, sl
 8007580:	4631      	mov	r1, r6
 8007582:	4628      	mov	r0, r5
 8007584:	47b8      	blx	r7
 8007586:	3001      	adds	r0, #1
 8007588:	f43f af09 	beq.w	800739e <_printf_float+0xc2>
 800758c:	f04f 0900 	mov.w	r9, #0
 8007590:	f104 0a1a 	add.w	sl, r4, #26
 8007594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007596:	425b      	negs	r3, r3
 8007598:	454b      	cmp	r3, r9
 800759a:	dc01      	bgt.n	80075a0 <_printf_float+0x2c4>
 800759c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800759e:	e792      	b.n	80074c6 <_printf_float+0x1ea>
 80075a0:	2301      	movs	r3, #1
 80075a2:	4652      	mov	r2, sl
 80075a4:	4631      	mov	r1, r6
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b8      	blx	r7
 80075aa:	3001      	adds	r0, #1
 80075ac:	f43f aef7 	beq.w	800739e <_printf_float+0xc2>
 80075b0:	f109 0901 	add.w	r9, r9, #1
 80075b4:	e7ee      	b.n	8007594 <_printf_float+0x2b8>
 80075b6:	bf00      	nop
 80075b8:	7fefffff 	.word	0x7fefffff
 80075bc:	08009f40 	.word	0x08009f40
 80075c0:	08009f44 	.word	0x08009f44
 80075c4:	08009f4c 	.word	0x08009f4c
 80075c8:	08009f48 	.word	0x08009f48
 80075cc:	08009f50 	.word	0x08009f50
 80075d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075d4:	429a      	cmp	r2, r3
 80075d6:	bfa8      	it	ge
 80075d8:	461a      	movge	r2, r3
 80075da:	2a00      	cmp	r2, #0
 80075dc:	4691      	mov	r9, r2
 80075de:	dc37      	bgt.n	8007650 <_printf_float+0x374>
 80075e0:	f04f 0b00 	mov.w	fp, #0
 80075e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075e8:	f104 021a 	add.w	r2, r4, #26
 80075ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075ee:	9305      	str	r3, [sp, #20]
 80075f0:	eba3 0309 	sub.w	r3, r3, r9
 80075f4:	455b      	cmp	r3, fp
 80075f6:	dc33      	bgt.n	8007660 <_printf_float+0x384>
 80075f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075fc:	429a      	cmp	r2, r3
 80075fe:	db3b      	blt.n	8007678 <_printf_float+0x39c>
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	07da      	lsls	r2, r3, #31
 8007604:	d438      	bmi.n	8007678 <_printf_float+0x39c>
 8007606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007608:	9b05      	ldr	r3, [sp, #20]
 800760a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	eba2 0901 	sub.w	r9, r2, r1
 8007612:	4599      	cmp	r9, r3
 8007614:	bfa8      	it	ge
 8007616:	4699      	movge	r9, r3
 8007618:	f1b9 0f00 	cmp.w	r9, #0
 800761c:	dc35      	bgt.n	800768a <_printf_float+0x3ae>
 800761e:	f04f 0800 	mov.w	r8, #0
 8007622:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007626:	f104 0a1a 	add.w	sl, r4, #26
 800762a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800762e:	1a9b      	subs	r3, r3, r2
 8007630:	eba3 0309 	sub.w	r3, r3, r9
 8007634:	4543      	cmp	r3, r8
 8007636:	f77f af79 	ble.w	800752c <_printf_float+0x250>
 800763a:	2301      	movs	r3, #1
 800763c:	4652      	mov	r2, sl
 800763e:	4631      	mov	r1, r6
 8007640:	4628      	mov	r0, r5
 8007642:	47b8      	blx	r7
 8007644:	3001      	adds	r0, #1
 8007646:	f43f aeaa 	beq.w	800739e <_printf_float+0xc2>
 800764a:	f108 0801 	add.w	r8, r8, #1
 800764e:	e7ec      	b.n	800762a <_printf_float+0x34e>
 8007650:	4613      	mov	r3, r2
 8007652:	4631      	mov	r1, r6
 8007654:	4642      	mov	r2, r8
 8007656:	4628      	mov	r0, r5
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	d1c0      	bne.n	80075e0 <_printf_float+0x304>
 800765e:	e69e      	b.n	800739e <_printf_float+0xc2>
 8007660:	2301      	movs	r3, #1
 8007662:	4631      	mov	r1, r6
 8007664:	4628      	mov	r0, r5
 8007666:	9205      	str	r2, [sp, #20]
 8007668:	47b8      	blx	r7
 800766a:	3001      	adds	r0, #1
 800766c:	f43f ae97 	beq.w	800739e <_printf_float+0xc2>
 8007670:	9a05      	ldr	r2, [sp, #20]
 8007672:	f10b 0b01 	add.w	fp, fp, #1
 8007676:	e7b9      	b.n	80075ec <_printf_float+0x310>
 8007678:	ee18 3a10 	vmov	r3, s16
 800767c:	4652      	mov	r2, sl
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	d1be      	bne.n	8007606 <_printf_float+0x32a>
 8007688:	e689      	b.n	800739e <_printf_float+0xc2>
 800768a:	9a05      	ldr	r2, [sp, #20]
 800768c:	464b      	mov	r3, r9
 800768e:	4442      	add	r2, r8
 8007690:	4631      	mov	r1, r6
 8007692:	4628      	mov	r0, r5
 8007694:	47b8      	blx	r7
 8007696:	3001      	adds	r0, #1
 8007698:	d1c1      	bne.n	800761e <_printf_float+0x342>
 800769a:	e680      	b.n	800739e <_printf_float+0xc2>
 800769c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800769e:	2a01      	cmp	r2, #1
 80076a0:	dc01      	bgt.n	80076a6 <_printf_float+0x3ca>
 80076a2:	07db      	lsls	r3, r3, #31
 80076a4:	d538      	bpl.n	8007718 <_printf_float+0x43c>
 80076a6:	2301      	movs	r3, #1
 80076a8:	4642      	mov	r2, r8
 80076aa:	4631      	mov	r1, r6
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b8      	blx	r7
 80076b0:	3001      	adds	r0, #1
 80076b2:	f43f ae74 	beq.w	800739e <_printf_float+0xc2>
 80076b6:	ee18 3a10 	vmov	r3, s16
 80076ba:	4652      	mov	r2, sl
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f ae6b 	beq.w	800739e <_printf_float+0xc2>
 80076c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076cc:	2200      	movs	r2, #0
 80076ce:	2300      	movs	r3, #0
 80076d0:	f7f9 fa02 	bl	8000ad8 <__aeabi_dcmpeq>
 80076d4:	b9d8      	cbnz	r0, 800770e <_printf_float+0x432>
 80076d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d8:	f108 0201 	add.w	r2, r8, #1
 80076dc:	3b01      	subs	r3, #1
 80076de:	4631      	mov	r1, r6
 80076e0:	4628      	mov	r0, r5
 80076e2:	47b8      	blx	r7
 80076e4:	3001      	adds	r0, #1
 80076e6:	d10e      	bne.n	8007706 <_printf_float+0x42a>
 80076e8:	e659      	b.n	800739e <_printf_float+0xc2>
 80076ea:	2301      	movs	r3, #1
 80076ec:	4652      	mov	r2, sl
 80076ee:	4631      	mov	r1, r6
 80076f0:	4628      	mov	r0, r5
 80076f2:	47b8      	blx	r7
 80076f4:	3001      	adds	r0, #1
 80076f6:	f43f ae52 	beq.w	800739e <_printf_float+0xc2>
 80076fa:	f108 0801 	add.w	r8, r8, #1
 80076fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007700:	3b01      	subs	r3, #1
 8007702:	4543      	cmp	r3, r8
 8007704:	dcf1      	bgt.n	80076ea <_printf_float+0x40e>
 8007706:	464b      	mov	r3, r9
 8007708:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800770c:	e6dc      	b.n	80074c8 <_printf_float+0x1ec>
 800770e:	f04f 0800 	mov.w	r8, #0
 8007712:	f104 0a1a 	add.w	sl, r4, #26
 8007716:	e7f2      	b.n	80076fe <_printf_float+0x422>
 8007718:	2301      	movs	r3, #1
 800771a:	4642      	mov	r2, r8
 800771c:	e7df      	b.n	80076de <_printf_float+0x402>
 800771e:	2301      	movs	r3, #1
 8007720:	464a      	mov	r2, r9
 8007722:	4631      	mov	r1, r6
 8007724:	4628      	mov	r0, r5
 8007726:	47b8      	blx	r7
 8007728:	3001      	adds	r0, #1
 800772a:	f43f ae38 	beq.w	800739e <_printf_float+0xc2>
 800772e:	f108 0801 	add.w	r8, r8, #1
 8007732:	68e3      	ldr	r3, [r4, #12]
 8007734:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007736:	1a5b      	subs	r3, r3, r1
 8007738:	4543      	cmp	r3, r8
 800773a:	dcf0      	bgt.n	800771e <_printf_float+0x442>
 800773c:	e6fa      	b.n	8007534 <_printf_float+0x258>
 800773e:	f04f 0800 	mov.w	r8, #0
 8007742:	f104 0919 	add.w	r9, r4, #25
 8007746:	e7f4      	b.n	8007732 <_printf_float+0x456>

08007748 <_printf_common>:
 8007748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800774c:	4616      	mov	r6, r2
 800774e:	4699      	mov	r9, r3
 8007750:	688a      	ldr	r2, [r1, #8]
 8007752:	690b      	ldr	r3, [r1, #16]
 8007754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007758:	4293      	cmp	r3, r2
 800775a:	bfb8      	it	lt
 800775c:	4613      	movlt	r3, r2
 800775e:	6033      	str	r3, [r6, #0]
 8007760:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007764:	4607      	mov	r7, r0
 8007766:	460c      	mov	r4, r1
 8007768:	b10a      	cbz	r2, 800776e <_printf_common+0x26>
 800776a:	3301      	adds	r3, #1
 800776c:	6033      	str	r3, [r6, #0]
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	0699      	lsls	r1, r3, #26
 8007772:	bf42      	ittt	mi
 8007774:	6833      	ldrmi	r3, [r6, #0]
 8007776:	3302      	addmi	r3, #2
 8007778:	6033      	strmi	r3, [r6, #0]
 800777a:	6825      	ldr	r5, [r4, #0]
 800777c:	f015 0506 	ands.w	r5, r5, #6
 8007780:	d106      	bne.n	8007790 <_printf_common+0x48>
 8007782:	f104 0a19 	add.w	sl, r4, #25
 8007786:	68e3      	ldr	r3, [r4, #12]
 8007788:	6832      	ldr	r2, [r6, #0]
 800778a:	1a9b      	subs	r3, r3, r2
 800778c:	42ab      	cmp	r3, r5
 800778e:	dc26      	bgt.n	80077de <_printf_common+0x96>
 8007790:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007794:	1e13      	subs	r3, r2, #0
 8007796:	6822      	ldr	r2, [r4, #0]
 8007798:	bf18      	it	ne
 800779a:	2301      	movne	r3, #1
 800779c:	0692      	lsls	r2, r2, #26
 800779e:	d42b      	bmi.n	80077f8 <_printf_common+0xb0>
 80077a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077a4:	4649      	mov	r1, r9
 80077a6:	4638      	mov	r0, r7
 80077a8:	47c0      	blx	r8
 80077aa:	3001      	adds	r0, #1
 80077ac:	d01e      	beq.n	80077ec <_printf_common+0xa4>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	68e5      	ldr	r5, [r4, #12]
 80077b2:	6832      	ldr	r2, [r6, #0]
 80077b4:	f003 0306 	and.w	r3, r3, #6
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	bf08      	it	eq
 80077bc:	1aad      	subeq	r5, r5, r2
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	6922      	ldr	r2, [r4, #16]
 80077c2:	bf0c      	ite	eq
 80077c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077c8:	2500      	movne	r5, #0
 80077ca:	4293      	cmp	r3, r2
 80077cc:	bfc4      	itt	gt
 80077ce:	1a9b      	subgt	r3, r3, r2
 80077d0:	18ed      	addgt	r5, r5, r3
 80077d2:	2600      	movs	r6, #0
 80077d4:	341a      	adds	r4, #26
 80077d6:	42b5      	cmp	r5, r6
 80077d8:	d11a      	bne.n	8007810 <_printf_common+0xc8>
 80077da:	2000      	movs	r0, #0
 80077dc:	e008      	b.n	80077f0 <_printf_common+0xa8>
 80077de:	2301      	movs	r3, #1
 80077e0:	4652      	mov	r2, sl
 80077e2:	4649      	mov	r1, r9
 80077e4:	4638      	mov	r0, r7
 80077e6:	47c0      	blx	r8
 80077e8:	3001      	adds	r0, #1
 80077ea:	d103      	bne.n	80077f4 <_printf_common+0xac>
 80077ec:	f04f 30ff 	mov.w	r0, #4294967295
 80077f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f4:	3501      	adds	r5, #1
 80077f6:	e7c6      	b.n	8007786 <_printf_common+0x3e>
 80077f8:	18e1      	adds	r1, r4, r3
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	2030      	movs	r0, #48	; 0x30
 80077fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007802:	4422      	add	r2, r4
 8007804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007808:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800780c:	3302      	adds	r3, #2
 800780e:	e7c7      	b.n	80077a0 <_printf_common+0x58>
 8007810:	2301      	movs	r3, #1
 8007812:	4622      	mov	r2, r4
 8007814:	4649      	mov	r1, r9
 8007816:	4638      	mov	r0, r7
 8007818:	47c0      	blx	r8
 800781a:	3001      	adds	r0, #1
 800781c:	d0e6      	beq.n	80077ec <_printf_common+0xa4>
 800781e:	3601      	adds	r6, #1
 8007820:	e7d9      	b.n	80077d6 <_printf_common+0x8e>
	...

08007824 <_printf_i>:
 8007824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007828:	460c      	mov	r4, r1
 800782a:	4691      	mov	r9, r2
 800782c:	7e27      	ldrb	r7, [r4, #24]
 800782e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007830:	2f78      	cmp	r7, #120	; 0x78
 8007832:	4680      	mov	r8, r0
 8007834:	469a      	mov	sl, r3
 8007836:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800783a:	d807      	bhi.n	800784c <_printf_i+0x28>
 800783c:	2f62      	cmp	r7, #98	; 0x62
 800783e:	d80a      	bhi.n	8007856 <_printf_i+0x32>
 8007840:	2f00      	cmp	r7, #0
 8007842:	f000 80d8 	beq.w	80079f6 <_printf_i+0x1d2>
 8007846:	2f58      	cmp	r7, #88	; 0x58
 8007848:	f000 80a3 	beq.w	8007992 <_printf_i+0x16e>
 800784c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007854:	e03a      	b.n	80078cc <_printf_i+0xa8>
 8007856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800785a:	2b15      	cmp	r3, #21
 800785c:	d8f6      	bhi.n	800784c <_printf_i+0x28>
 800785e:	a001      	add	r0, pc, #4	; (adr r0, 8007864 <_printf_i+0x40>)
 8007860:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007864:	080078bd 	.word	0x080078bd
 8007868:	080078d1 	.word	0x080078d1
 800786c:	0800784d 	.word	0x0800784d
 8007870:	0800784d 	.word	0x0800784d
 8007874:	0800784d 	.word	0x0800784d
 8007878:	0800784d 	.word	0x0800784d
 800787c:	080078d1 	.word	0x080078d1
 8007880:	0800784d 	.word	0x0800784d
 8007884:	0800784d 	.word	0x0800784d
 8007888:	0800784d 	.word	0x0800784d
 800788c:	0800784d 	.word	0x0800784d
 8007890:	080079dd 	.word	0x080079dd
 8007894:	08007901 	.word	0x08007901
 8007898:	080079bf 	.word	0x080079bf
 800789c:	0800784d 	.word	0x0800784d
 80078a0:	0800784d 	.word	0x0800784d
 80078a4:	080079ff 	.word	0x080079ff
 80078a8:	0800784d 	.word	0x0800784d
 80078ac:	08007901 	.word	0x08007901
 80078b0:	0800784d 	.word	0x0800784d
 80078b4:	0800784d 	.word	0x0800784d
 80078b8:	080079c7 	.word	0x080079c7
 80078bc:	680b      	ldr	r3, [r1, #0]
 80078be:	1d1a      	adds	r2, r3, #4
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	600a      	str	r2, [r1, #0]
 80078c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078cc:	2301      	movs	r3, #1
 80078ce:	e0a3      	b.n	8007a18 <_printf_i+0x1f4>
 80078d0:	6825      	ldr	r5, [r4, #0]
 80078d2:	6808      	ldr	r0, [r1, #0]
 80078d4:	062e      	lsls	r6, r5, #24
 80078d6:	f100 0304 	add.w	r3, r0, #4
 80078da:	d50a      	bpl.n	80078f2 <_printf_i+0xce>
 80078dc:	6805      	ldr	r5, [r0, #0]
 80078de:	600b      	str	r3, [r1, #0]
 80078e0:	2d00      	cmp	r5, #0
 80078e2:	da03      	bge.n	80078ec <_printf_i+0xc8>
 80078e4:	232d      	movs	r3, #45	; 0x2d
 80078e6:	426d      	negs	r5, r5
 80078e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ec:	485e      	ldr	r0, [pc, #376]	; (8007a68 <_printf_i+0x244>)
 80078ee:	230a      	movs	r3, #10
 80078f0:	e019      	b.n	8007926 <_printf_i+0x102>
 80078f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80078f6:	6805      	ldr	r5, [r0, #0]
 80078f8:	600b      	str	r3, [r1, #0]
 80078fa:	bf18      	it	ne
 80078fc:	b22d      	sxthne	r5, r5
 80078fe:	e7ef      	b.n	80078e0 <_printf_i+0xbc>
 8007900:	680b      	ldr	r3, [r1, #0]
 8007902:	6825      	ldr	r5, [r4, #0]
 8007904:	1d18      	adds	r0, r3, #4
 8007906:	6008      	str	r0, [r1, #0]
 8007908:	0628      	lsls	r0, r5, #24
 800790a:	d501      	bpl.n	8007910 <_printf_i+0xec>
 800790c:	681d      	ldr	r5, [r3, #0]
 800790e:	e002      	b.n	8007916 <_printf_i+0xf2>
 8007910:	0669      	lsls	r1, r5, #25
 8007912:	d5fb      	bpl.n	800790c <_printf_i+0xe8>
 8007914:	881d      	ldrh	r5, [r3, #0]
 8007916:	4854      	ldr	r0, [pc, #336]	; (8007a68 <_printf_i+0x244>)
 8007918:	2f6f      	cmp	r7, #111	; 0x6f
 800791a:	bf0c      	ite	eq
 800791c:	2308      	moveq	r3, #8
 800791e:	230a      	movne	r3, #10
 8007920:	2100      	movs	r1, #0
 8007922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007926:	6866      	ldr	r6, [r4, #4]
 8007928:	60a6      	str	r6, [r4, #8]
 800792a:	2e00      	cmp	r6, #0
 800792c:	bfa2      	ittt	ge
 800792e:	6821      	ldrge	r1, [r4, #0]
 8007930:	f021 0104 	bicge.w	r1, r1, #4
 8007934:	6021      	strge	r1, [r4, #0]
 8007936:	b90d      	cbnz	r5, 800793c <_printf_i+0x118>
 8007938:	2e00      	cmp	r6, #0
 800793a:	d04d      	beq.n	80079d8 <_printf_i+0x1b4>
 800793c:	4616      	mov	r6, r2
 800793e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007942:	fb03 5711 	mls	r7, r3, r1, r5
 8007946:	5dc7      	ldrb	r7, [r0, r7]
 8007948:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800794c:	462f      	mov	r7, r5
 800794e:	42bb      	cmp	r3, r7
 8007950:	460d      	mov	r5, r1
 8007952:	d9f4      	bls.n	800793e <_printf_i+0x11a>
 8007954:	2b08      	cmp	r3, #8
 8007956:	d10b      	bne.n	8007970 <_printf_i+0x14c>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	07df      	lsls	r7, r3, #31
 800795c:	d508      	bpl.n	8007970 <_printf_i+0x14c>
 800795e:	6923      	ldr	r3, [r4, #16]
 8007960:	6861      	ldr	r1, [r4, #4]
 8007962:	4299      	cmp	r1, r3
 8007964:	bfde      	ittt	le
 8007966:	2330      	movle	r3, #48	; 0x30
 8007968:	f806 3c01 	strble.w	r3, [r6, #-1]
 800796c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007970:	1b92      	subs	r2, r2, r6
 8007972:	6122      	str	r2, [r4, #16]
 8007974:	f8cd a000 	str.w	sl, [sp]
 8007978:	464b      	mov	r3, r9
 800797a:	aa03      	add	r2, sp, #12
 800797c:	4621      	mov	r1, r4
 800797e:	4640      	mov	r0, r8
 8007980:	f7ff fee2 	bl	8007748 <_printf_common>
 8007984:	3001      	adds	r0, #1
 8007986:	d14c      	bne.n	8007a22 <_printf_i+0x1fe>
 8007988:	f04f 30ff 	mov.w	r0, #4294967295
 800798c:	b004      	add	sp, #16
 800798e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007992:	4835      	ldr	r0, [pc, #212]	; (8007a68 <_printf_i+0x244>)
 8007994:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	680e      	ldr	r6, [r1, #0]
 800799c:	061f      	lsls	r7, r3, #24
 800799e:	f856 5b04 	ldr.w	r5, [r6], #4
 80079a2:	600e      	str	r6, [r1, #0]
 80079a4:	d514      	bpl.n	80079d0 <_printf_i+0x1ac>
 80079a6:	07d9      	lsls	r1, r3, #31
 80079a8:	bf44      	itt	mi
 80079aa:	f043 0320 	orrmi.w	r3, r3, #32
 80079ae:	6023      	strmi	r3, [r4, #0]
 80079b0:	b91d      	cbnz	r5, 80079ba <_printf_i+0x196>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	f023 0320 	bic.w	r3, r3, #32
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	2310      	movs	r3, #16
 80079bc:	e7b0      	b.n	8007920 <_printf_i+0xfc>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	f043 0320 	orr.w	r3, r3, #32
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	2378      	movs	r3, #120	; 0x78
 80079c8:	4828      	ldr	r0, [pc, #160]	; (8007a6c <_printf_i+0x248>)
 80079ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079ce:	e7e3      	b.n	8007998 <_printf_i+0x174>
 80079d0:	065e      	lsls	r6, r3, #25
 80079d2:	bf48      	it	mi
 80079d4:	b2ad      	uxthmi	r5, r5
 80079d6:	e7e6      	b.n	80079a6 <_printf_i+0x182>
 80079d8:	4616      	mov	r6, r2
 80079da:	e7bb      	b.n	8007954 <_printf_i+0x130>
 80079dc:	680b      	ldr	r3, [r1, #0]
 80079de:	6826      	ldr	r6, [r4, #0]
 80079e0:	6960      	ldr	r0, [r4, #20]
 80079e2:	1d1d      	adds	r5, r3, #4
 80079e4:	600d      	str	r5, [r1, #0]
 80079e6:	0635      	lsls	r5, r6, #24
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	d501      	bpl.n	80079f0 <_printf_i+0x1cc>
 80079ec:	6018      	str	r0, [r3, #0]
 80079ee:	e002      	b.n	80079f6 <_printf_i+0x1d2>
 80079f0:	0671      	lsls	r1, r6, #25
 80079f2:	d5fb      	bpl.n	80079ec <_printf_i+0x1c8>
 80079f4:	8018      	strh	r0, [r3, #0]
 80079f6:	2300      	movs	r3, #0
 80079f8:	6123      	str	r3, [r4, #16]
 80079fa:	4616      	mov	r6, r2
 80079fc:	e7ba      	b.n	8007974 <_printf_i+0x150>
 80079fe:	680b      	ldr	r3, [r1, #0]
 8007a00:	1d1a      	adds	r2, r3, #4
 8007a02:	600a      	str	r2, [r1, #0]
 8007a04:	681e      	ldr	r6, [r3, #0]
 8007a06:	6862      	ldr	r2, [r4, #4]
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7f8 fbf0 	bl	80001f0 <memchr>
 8007a10:	b108      	cbz	r0, 8007a16 <_printf_i+0x1f2>
 8007a12:	1b80      	subs	r0, r0, r6
 8007a14:	6060      	str	r0, [r4, #4]
 8007a16:	6863      	ldr	r3, [r4, #4]
 8007a18:	6123      	str	r3, [r4, #16]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a20:	e7a8      	b.n	8007974 <_printf_i+0x150>
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	4632      	mov	r2, r6
 8007a26:	4649      	mov	r1, r9
 8007a28:	4640      	mov	r0, r8
 8007a2a:	47d0      	blx	sl
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d0ab      	beq.n	8007988 <_printf_i+0x164>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	079b      	lsls	r3, r3, #30
 8007a34:	d413      	bmi.n	8007a5e <_printf_i+0x23a>
 8007a36:	68e0      	ldr	r0, [r4, #12]
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	4298      	cmp	r0, r3
 8007a3c:	bfb8      	it	lt
 8007a3e:	4618      	movlt	r0, r3
 8007a40:	e7a4      	b.n	800798c <_printf_i+0x168>
 8007a42:	2301      	movs	r3, #1
 8007a44:	4632      	mov	r2, r6
 8007a46:	4649      	mov	r1, r9
 8007a48:	4640      	mov	r0, r8
 8007a4a:	47d0      	blx	sl
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d09b      	beq.n	8007988 <_printf_i+0x164>
 8007a50:	3501      	adds	r5, #1
 8007a52:	68e3      	ldr	r3, [r4, #12]
 8007a54:	9903      	ldr	r1, [sp, #12]
 8007a56:	1a5b      	subs	r3, r3, r1
 8007a58:	42ab      	cmp	r3, r5
 8007a5a:	dcf2      	bgt.n	8007a42 <_printf_i+0x21e>
 8007a5c:	e7eb      	b.n	8007a36 <_printf_i+0x212>
 8007a5e:	2500      	movs	r5, #0
 8007a60:	f104 0619 	add.w	r6, r4, #25
 8007a64:	e7f5      	b.n	8007a52 <_printf_i+0x22e>
 8007a66:	bf00      	nop
 8007a68:	08009f52 	.word	0x08009f52
 8007a6c:	08009f63 	.word	0x08009f63

08007a70 <siprintf>:
 8007a70:	b40e      	push	{r1, r2, r3}
 8007a72:	b500      	push	{lr}
 8007a74:	b09c      	sub	sp, #112	; 0x70
 8007a76:	ab1d      	add	r3, sp, #116	; 0x74
 8007a78:	9002      	str	r0, [sp, #8]
 8007a7a:	9006      	str	r0, [sp, #24]
 8007a7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a80:	4809      	ldr	r0, [pc, #36]	; (8007aa8 <siprintf+0x38>)
 8007a82:	9107      	str	r1, [sp, #28]
 8007a84:	9104      	str	r1, [sp, #16]
 8007a86:	4909      	ldr	r1, [pc, #36]	; (8007aac <siprintf+0x3c>)
 8007a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a8c:	9105      	str	r1, [sp, #20]
 8007a8e:	6800      	ldr	r0, [r0, #0]
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	a902      	add	r1, sp, #8
 8007a94:	f001 fb24 	bl	80090e0 <_svfiprintf_r>
 8007a98:	9b02      	ldr	r3, [sp, #8]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	b01c      	add	sp, #112	; 0x70
 8007aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aa4:	b003      	add	sp, #12
 8007aa6:	4770      	bx	lr
 8007aa8:	20000010 	.word	0x20000010
 8007aac:	ffff0208 	.word	0xffff0208

08007ab0 <quorem>:
 8007ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	6903      	ldr	r3, [r0, #16]
 8007ab6:	690c      	ldr	r4, [r1, #16]
 8007ab8:	42a3      	cmp	r3, r4
 8007aba:	4607      	mov	r7, r0
 8007abc:	f2c0 8081 	blt.w	8007bc2 <quorem+0x112>
 8007ac0:	3c01      	subs	r4, #1
 8007ac2:	f101 0814 	add.w	r8, r1, #20
 8007ac6:	f100 0514 	add.w	r5, r0, #20
 8007aca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ad4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	429a      	cmp	r2, r3
 8007adc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ae0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ae4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ae8:	d331      	bcc.n	8007b4e <quorem+0x9e>
 8007aea:	f04f 0e00 	mov.w	lr, #0
 8007aee:	4640      	mov	r0, r8
 8007af0:	46ac      	mov	ip, r5
 8007af2:	46f2      	mov	sl, lr
 8007af4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007af8:	b293      	uxth	r3, r2
 8007afa:	fb06 e303 	mla	r3, r6, r3, lr
 8007afe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	ebaa 0303 	sub.w	r3, sl, r3
 8007b08:	0c12      	lsrs	r2, r2, #16
 8007b0a:	f8dc a000 	ldr.w	sl, [ip]
 8007b0e:	fb06 e202 	mla	r2, r6, r2, lr
 8007b12:	fa13 f38a 	uxtah	r3, r3, sl
 8007b16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b1a:	fa1f fa82 	uxth.w	sl, r2
 8007b1e:	f8dc 2000 	ldr.w	r2, [ip]
 8007b22:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007b26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b30:	4581      	cmp	r9, r0
 8007b32:	f84c 3b04 	str.w	r3, [ip], #4
 8007b36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b3a:	d2db      	bcs.n	8007af4 <quorem+0x44>
 8007b3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b40:	b92b      	cbnz	r3, 8007b4e <quorem+0x9e>
 8007b42:	9b01      	ldr	r3, [sp, #4]
 8007b44:	3b04      	subs	r3, #4
 8007b46:	429d      	cmp	r5, r3
 8007b48:	461a      	mov	r2, r3
 8007b4a:	d32e      	bcc.n	8007baa <quorem+0xfa>
 8007b4c:	613c      	str	r4, [r7, #16]
 8007b4e:	4638      	mov	r0, r7
 8007b50:	f001 f8b0 	bl	8008cb4 <__mcmp>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	db24      	blt.n	8007ba2 <quorem+0xf2>
 8007b58:	3601      	adds	r6, #1
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f04f 0c00 	mov.w	ip, #0
 8007b60:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b64:	f8d0 e000 	ldr.w	lr, [r0]
 8007b68:	b293      	uxth	r3, r2
 8007b6a:	ebac 0303 	sub.w	r3, ip, r3
 8007b6e:	0c12      	lsrs	r2, r2, #16
 8007b70:	fa13 f38e 	uxtah	r3, r3, lr
 8007b74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b82:	45c1      	cmp	r9, r8
 8007b84:	f840 3b04 	str.w	r3, [r0], #4
 8007b88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b8c:	d2e8      	bcs.n	8007b60 <quorem+0xb0>
 8007b8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b96:	b922      	cbnz	r2, 8007ba2 <quorem+0xf2>
 8007b98:	3b04      	subs	r3, #4
 8007b9a:	429d      	cmp	r5, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	d30a      	bcc.n	8007bb6 <quorem+0x106>
 8007ba0:	613c      	str	r4, [r7, #16]
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	b003      	add	sp, #12
 8007ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007baa:	6812      	ldr	r2, [r2, #0]
 8007bac:	3b04      	subs	r3, #4
 8007bae:	2a00      	cmp	r2, #0
 8007bb0:	d1cc      	bne.n	8007b4c <quorem+0x9c>
 8007bb2:	3c01      	subs	r4, #1
 8007bb4:	e7c7      	b.n	8007b46 <quorem+0x96>
 8007bb6:	6812      	ldr	r2, [r2, #0]
 8007bb8:	3b04      	subs	r3, #4
 8007bba:	2a00      	cmp	r2, #0
 8007bbc:	d1f0      	bne.n	8007ba0 <quorem+0xf0>
 8007bbe:	3c01      	subs	r4, #1
 8007bc0:	e7eb      	b.n	8007b9a <quorem+0xea>
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	e7ee      	b.n	8007ba4 <quorem+0xf4>
	...

08007bc8 <_dtoa_r>:
 8007bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	ed2d 8b02 	vpush	{d8}
 8007bd0:	ec57 6b10 	vmov	r6, r7, d0
 8007bd4:	b095      	sub	sp, #84	; 0x54
 8007bd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bdc:	9105      	str	r1, [sp, #20]
 8007bde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007be2:	4604      	mov	r4, r0
 8007be4:	9209      	str	r2, [sp, #36]	; 0x24
 8007be6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007be8:	b975      	cbnz	r5, 8007c08 <_dtoa_r+0x40>
 8007bea:	2010      	movs	r0, #16
 8007bec:	f000 fddc 	bl	80087a8 <malloc>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	6260      	str	r0, [r4, #36]	; 0x24
 8007bf4:	b920      	cbnz	r0, 8007c00 <_dtoa_r+0x38>
 8007bf6:	4bb2      	ldr	r3, [pc, #712]	; (8007ec0 <_dtoa_r+0x2f8>)
 8007bf8:	21ea      	movs	r1, #234	; 0xea
 8007bfa:	48b2      	ldr	r0, [pc, #712]	; (8007ec4 <_dtoa_r+0x2fc>)
 8007bfc:	f001 fb80 	bl	8009300 <__assert_func>
 8007c00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c04:	6005      	str	r5, [r0, #0]
 8007c06:	60c5      	str	r5, [r0, #12]
 8007c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c0a:	6819      	ldr	r1, [r3, #0]
 8007c0c:	b151      	cbz	r1, 8007c24 <_dtoa_r+0x5c>
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	604a      	str	r2, [r1, #4]
 8007c12:	2301      	movs	r3, #1
 8007c14:	4093      	lsls	r3, r2
 8007c16:	608b      	str	r3, [r1, #8]
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f000 fe0d 	bl	8008838 <_Bfree>
 8007c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	1e3b      	subs	r3, r7, #0
 8007c26:	bfb9      	ittee	lt
 8007c28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c2c:	9303      	strlt	r3, [sp, #12]
 8007c2e:	2300      	movge	r3, #0
 8007c30:	f8c8 3000 	strge.w	r3, [r8]
 8007c34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007c38:	4ba3      	ldr	r3, [pc, #652]	; (8007ec8 <_dtoa_r+0x300>)
 8007c3a:	bfbc      	itt	lt
 8007c3c:	2201      	movlt	r2, #1
 8007c3e:	f8c8 2000 	strlt.w	r2, [r8]
 8007c42:	ea33 0309 	bics.w	r3, r3, r9
 8007c46:	d11b      	bne.n	8007c80 <_dtoa_r+0xb8>
 8007c48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c54:	4333      	orrs	r3, r6
 8007c56:	f000 857a 	beq.w	800874e <_dtoa_r+0xb86>
 8007c5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c5c:	b963      	cbnz	r3, 8007c78 <_dtoa_r+0xb0>
 8007c5e:	4b9b      	ldr	r3, [pc, #620]	; (8007ecc <_dtoa_r+0x304>)
 8007c60:	e024      	b.n	8007cac <_dtoa_r+0xe4>
 8007c62:	4b9b      	ldr	r3, [pc, #620]	; (8007ed0 <_dtoa_r+0x308>)
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	3308      	adds	r3, #8
 8007c68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	9800      	ldr	r0, [sp, #0]
 8007c6e:	b015      	add	sp, #84	; 0x54
 8007c70:	ecbd 8b02 	vpop	{d8}
 8007c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c78:	4b94      	ldr	r3, [pc, #592]	; (8007ecc <_dtoa_r+0x304>)
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	3303      	adds	r3, #3
 8007c7e:	e7f3      	b.n	8007c68 <_dtoa_r+0xa0>
 8007c80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c84:	2200      	movs	r2, #0
 8007c86:	ec51 0b17 	vmov	r0, r1, d7
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007c90:	f7f8 ff22 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c94:	4680      	mov	r8, r0
 8007c96:	b158      	cbz	r0, 8007cb0 <_dtoa_r+0xe8>
 8007c98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 8551 	beq.w	8008748 <_dtoa_r+0xb80>
 8007ca6:	488b      	ldr	r0, [pc, #556]	; (8007ed4 <_dtoa_r+0x30c>)
 8007ca8:	6018      	str	r0, [r3, #0]
 8007caa:	1e43      	subs	r3, r0, #1
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	e7dd      	b.n	8007c6c <_dtoa_r+0xa4>
 8007cb0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007cb4:	aa12      	add	r2, sp, #72	; 0x48
 8007cb6:	a913      	add	r1, sp, #76	; 0x4c
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f001 f89f 	bl	8008dfc <__d2b>
 8007cbe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007cc2:	4683      	mov	fp, r0
 8007cc4:	2d00      	cmp	r5, #0
 8007cc6:	d07c      	beq.n	8007dc2 <_dtoa_r+0x1fa>
 8007cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cd2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007cd6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007cda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007cde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ce2:	4b7d      	ldr	r3, [pc, #500]	; (8007ed8 <_dtoa_r+0x310>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4639      	mov	r1, r7
 8007cea:	f7f8 fad5 	bl	8000298 <__aeabi_dsub>
 8007cee:	a36e      	add	r3, pc, #440	; (adr r3, 8007ea8 <_dtoa_r+0x2e0>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f7f8 fc88 	bl	8000608 <__aeabi_dmul>
 8007cf8:	a36d      	add	r3, pc, #436	; (adr r3, 8007eb0 <_dtoa_r+0x2e8>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f7f8 facd 	bl	800029c <__adddf3>
 8007d02:	4606      	mov	r6, r0
 8007d04:	4628      	mov	r0, r5
 8007d06:	460f      	mov	r7, r1
 8007d08:	f7f8 fc14 	bl	8000534 <__aeabi_i2d>
 8007d0c:	a36a      	add	r3, pc, #424	; (adr r3, 8007eb8 <_dtoa_r+0x2f0>)
 8007d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d12:	f7f8 fc79 	bl	8000608 <__aeabi_dmul>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	f7f8 fabd 	bl	800029c <__adddf3>
 8007d22:	4606      	mov	r6, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	f7f8 ff1f 	bl	8000b68 <__aeabi_d2iz>
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	4682      	mov	sl, r0
 8007d2e:	2300      	movs	r3, #0
 8007d30:	4630      	mov	r0, r6
 8007d32:	4639      	mov	r1, r7
 8007d34:	f7f8 feda 	bl	8000aec <__aeabi_dcmplt>
 8007d38:	b148      	cbz	r0, 8007d4e <_dtoa_r+0x186>
 8007d3a:	4650      	mov	r0, sl
 8007d3c:	f7f8 fbfa 	bl	8000534 <__aeabi_i2d>
 8007d40:	4632      	mov	r2, r6
 8007d42:	463b      	mov	r3, r7
 8007d44:	f7f8 fec8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d48:	b908      	cbnz	r0, 8007d4e <_dtoa_r+0x186>
 8007d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d4e:	f1ba 0f16 	cmp.w	sl, #22
 8007d52:	d854      	bhi.n	8007dfe <_dtoa_r+0x236>
 8007d54:	4b61      	ldr	r3, [pc, #388]	; (8007edc <_dtoa_r+0x314>)
 8007d56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d62:	f7f8 fec3 	bl	8000aec <__aeabi_dcmplt>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d04b      	beq.n	8007e02 <_dtoa_r+0x23a>
 8007d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d6e:	2300      	movs	r3, #0
 8007d70:	930e      	str	r3, [sp, #56]	; 0x38
 8007d72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d74:	1b5d      	subs	r5, r3, r5
 8007d76:	1e6b      	subs	r3, r5, #1
 8007d78:	9304      	str	r3, [sp, #16]
 8007d7a:	bf43      	ittte	mi
 8007d7c:	2300      	movmi	r3, #0
 8007d7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007d82:	9304      	strmi	r3, [sp, #16]
 8007d84:	f04f 0800 	movpl.w	r8, #0
 8007d88:	f1ba 0f00 	cmp.w	sl, #0
 8007d8c:	db3b      	blt.n	8007e06 <_dtoa_r+0x23e>
 8007d8e:	9b04      	ldr	r3, [sp, #16]
 8007d90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007d94:	4453      	add	r3, sl
 8007d96:	9304      	str	r3, [sp, #16]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9306      	str	r3, [sp, #24]
 8007d9c:	9b05      	ldr	r3, [sp, #20]
 8007d9e:	2b09      	cmp	r3, #9
 8007da0:	d869      	bhi.n	8007e76 <_dtoa_r+0x2ae>
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	bfc4      	itt	gt
 8007da6:	3b04      	subgt	r3, #4
 8007da8:	9305      	strgt	r3, [sp, #20]
 8007daa:	9b05      	ldr	r3, [sp, #20]
 8007dac:	f1a3 0302 	sub.w	r3, r3, #2
 8007db0:	bfcc      	ite	gt
 8007db2:	2500      	movgt	r5, #0
 8007db4:	2501      	movle	r5, #1
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d869      	bhi.n	8007e8e <_dtoa_r+0x2c6>
 8007dba:	e8df f003 	tbb	[pc, r3]
 8007dbe:	4e2c      	.short	0x4e2c
 8007dc0:	5a4c      	.short	0x5a4c
 8007dc2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007dc6:	441d      	add	r5, r3
 8007dc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	bfc1      	itttt	gt
 8007dd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dd4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007dd8:	fa09 f303 	lslgt.w	r3, r9, r3
 8007ddc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007de0:	bfda      	itte	le
 8007de2:	f1c3 0320 	rsble	r3, r3, #32
 8007de6:	fa06 f003 	lslle.w	r0, r6, r3
 8007dea:	4318      	orrgt	r0, r3
 8007dec:	f7f8 fb92 	bl	8000514 <__aeabi_ui2d>
 8007df0:	2301      	movs	r3, #1
 8007df2:	4606      	mov	r6, r0
 8007df4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007df8:	3d01      	subs	r5, #1
 8007dfa:	9310      	str	r3, [sp, #64]	; 0x40
 8007dfc:	e771      	b.n	8007ce2 <_dtoa_r+0x11a>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e7b6      	b.n	8007d70 <_dtoa_r+0x1a8>
 8007e02:	900e      	str	r0, [sp, #56]	; 0x38
 8007e04:	e7b5      	b.n	8007d72 <_dtoa_r+0x1aa>
 8007e06:	f1ca 0300 	rsb	r3, sl, #0
 8007e0a:	9306      	str	r3, [sp, #24]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	eba8 080a 	sub.w	r8, r8, sl
 8007e12:	930d      	str	r3, [sp, #52]	; 0x34
 8007e14:	e7c2      	b.n	8007d9c <_dtoa_r+0x1d4>
 8007e16:	2300      	movs	r3, #0
 8007e18:	9308      	str	r3, [sp, #32]
 8007e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	dc39      	bgt.n	8007e94 <_dtoa_r+0x2cc>
 8007e20:	f04f 0901 	mov.w	r9, #1
 8007e24:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e28:	464b      	mov	r3, r9
 8007e2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007e2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e30:	2200      	movs	r2, #0
 8007e32:	6042      	str	r2, [r0, #4]
 8007e34:	2204      	movs	r2, #4
 8007e36:	f102 0614 	add.w	r6, r2, #20
 8007e3a:	429e      	cmp	r6, r3
 8007e3c:	6841      	ldr	r1, [r0, #4]
 8007e3e:	d92f      	bls.n	8007ea0 <_dtoa_r+0x2d8>
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 fcb9 	bl	80087b8 <_Balloc>
 8007e46:	9000      	str	r0, [sp, #0]
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d14b      	bne.n	8007ee4 <_dtoa_r+0x31c>
 8007e4c:	4b24      	ldr	r3, [pc, #144]	; (8007ee0 <_dtoa_r+0x318>)
 8007e4e:	4602      	mov	r2, r0
 8007e50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e54:	e6d1      	b.n	8007bfa <_dtoa_r+0x32>
 8007e56:	2301      	movs	r3, #1
 8007e58:	e7de      	b.n	8007e18 <_dtoa_r+0x250>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9308      	str	r3, [sp, #32]
 8007e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e60:	eb0a 0903 	add.w	r9, sl, r3
 8007e64:	f109 0301 	add.w	r3, r9, #1
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	9301      	str	r3, [sp, #4]
 8007e6c:	bfb8      	it	lt
 8007e6e:	2301      	movlt	r3, #1
 8007e70:	e7dd      	b.n	8007e2e <_dtoa_r+0x266>
 8007e72:	2301      	movs	r3, #1
 8007e74:	e7f2      	b.n	8007e5c <_dtoa_r+0x294>
 8007e76:	2501      	movs	r5, #1
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	9508      	str	r5, [sp, #32]
 8007e7e:	f04f 39ff 	mov.w	r9, #4294967295
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e88:	2312      	movs	r3, #18
 8007e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e8c:	e7cf      	b.n	8007e2e <_dtoa_r+0x266>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	9308      	str	r3, [sp, #32]
 8007e92:	e7f4      	b.n	8007e7e <_dtoa_r+0x2b6>
 8007e94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007e98:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	e7c6      	b.n	8007e2e <_dtoa_r+0x266>
 8007ea0:	3101      	adds	r1, #1
 8007ea2:	6041      	str	r1, [r0, #4]
 8007ea4:	0052      	lsls	r2, r2, #1
 8007ea6:	e7c6      	b.n	8007e36 <_dtoa_r+0x26e>
 8007ea8:	636f4361 	.word	0x636f4361
 8007eac:	3fd287a7 	.word	0x3fd287a7
 8007eb0:	8b60c8b3 	.word	0x8b60c8b3
 8007eb4:	3fc68a28 	.word	0x3fc68a28
 8007eb8:	509f79fb 	.word	0x509f79fb
 8007ebc:	3fd34413 	.word	0x3fd34413
 8007ec0:	08009f81 	.word	0x08009f81
 8007ec4:	08009f98 	.word	0x08009f98
 8007ec8:	7ff00000 	.word	0x7ff00000
 8007ecc:	08009f7d 	.word	0x08009f7d
 8007ed0:	08009f74 	.word	0x08009f74
 8007ed4:	08009f51 	.word	0x08009f51
 8007ed8:	3ff80000 	.word	0x3ff80000
 8007edc:	0800a090 	.word	0x0800a090
 8007ee0:	08009ff7 	.word	0x08009ff7
 8007ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ee6:	9a00      	ldr	r2, [sp, #0]
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	9b01      	ldr	r3, [sp, #4]
 8007eec:	2b0e      	cmp	r3, #14
 8007eee:	f200 80ad 	bhi.w	800804c <_dtoa_r+0x484>
 8007ef2:	2d00      	cmp	r5, #0
 8007ef4:	f000 80aa 	beq.w	800804c <_dtoa_r+0x484>
 8007ef8:	f1ba 0f00 	cmp.w	sl, #0
 8007efc:	dd36      	ble.n	8007f6c <_dtoa_r+0x3a4>
 8007efe:	4ac3      	ldr	r2, [pc, #780]	; (800820c <_dtoa_r+0x644>)
 8007f00:	f00a 030f 	and.w	r3, sl, #15
 8007f04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f08:	ed93 7b00 	vldr	d7, [r3]
 8007f0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007f10:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007f14:	eeb0 8a47 	vmov.f32	s16, s14
 8007f18:	eef0 8a67 	vmov.f32	s17, s15
 8007f1c:	d016      	beq.n	8007f4c <_dtoa_r+0x384>
 8007f1e:	4bbc      	ldr	r3, [pc, #752]	; (8008210 <_dtoa_r+0x648>)
 8007f20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f28:	f7f8 fc98 	bl	800085c <__aeabi_ddiv>
 8007f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f30:	f007 070f 	and.w	r7, r7, #15
 8007f34:	2503      	movs	r5, #3
 8007f36:	4eb6      	ldr	r6, [pc, #728]	; (8008210 <_dtoa_r+0x648>)
 8007f38:	b957      	cbnz	r7, 8007f50 <_dtoa_r+0x388>
 8007f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f3e:	ec53 2b18 	vmov	r2, r3, d8
 8007f42:	f7f8 fc8b 	bl	800085c <__aeabi_ddiv>
 8007f46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f4a:	e029      	b.n	8007fa0 <_dtoa_r+0x3d8>
 8007f4c:	2502      	movs	r5, #2
 8007f4e:	e7f2      	b.n	8007f36 <_dtoa_r+0x36e>
 8007f50:	07f9      	lsls	r1, r7, #31
 8007f52:	d508      	bpl.n	8007f66 <_dtoa_r+0x39e>
 8007f54:	ec51 0b18 	vmov	r0, r1, d8
 8007f58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f5c:	f7f8 fb54 	bl	8000608 <__aeabi_dmul>
 8007f60:	ec41 0b18 	vmov	d8, r0, r1
 8007f64:	3501      	adds	r5, #1
 8007f66:	107f      	asrs	r7, r7, #1
 8007f68:	3608      	adds	r6, #8
 8007f6a:	e7e5      	b.n	8007f38 <_dtoa_r+0x370>
 8007f6c:	f000 80a6 	beq.w	80080bc <_dtoa_r+0x4f4>
 8007f70:	f1ca 0600 	rsb	r6, sl, #0
 8007f74:	4ba5      	ldr	r3, [pc, #660]	; (800820c <_dtoa_r+0x644>)
 8007f76:	4fa6      	ldr	r7, [pc, #664]	; (8008210 <_dtoa_r+0x648>)
 8007f78:	f006 020f 	and.w	r2, r6, #15
 8007f7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f88:	f7f8 fb3e 	bl	8000608 <__aeabi_dmul>
 8007f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f90:	1136      	asrs	r6, r6, #4
 8007f92:	2300      	movs	r3, #0
 8007f94:	2502      	movs	r5, #2
 8007f96:	2e00      	cmp	r6, #0
 8007f98:	f040 8085 	bne.w	80080a6 <_dtoa_r+0x4de>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1d2      	bne.n	8007f46 <_dtoa_r+0x37e>
 8007fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 808c 	beq.w	80080c0 <_dtoa_r+0x4f8>
 8007fa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fac:	4b99      	ldr	r3, [pc, #612]	; (8008214 <_dtoa_r+0x64c>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	4639      	mov	r1, r7
 8007fb4:	f7f8 fd9a 	bl	8000aec <__aeabi_dcmplt>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	f000 8081 	beq.w	80080c0 <_dtoa_r+0x4f8>
 8007fbe:	9b01      	ldr	r3, [sp, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d07d      	beq.n	80080c0 <_dtoa_r+0x4f8>
 8007fc4:	f1b9 0f00 	cmp.w	r9, #0
 8007fc8:	dd3c      	ble.n	8008044 <_dtoa_r+0x47c>
 8007fca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007fce:	9307      	str	r3, [sp, #28]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4b91      	ldr	r3, [pc, #580]	; (8008218 <_dtoa_r+0x650>)
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	4639      	mov	r1, r7
 8007fd8:	f7f8 fb16 	bl	8000608 <__aeabi_dmul>
 8007fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe0:	3501      	adds	r5, #1
 8007fe2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007fe6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fea:	4628      	mov	r0, r5
 8007fec:	f7f8 faa2 	bl	8000534 <__aeabi_i2d>
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	463b      	mov	r3, r7
 8007ff4:	f7f8 fb08 	bl	8000608 <__aeabi_dmul>
 8007ff8:	4b88      	ldr	r3, [pc, #544]	; (800821c <_dtoa_r+0x654>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f7f8 f94e 	bl	800029c <__adddf3>
 8008000:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008008:	9303      	str	r3, [sp, #12]
 800800a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800800c:	2b00      	cmp	r3, #0
 800800e:	d15c      	bne.n	80080ca <_dtoa_r+0x502>
 8008010:	4b83      	ldr	r3, [pc, #524]	; (8008220 <_dtoa_r+0x658>)
 8008012:	2200      	movs	r2, #0
 8008014:	4630      	mov	r0, r6
 8008016:	4639      	mov	r1, r7
 8008018:	f7f8 f93e 	bl	8000298 <__aeabi_dsub>
 800801c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008020:	4606      	mov	r6, r0
 8008022:	460f      	mov	r7, r1
 8008024:	f7f8 fd80 	bl	8000b28 <__aeabi_dcmpgt>
 8008028:	2800      	cmp	r0, #0
 800802a:	f040 8296 	bne.w	800855a <_dtoa_r+0x992>
 800802e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008032:	4630      	mov	r0, r6
 8008034:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008038:	4639      	mov	r1, r7
 800803a:	f7f8 fd57 	bl	8000aec <__aeabi_dcmplt>
 800803e:	2800      	cmp	r0, #0
 8008040:	f040 8288 	bne.w	8008554 <_dtoa_r+0x98c>
 8008044:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008048:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800804c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800804e:	2b00      	cmp	r3, #0
 8008050:	f2c0 8158 	blt.w	8008304 <_dtoa_r+0x73c>
 8008054:	f1ba 0f0e 	cmp.w	sl, #14
 8008058:	f300 8154 	bgt.w	8008304 <_dtoa_r+0x73c>
 800805c:	4b6b      	ldr	r3, [pc, #428]	; (800820c <_dtoa_r+0x644>)
 800805e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008062:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008068:	2b00      	cmp	r3, #0
 800806a:	f280 80e3 	bge.w	8008234 <_dtoa_r+0x66c>
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	f300 80df 	bgt.w	8008234 <_dtoa_r+0x66c>
 8008076:	f040 826d 	bne.w	8008554 <_dtoa_r+0x98c>
 800807a:	4b69      	ldr	r3, [pc, #420]	; (8008220 <_dtoa_r+0x658>)
 800807c:	2200      	movs	r2, #0
 800807e:	4640      	mov	r0, r8
 8008080:	4649      	mov	r1, r9
 8008082:	f7f8 fac1 	bl	8000608 <__aeabi_dmul>
 8008086:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800808a:	f7f8 fd43 	bl	8000b14 <__aeabi_dcmpge>
 800808e:	9e01      	ldr	r6, [sp, #4]
 8008090:	4637      	mov	r7, r6
 8008092:	2800      	cmp	r0, #0
 8008094:	f040 8243 	bne.w	800851e <_dtoa_r+0x956>
 8008098:	9d00      	ldr	r5, [sp, #0]
 800809a:	2331      	movs	r3, #49	; 0x31
 800809c:	f805 3b01 	strb.w	r3, [r5], #1
 80080a0:	f10a 0a01 	add.w	sl, sl, #1
 80080a4:	e23f      	b.n	8008526 <_dtoa_r+0x95e>
 80080a6:	07f2      	lsls	r2, r6, #31
 80080a8:	d505      	bpl.n	80080b6 <_dtoa_r+0x4ee>
 80080aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ae:	f7f8 faab 	bl	8000608 <__aeabi_dmul>
 80080b2:	3501      	adds	r5, #1
 80080b4:	2301      	movs	r3, #1
 80080b6:	1076      	asrs	r6, r6, #1
 80080b8:	3708      	adds	r7, #8
 80080ba:	e76c      	b.n	8007f96 <_dtoa_r+0x3ce>
 80080bc:	2502      	movs	r5, #2
 80080be:	e76f      	b.n	8007fa0 <_dtoa_r+0x3d8>
 80080c0:	9b01      	ldr	r3, [sp, #4]
 80080c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80080c6:	930c      	str	r3, [sp, #48]	; 0x30
 80080c8:	e78d      	b.n	8007fe6 <_dtoa_r+0x41e>
 80080ca:	9900      	ldr	r1, [sp, #0]
 80080cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80080ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080d0:	4b4e      	ldr	r3, [pc, #312]	; (800820c <_dtoa_r+0x644>)
 80080d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080d6:	4401      	add	r1, r0
 80080d8:	9102      	str	r1, [sp, #8]
 80080da:	9908      	ldr	r1, [sp, #32]
 80080dc:	eeb0 8a47 	vmov.f32	s16, s14
 80080e0:	eef0 8a67 	vmov.f32	s17, s15
 80080e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080ec:	2900      	cmp	r1, #0
 80080ee:	d045      	beq.n	800817c <_dtoa_r+0x5b4>
 80080f0:	494c      	ldr	r1, [pc, #304]	; (8008224 <_dtoa_r+0x65c>)
 80080f2:	2000      	movs	r0, #0
 80080f4:	f7f8 fbb2 	bl	800085c <__aeabi_ddiv>
 80080f8:	ec53 2b18 	vmov	r2, r3, d8
 80080fc:	f7f8 f8cc 	bl	8000298 <__aeabi_dsub>
 8008100:	9d00      	ldr	r5, [sp, #0]
 8008102:	ec41 0b18 	vmov	d8, r0, r1
 8008106:	4639      	mov	r1, r7
 8008108:	4630      	mov	r0, r6
 800810a:	f7f8 fd2d 	bl	8000b68 <__aeabi_d2iz>
 800810e:	900c      	str	r0, [sp, #48]	; 0x30
 8008110:	f7f8 fa10 	bl	8000534 <__aeabi_i2d>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	4630      	mov	r0, r6
 800811a:	4639      	mov	r1, r7
 800811c:	f7f8 f8bc 	bl	8000298 <__aeabi_dsub>
 8008120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008122:	3330      	adds	r3, #48	; 0x30
 8008124:	f805 3b01 	strb.w	r3, [r5], #1
 8008128:	ec53 2b18 	vmov	r2, r3, d8
 800812c:	4606      	mov	r6, r0
 800812e:	460f      	mov	r7, r1
 8008130:	f7f8 fcdc 	bl	8000aec <__aeabi_dcmplt>
 8008134:	2800      	cmp	r0, #0
 8008136:	d165      	bne.n	8008204 <_dtoa_r+0x63c>
 8008138:	4632      	mov	r2, r6
 800813a:	463b      	mov	r3, r7
 800813c:	4935      	ldr	r1, [pc, #212]	; (8008214 <_dtoa_r+0x64c>)
 800813e:	2000      	movs	r0, #0
 8008140:	f7f8 f8aa 	bl	8000298 <__aeabi_dsub>
 8008144:	ec53 2b18 	vmov	r2, r3, d8
 8008148:	f7f8 fcd0 	bl	8000aec <__aeabi_dcmplt>
 800814c:	2800      	cmp	r0, #0
 800814e:	f040 80b9 	bne.w	80082c4 <_dtoa_r+0x6fc>
 8008152:	9b02      	ldr	r3, [sp, #8]
 8008154:	429d      	cmp	r5, r3
 8008156:	f43f af75 	beq.w	8008044 <_dtoa_r+0x47c>
 800815a:	4b2f      	ldr	r3, [pc, #188]	; (8008218 <_dtoa_r+0x650>)
 800815c:	ec51 0b18 	vmov	r0, r1, d8
 8008160:	2200      	movs	r2, #0
 8008162:	f7f8 fa51 	bl	8000608 <__aeabi_dmul>
 8008166:	4b2c      	ldr	r3, [pc, #176]	; (8008218 <_dtoa_r+0x650>)
 8008168:	ec41 0b18 	vmov	d8, r0, r1
 800816c:	2200      	movs	r2, #0
 800816e:	4630      	mov	r0, r6
 8008170:	4639      	mov	r1, r7
 8008172:	f7f8 fa49 	bl	8000608 <__aeabi_dmul>
 8008176:	4606      	mov	r6, r0
 8008178:	460f      	mov	r7, r1
 800817a:	e7c4      	b.n	8008106 <_dtoa_r+0x53e>
 800817c:	ec51 0b17 	vmov	r0, r1, d7
 8008180:	f7f8 fa42 	bl	8000608 <__aeabi_dmul>
 8008184:	9b02      	ldr	r3, [sp, #8]
 8008186:	9d00      	ldr	r5, [sp, #0]
 8008188:	930c      	str	r3, [sp, #48]	; 0x30
 800818a:	ec41 0b18 	vmov	d8, r0, r1
 800818e:	4639      	mov	r1, r7
 8008190:	4630      	mov	r0, r6
 8008192:	f7f8 fce9 	bl	8000b68 <__aeabi_d2iz>
 8008196:	9011      	str	r0, [sp, #68]	; 0x44
 8008198:	f7f8 f9cc 	bl	8000534 <__aeabi_i2d>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4630      	mov	r0, r6
 80081a2:	4639      	mov	r1, r7
 80081a4:	f7f8 f878 	bl	8000298 <__aeabi_dsub>
 80081a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081aa:	3330      	adds	r3, #48	; 0x30
 80081ac:	f805 3b01 	strb.w	r3, [r5], #1
 80081b0:	9b02      	ldr	r3, [sp, #8]
 80081b2:	429d      	cmp	r5, r3
 80081b4:	4606      	mov	r6, r0
 80081b6:	460f      	mov	r7, r1
 80081b8:	f04f 0200 	mov.w	r2, #0
 80081bc:	d134      	bne.n	8008228 <_dtoa_r+0x660>
 80081be:	4b19      	ldr	r3, [pc, #100]	; (8008224 <_dtoa_r+0x65c>)
 80081c0:	ec51 0b18 	vmov	r0, r1, d8
 80081c4:	f7f8 f86a 	bl	800029c <__adddf3>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	4630      	mov	r0, r6
 80081ce:	4639      	mov	r1, r7
 80081d0:	f7f8 fcaa 	bl	8000b28 <__aeabi_dcmpgt>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d175      	bne.n	80082c4 <_dtoa_r+0x6fc>
 80081d8:	ec53 2b18 	vmov	r2, r3, d8
 80081dc:	4911      	ldr	r1, [pc, #68]	; (8008224 <_dtoa_r+0x65c>)
 80081de:	2000      	movs	r0, #0
 80081e0:	f7f8 f85a 	bl	8000298 <__aeabi_dsub>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4630      	mov	r0, r6
 80081ea:	4639      	mov	r1, r7
 80081ec:	f7f8 fc7e 	bl	8000aec <__aeabi_dcmplt>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	f43f af27 	beq.w	8008044 <_dtoa_r+0x47c>
 80081f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081f8:	1e6b      	subs	r3, r5, #1
 80081fa:	930c      	str	r3, [sp, #48]	; 0x30
 80081fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008200:	2b30      	cmp	r3, #48	; 0x30
 8008202:	d0f8      	beq.n	80081f6 <_dtoa_r+0x62e>
 8008204:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008208:	e04a      	b.n	80082a0 <_dtoa_r+0x6d8>
 800820a:	bf00      	nop
 800820c:	0800a090 	.word	0x0800a090
 8008210:	0800a068 	.word	0x0800a068
 8008214:	3ff00000 	.word	0x3ff00000
 8008218:	40240000 	.word	0x40240000
 800821c:	401c0000 	.word	0x401c0000
 8008220:	40140000 	.word	0x40140000
 8008224:	3fe00000 	.word	0x3fe00000
 8008228:	4baf      	ldr	r3, [pc, #700]	; (80084e8 <_dtoa_r+0x920>)
 800822a:	f7f8 f9ed 	bl	8000608 <__aeabi_dmul>
 800822e:	4606      	mov	r6, r0
 8008230:	460f      	mov	r7, r1
 8008232:	e7ac      	b.n	800818e <_dtoa_r+0x5c6>
 8008234:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008238:	9d00      	ldr	r5, [sp, #0]
 800823a:	4642      	mov	r2, r8
 800823c:	464b      	mov	r3, r9
 800823e:	4630      	mov	r0, r6
 8008240:	4639      	mov	r1, r7
 8008242:	f7f8 fb0b 	bl	800085c <__aeabi_ddiv>
 8008246:	f7f8 fc8f 	bl	8000b68 <__aeabi_d2iz>
 800824a:	9002      	str	r0, [sp, #8]
 800824c:	f7f8 f972 	bl	8000534 <__aeabi_i2d>
 8008250:	4642      	mov	r2, r8
 8008252:	464b      	mov	r3, r9
 8008254:	f7f8 f9d8 	bl	8000608 <__aeabi_dmul>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4630      	mov	r0, r6
 800825e:	4639      	mov	r1, r7
 8008260:	f7f8 f81a 	bl	8000298 <__aeabi_dsub>
 8008264:	9e02      	ldr	r6, [sp, #8]
 8008266:	9f01      	ldr	r7, [sp, #4]
 8008268:	3630      	adds	r6, #48	; 0x30
 800826a:	f805 6b01 	strb.w	r6, [r5], #1
 800826e:	9e00      	ldr	r6, [sp, #0]
 8008270:	1bae      	subs	r6, r5, r6
 8008272:	42b7      	cmp	r7, r6
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	d137      	bne.n	80082ea <_dtoa_r+0x722>
 800827a:	f7f8 f80f 	bl	800029c <__adddf3>
 800827e:	4642      	mov	r2, r8
 8008280:	464b      	mov	r3, r9
 8008282:	4606      	mov	r6, r0
 8008284:	460f      	mov	r7, r1
 8008286:	f7f8 fc4f 	bl	8000b28 <__aeabi_dcmpgt>
 800828a:	b9c8      	cbnz	r0, 80082c0 <_dtoa_r+0x6f8>
 800828c:	4642      	mov	r2, r8
 800828e:	464b      	mov	r3, r9
 8008290:	4630      	mov	r0, r6
 8008292:	4639      	mov	r1, r7
 8008294:	f7f8 fc20 	bl	8000ad8 <__aeabi_dcmpeq>
 8008298:	b110      	cbz	r0, 80082a0 <_dtoa_r+0x6d8>
 800829a:	9b02      	ldr	r3, [sp, #8]
 800829c:	07d9      	lsls	r1, r3, #31
 800829e:	d40f      	bmi.n	80082c0 <_dtoa_r+0x6f8>
 80082a0:	4620      	mov	r0, r4
 80082a2:	4659      	mov	r1, fp
 80082a4:	f000 fac8 	bl	8008838 <_Bfree>
 80082a8:	2300      	movs	r3, #0
 80082aa:	702b      	strb	r3, [r5, #0]
 80082ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082ae:	f10a 0001 	add.w	r0, sl, #1
 80082b2:	6018      	str	r0, [r3, #0]
 80082b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f43f acd8 	beq.w	8007c6c <_dtoa_r+0xa4>
 80082bc:	601d      	str	r5, [r3, #0]
 80082be:	e4d5      	b.n	8007c6c <_dtoa_r+0xa4>
 80082c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80082c4:	462b      	mov	r3, r5
 80082c6:	461d      	mov	r5, r3
 80082c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082cc:	2a39      	cmp	r2, #57	; 0x39
 80082ce:	d108      	bne.n	80082e2 <_dtoa_r+0x71a>
 80082d0:	9a00      	ldr	r2, [sp, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d1f7      	bne.n	80082c6 <_dtoa_r+0x6fe>
 80082d6:	9a07      	ldr	r2, [sp, #28]
 80082d8:	9900      	ldr	r1, [sp, #0]
 80082da:	3201      	adds	r2, #1
 80082dc:	9207      	str	r2, [sp, #28]
 80082de:	2230      	movs	r2, #48	; 0x30
 80082e0:	700a      	strb	r2, [r1, #0]
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	3201      	adds	r2, #1
 80082e6:	701a      	strb	r2, [r3, #0]
 80082e8:	e78c      	b.n	8008204 <_dtoa_r+0x63c>
 80082ea:	4b7f      	ldr	r3, [pc, #508]	; (80084e8 <_dtoa_r+0x920>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	f7f8 f98b 	bl	8000608 <__aeabi_dmul>
 80082f2:	2200      	movs	r2, #0
 80082f4:	2300      	movs	r3, #0
 80082f6:	4606      	mov	r6, r0
 80082f8:	460f      	mov	r7, r1
 80082fa:	f7f8 fbed 	bl	8000ad8 <__aeabi_dcmpeq>
 80082fe:	2800      	cmp	r0, #0
 8008300:	d09b      	beq.n	800823a <_dtoa_r+0x672>
 8008302:	e7cd      	b.n	80082a0 <_dtoa_r+0x6d8>
 8008304:	9a08      	ldr	r2, [sp, #32]
 8008306:	2a00      	cmp	r2, #0
 8008308:	f000 80c4 	beq.w	8008494 <_dtoa_r+0x8cc>
 800830c:	9a05      	ldr	r2, [sp, #20]
 800830e:	2a01      	cmp	r2, #1
 8008310:	f300 80a8 	bgt.w	8008464 <_dtoa_r+0x89c>
 8008314:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008316:	2a00      	cmp	r2, #0
 8008318:	f000 80a0 	beq.w	800845c <_dtoa_r+0x894>
 800831c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008320:	9e06      	ldr	r6, [sp, #24]
 8008322:	4645      	mov	r5, r8
 8008324:	9a04      	ldr	r2, [sp, #16]
 8008326:	2101      	movs	r1, #1
 8008328:	441a      	add	r2, r3
 800832a:	4620      	mov	r0, r4
 800832c:	4498      	add	r8, r3
 800832e:	9204      	str	r2, [sp, #16]
 8008330:	f000 fb3e 	bl	80089b0 <__i2b>
 8008334:	4607      	mov	r7, r0
 8008336:	2d00      	cmp	r5, #0
 8008338:	dd0b      	ble.n	8008352 <_dtoa_r+0x78a>
 800833a:	9b04      	ldr	r3, [sp, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	dd08      	ble.n	8008352 <_dtoa_r+0x78a>
 8008340:	42ab      	cmp	r3, r5
 8008342:	9a04      	ldr	r2, [sp, #16]
 8008344:	bfa8      	it	ge
 8008346:	462b      	movge	r3, r5
 8008348:	eba8 0803 	sub.w	r8, r8, r3
 800834c:	1aed      	subs	r5, r5, r3
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	9304      	str	r3, [sp, #16]
 8008352:	9b06      	ldr	r3, [sp, #24]
 8008354:	b1fb      	cbz	r3, 8008396 <_dtoa_r+0x7ce>
 8008356:	9b08      	ldr	r3, [sp, #32]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 809f 	beq.w	800849c <_dtoa_r+0x8d4>
 800835e:	2e00      	cmp	r6, #0
 8008360:	dd11      	ble.n	8008386 <_dtoa_r+0x7be>
 8008362:	4639      	mov	r1, r7
 8008364:	4632      	mov	r2, r6
 8008366:	4620      	mov	r0, r4
 8008368:	f000 fbde 	bl	8008b28 <__pow5mult>
 800836c:	465a      	mov	r2, fp
 800836e:	4601      	mov	r1, r0
 8008370:	4607      	mov	r7, r0
 8008372:	4620      	mov	r0, r4
 8008374:	f000 fb32 	bl	80089dc <__multiply>
 8008378:	4659      	mov	r1, fp
 800837a:	9007      	str	r0, [sp, #28]
 800837c:	4620      	mov	r0, r4
 800837e:	f000 fa5b 	bl	8008838 <_Bfree>
 8008382:	9b07      	ldr	r3, [sp, #28]
 8008384:	469b      	mov	fp, r3
 8008386:	9b06      	ldr	r3, [sp, #24]
 8008388:	1b9a      	subs	r2, r3, r6
 800838a:	d004      	beq.n	8008396 <_dtoa_r+0x7ce>
 800838c:	4659      	mov	r1, fp
 800838e:	4620      	mov	r0, r4
 8008390:	f000 fbca 	bl	8008b28 <__pow5mult>
 8008394:	4683      	mov	fp, r0
 8008396:	2101      	movs	r1, #1
 8008398:	4620      	mov	r0, r4
 800839a:	f000 fb09 	bl	80089b0 <__i2b>
 800839e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	4606      	mov	r6, r0
 80083a4:	dd7c      	ble.n	80084a0 <_dtoa_r+0x8d8>
 80083a6:	461a      	mov	r2, r3
 80083a8:	4601      	mov	r1, r0
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 fbbc 	bl	8008b28 <__pow5mult>
 80083b0:	9b05      	ldr	r3, [sp, #20]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	4606      	mov	r6, r0
 80083b6:	dd76      	ble.n	80084a6 <_dtoa_r+0x8de>
 80083b8:	2300      	movs	r3, #0
 80083ba:	9306      	str	r3, [sp, #24]
 80083bc:	6933      	ldr	r3, [r6, #16]
 80083be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80083c2:	6918      	ldr	r0, [r3, #16]
 80083c4:	f000 faa4 	bl	8008910 <__hi0bits>
 80083c8:	f1c0 0020 	rsb	r0, r0, #32
 80083cc:	9b04      	ldr	r3, [sp, #16]
 80083ce:	4418      	add	r0, r3
 80083d0:	f010 001f 	ands.w	r0, r0, #31
 80083d4:	f000 8086 	beq.w	80084e4 <_dtoa_r+0x91c>
 80083d8:	f1c0 0320 	rsb	r3, r0, #32
 80083dc:	2b04      	cmp	r3, #4
 80083de:	dd7f      	ble.n	80084e0 <_dtoa_r+0x918>
 80083e0:	f1c0 001c 	rsb	r0, r0, #28
 80083e4:	9b04      	ldr	r3, [sp, #16]
 80083e6:	4403      	add	r3, r0
 80083e8:	4480      	add	r8, r0
 80083ea:	4405      	add	r5, r0
 80083ec:	9304      	str	r3, [sp, #16]
 80083ee:	f1b8 0f00 	cmp.w	r8, #0
 80083f2:	dd05      	ble.n	8008400 <_dtoa_r+0x838>
 80083f4:	4659      	mov	r1, fp
 80083f6:	4642      	mov	r2, r8
 80083f8:	4620      	mov	r0, r4
 80083fa:	f000 fbef 	bl	8008bdc <__lshift>
 80083fe:	4683      	mov	fp, r0
 8008400:	9b04      	ldr	r3, [sp, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	dd05      	ble.n	8008412 <_dtoa_r+0x84a>
 8008406:	4631      	mov	r1, r6
 8008408:	461a      	mov	r2, r3
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fbe6 	bl	8008bdc <__lshift>
 8008410:	4606      	mov	r6, r0
 8008412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008414:	2b00      	cmp	r3, #0
 8008416:	d069      	beq.n	80084ec <_dtoa_r+0x924>
 8008418:	4631      	mov	r1, r6
 800841a:	4658      	mov	r0, fp
 800841c:	f000 fc4a 	bl	8008cb4 <__mcmp>
 8008420:	2800      	cmp	r0, #0
 8008422:	da63      	bge.n	80084ec <_dtoa_r+0x924>
 8008424:	2300      	movs	r3, #0
 8008426:	4659      	mov	r1, fp
 8008428:	220a      	movs	r2, #10
 800842a:	4620      	mov	r0, r4
 800842c:	f000 fa26 	bl	800887c <__multadd>
 8008430:	9b08      	ldr	r3, [sp, #32]
 8008432:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008436:	4683      	mov	fp, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 818f 	beq.w	800875c <_dtoa_r+0xb94>
 800843e:	4639      	mov	r1, r7
 8008440:	2300      	movs	r3, #0
 8008442:	220a      	movs	r2, #10
 8008444:	4620      	mov	r0, r4
 8008446:	f000 fa19 	bl	800887c <__multadd>
 800844a:	f1b9 0f00 	cmp.w	r9, #0
 800844e:	4607      	mov	r7, r0
 8008450:	f300 808e 	bgt.w	8008570 <_dtoa_r+0x9a8>
 8008454:	9b05      	ldr	r3, [sp, #20]
 8008456:	2b02      	cmp	r3, #2
 8008458:	dc50      	bgt.n	80084fc <_dtoa_r+0x934>
 800845a:	e089      	b.n	8008570 <_dtoa_r+0x9a8>
 800845c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800845e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008462:	e75d      	b.n	8008320 <_dtoa_r+0x758>
 8008464:	9b01      	ldr	r3, [sp, #4]
 8008466:	1e5e      	subs	r6, r3, #1
 8008468:	9b06      	ldr	r3, [sp, #24]
 800846a:	42b3      	cmp	r3, r6
 800846c:	bfbf      	itttt	lt
 800846e:	9b06      	ldrlt	r3, [sp, #24]
 8008470:	9606      	strlt	r6, [sp, #24]
 8008472:	1af2      	sublt	r2, r6, r3
 8008474:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008476:	bfb6      	itet	lt
 8008478:	189b      	addlt	r3, r3, r2
 800847a:	1b9e      	subge	r6, r3, r6
 800847c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800847e:	9b01      	ldr	r3, [sp, #4]
 8008480:	bfb8      	it	lt
 8008482:	2600      	movlt	r6, #0
 8008484:	2b00      	cmp	r3, #0
 8008486:	bfb5      	itete	lt
 8008488:	eba8 0503 	sublt.w	r5, r8, r3
 800848c:	9b01      	ldrge	r3, [sp, #4]
 800848e:	2300      	movlt	r3, #0
 8008490:	4645      	movge	r5, r8
 8008492:	e747      	b.n	8008324 <_dtoa_r+0x75c>
 8008494:	9e06      	ldr	r6, [sp, #24]
 8008496:	9f08      	ldr	r7, [sp, #32]
 8008498:	4645      	mov	r5, r8
 800849a:	e74c      	b.n	8008336 <_dtoa_r+0x76e>
 800849c:	9a06      	ldr	r2, [sp, #24]
 800849e:	e775      	b.n	800838c <_dtoa_r+0x7c4>
 80084a0:	9b05      	ldr	r3, [sp, #20]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	dc18      	bgt.n	80084d8 <_dtoa_r+0x910>
 80084a6:	9b02      	ldr	r3, [sp, #8]
 80084a8:	b9b3      	cbnz	r3, 80084d8 <_dtoa_r+0x910>
 80084aa:	9b03      	ldr	r3, [sp, #12]
 80084ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084b0:	b9a3      	cbnz	r3, 80084dc <_dtoa_r+0x914>
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084b8:	0d1b      	lsrs	r3, r3, #20
 80084ba:	051b      	lsls	r3, r3, #20
 80084bc:	b12b      	cbz	r3, 80084ca <_dtoa_r+0x902>
 80084be:	9b04      	ldr	r3, [sp, #16]
 80084c0:	3301      	adds	r3, #1
 80084c2:	9304      	str	r3, [sp, #16]
 80084c4:	f108 0801 	add.w	r8, r8, #1
 80084c8:	2301      	movs	r3, #1
 80084ca:	9306      	str	r3, [sp, #24]
 80084cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f47f af74 	bne.w	80083bc <_dtoa_r+0x7f4>
 80084d4:	2001      	movs	r0, #1
 80084d6:	e779      	b.n	80083cc <_dtoa_r+0x804>
 80084d8:	2300      	movs	r3, #0
 80084da:	e7f6      	b.n	80084ca <_dtoa_r+0x902>
 80084dc:	9b02      	ldr	r3, [sp, #8]
 80084de:	e7f4      	b.n	80084ca <_dtoa_r+0x902>
 80084e0:	d085      	beq.n	80083ee <_dtoa_r+0x826>
 80084e2:	4618      	mov	r0, r3
 80084e4:	301c      	adds	r0, #28
 80084e6:	e77d      	b.n	80083e4 <_dtoa_r+0x81c>
 80084e8:	40240000 	.word	0x40240000
 80084ec:	9b01      	ldr	r3, [sp, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	dc38      	bgt.n	8008564 <_dtoa_r+0x99c>
 80084f2:	9b05      	ldr	r3, [sp, #20]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	dd35      	ble.n	8008564 <_dtoa_r+0x99c>
 80084f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80084fc:	f1b9 0f00 	cmp.w	r9, #0
 8008500:	d10d      	bne.n	800851e <_dtoa_r+0x956>
 8008502:	4631      	mov	r1, r6
 8008504:	464b      	mov	r3, r9
 8008506:	2205      	movs	r2, #5
 8008508:	4620      	mov	r0, r4
 800850a:	f000 f9b7 	bl	800887c <__multadd>
 800850e:	4601      	mov	r1, r0
 8008510:	4606      	mov	r6, r0
 8008512:	4658      	mov	r0, fp
 8008514:	f000 fbce 	bl	8008cb4 <__mcmp>
 8008518:	2800      	cmp	r0, #0
 800851a:	f73f adbd 	bgt.w	8008098 <_dtoa_r+0x4d0>
 800851e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008520:	9d00      	ldr	r5, [sp, #0]
 8008522:	ea6f 0a03 	mvn.w	sl, r3
 8008526:	f04f 0800 	mov.w	r8, #0
 800852a:	4631      	mov	r1, r6
 800852c:	4620      	mov	r0, r4
 800852e:	f000 f983 	bl	8008838 <_Bfree>
 8008532:	2f00      	cmp	r7, #0
 8008534:	f43f aeb4 	beq.w	80082a0 <_dtoa_r+0x6d8>
 8008538:	f1b8 0f00 	cmp.w	r8, #0
 800853c:	d005      	beq.n	800854a <_dtoa_r+0x982>
 800853e:	45b8      	cmp	r8, r7
 8008540:	d003      	beq.n	800854a <_dtoa_r+0x982>
 8008542:	4641      	mov	r1, r8
 8008544:	4620      	mov	r0, r4
 8008546:	f000 f977 	bl	8008838 <_Bfree>
 800854a:	4639      	mov	r1, r7
 800854c:	4620      	mov	r0, r4
 800854e:	f000 f973 	bl	8008838 <_Bfree>
 8008552:	e6a5      	b.n	80082a0 <_dtoa_r+0x6d8>
 8008554:	2600      	movs	r6, #0
 8008556:	4637      	mov	r7, r6
 8008558:	e7e1      	b.n	800851e <_dtoa_r+0x956>
 800855a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800855c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008560:	4637      	mov	r7, r6
 8008562:	e599      	b.n	8008098 <_dtoa_r+0x4d0>
 8008564:	9b08      	ldr	r3, [sp, #32]
 8008566:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80fd 	beq.w	800876a <_dtoa_r+0xba2>
 8008570:	2d00      	cmp	r5, #0
 8008572:	dd05      	ble.n	8008580 <_dtoa_r+0x9b8>
 8008574:	4639      	mov	r1, r7
 8008576:	462a      	mov	r2, r5
 8008578:	4620      	mov	r0, r4
 800857a:	f000 fb2f 	bl	8008bdc <__lshift>
 800857e:	4607      	mov	r7, r0
 8008580:	9b06      	ldr	r3, [sp, #24]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d05c      	beq.n	8008640 <_dtoa_r+0xa78>
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4620      	mov	r0, r4
 800858a:	f000 f915 	bl	80087b8 <_Balloc>
 800858e:	4605      	mov	r5, r0
 8008590:	b928      	cbnz	r0, 800859e <_dtoa_r+0x9d6>
 8008592:	4b80      	ldr	r3, [pc, #512]	; (8008794 <_dtoa_r+0xbcc>)
 8008594:	4602      	mov	r2, r0
 8008596:	f240 21ea 	movw	r1, #746	; 0x2ea
 800859a:	f7ff bb2e 	b.w	8007bfa <_dtoa_r+0x32>
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	3202      	adds	r2, #2
 80085a2:	0092      	lsls	r2, r2, #2
 80085a4:	f107 010c 	add.w	r1, r7, #12
 80085a8:	300c      	adds	r0, #12
 80085aa:	f7fe fde1 	bl	8007170 <memcpy>
 80085ae:	2201      	movs	r2, #1
 80085b0:	4629      	mov	r1, r5
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 fb12 	bl	8008bdc <__lshift>
 80085b8:	9b00      	ldr	r3, [sp, #0]
 80085ba:	3301      	adds	r3, #1
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	9b00      	ldr	r3, [sp, #0]
 80085c0:	444b      	add	r3, r9
 80085c2:	9307      	str	r3, [sp, #28]
 80085c4:	9b02      	ldr	r3, [sp, #8]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	46b8      	mov	r8, r7
 80085cc:	9306      	str	r3, [sp, #24]
 80085ce:	4607      	mov	r7, r0
 80085d0:	9b01      	ldr	r3, [sp, #4]
 80085d2:	4631      	mov	r1, r6
 80085d4:	3b01      	subs	r3, #1
 80085d6:	4658      	mov	r0, fp
 80085d8:	9302      	str	r3, [sp, #8]
 80085da:	f7ff fa69 	bl	8007ab0 <quorem>
 80085de:	4603      	mov	r3, r0
 80085e0:	3330      	adds	r3, #48	; 0x30
 80085e2:	9004      	str	r0, [sp, #16]
 80085e4:	4641      	mov	r1, r8
 80085e6:	4658      	mov	r0, fp
 80085e8:	9308      	str	r3, [sp, #32]
 80085ea:	f000 fb63 	bl	8008cb4 <__mcmp>
 80085ee:	463a      	mov	r2, r7
 80085f0:	4681      	mov	r9, r0
 80085f2:	4631      	mov	r1, r6
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 fb79 	bl	8008cec <__mdiff>
 80085fa:	68c2      	ldr	r2, [r0, #12]
 80085fc:	9b08      	ldr	r3, [sp, #32]
 80085fe:	4605      	mov	r5, r0
 8008600:	bb02      	cbnz	r2, 8008644 <_dtoa_r+0xa7c>
 8008602:	4601      	mov	r1, r0
 8008604:	4658      	mov	r0, fp
 8008606:	f000 fb55 	bl	8008cb4 <__mcmp>
 800860a:	9b08      	ldr	r3, [sp, #32]
 800860c:	4602      	mov	r2, r0
 800860e:	4629      	mov	r1, r5
 8008610:	4620      	mov	r0, r4
 8008612:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008616:	f000 f90f 	bl	8008838 <_Bfree>
 800861a:	9b05      	ldr	r3, [sp, #20]
 800861c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800861e:	9d01      	ldr	r5, [sp, #4]
 8008620:	ea43 0102 	orr.w	r1, r3, r2
 8008624:	9b06      	ldr	r3, [sp, #24]
 8008626:	430b      	orrs	r3, r1
 8008628:	9b08      	ldr	r3, [sp, #32]
 800862a:	d10d      	bne.n	8008648 <_dtoa_r+0xa80>
 800862c:	2b39      	cmp	r3, #57	; 0x39
 800862e:	d029      	beq.n	8008684 <_dtoa_r+0xabc>
 8008630:	f1b9 0f00 	cmp.w	r9, #0
 8008634:	dd01      	ble.n	800863a <_dtoa_r+0xa72>
 8008636:	9b04      	ldr	r3, [sp, #16]
 8008638:	3331      	adds	r3, #49	; 0x31
 800863a:	9a02      	ldr	r2, [sp, #8]
 800863c:	7013      	strb	r3, [r2, #0]
 800863e:	e774      	b.n	800852a <_dtoa_r+0x962>
 8008640:	4638      	mov	r0, r7
 8008642:	e7b9      	b.n	80085b8 <_dtoa_r+0x9f0>
 8008644:	2201      	movs	r2, #1
 8008646:	e7e2      	b.n	800860e <_dtoa_r+0xa46>
 8008648:	f1b9 0f00 	cmp.w	r9, #0
 800864c:	db06      	blt.n	800865c <_dtoa_r+0xa94>
 800864e:	9905      	ldr	r1, [sp, #20]
 8008650:	ea41 0909 	orr.w	r9, r1, r9
 8008654:	9906      	ldr	r1, [sp, #24]
 8008656:	ea59 0101 	orrs.w	r1, r9, r1
 800865a:	d120      	bne.n	800869e <_dtoa_r+0xad6>
 800865c:	2a00      	cmp	r2, #0
 800865e:	ddec      	ble.n	800863a <_dtoa_r+0xa72>
 8008660:	4659      	mov	r1, fp
 8008662:	2201      	movs	r2, #1
 8008664:	4620      	mov	r0, r4
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	f000 fab8 	bl	8008bdc <__lshift>
 800866c:	4631      	mov	r1, r6
 800866e:	4683      	mov	fp, r0
 8008670:	f000 fb20 	bl	8008cb4 <__mcmp>
 8008674:	2800      	cmp	r0, #0
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	dc02      	bgt.n	8008680 <_dtoa_r+0xab8>
 800867a:	d1de      	bne.n	800863a <_dtoa_r+0xa72>
 800867c:	07da      	lsls	r2, r3, #31
 800867e:	d5dc      	bpl.n	800863a <_dtoa_r+0xa72>
 8008680:	2b39      	cmp	r3, #57	; 0x39
 8008682:	d1d8      	bne.n	8008636 <_dtoa_r+0xa6e>
 8008684:	9a02      	ldr	r2, [sp, #8]
 8008686:	2339      	movs	r3, #57	; 0x39
 8008688:	7013      	strb	r3, [r2, #0]
 800868a:	462b      	mov	r3, r5
 800868c:	461d      	mov	r5, r3
 800868e:	3b01      	subs	r3, #1
 8008690:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008694:	2a39      	cmp	r2, #57	; 0x39
 8008696:	d050      	beq.n	800873a <_dtoa_r+0xb72>
 8008698:	3201      	adds	r2, #1
 800869a:	701a      	strb	r2, [r3, #0]
 800869c:	e745      	b.n	800852a <_dtoa_r+0x962>
 800869e:	2a00      	cmp	r2, #0
 80086a0:	dd03      	ble.n	80086aa <_dtoa_r+0xae2>
 80086a2:	2b39      	cmp	r3, #57	; 0x39
 80086a4:	d0ee      	beq.n	8008684 <_dtoa_r+0xabc>
 80086a6:	3301      	adds	r3, #1
 80086a8:	e7c7      	b.n	800863a <_dtoa_r+0xa72>
 80086aa:	9a01      	ldr	r2, [sp, #4]
 80086ac:	9907      	ldr	r1, [sp, #28]
 80086ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086b2:	428a      	cmp	r2, r1
 80086b4:	d02a      	beq.n	800870c <_dtoa_r+0xb44>
 80086b6:	4659      	mov	r1, fp
 80086b8:	2300      	movs	r3, #0
 80086ba:	220a      	movs	r2, #10
 80086bc:	4620      	mov	r0, r4
 80086be:	f000 f8dd 	bl	800887c <__multadd>
 80086c2:	45b8      	cmp	r8, r7
 80086c4:	4683      	mov	fp, r0
 80086c6:	f04f 0300 	mov.w	r3, #0
 80086ca:	f04f 020a 	mov.w	r2, #10
 80086ce:	4641      	mov	r1, r8
 80086d0:	4620      	mov	r0, r4
 80086d2:	d107      	bne.n	80086e4 <_dtoa_r+0xb1c>
 80086d4:	f000 f8d2 	bl	800887c <__multadd>
 80086d8:	4680      	mov	r8, r0
 80086da:	4607      	mov	r7, r0
 80086dc:	9b01      	ldr	r3, [sp, #4]
 80086de:	3301      	adds	r3, #1
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	e775      	b.n	80085d0 <_dtoa_r+0xa08>
 80086e4:	f000 f8ca 	bl	800887c <__multadd>
 80086e8:	4639      	mov	r1, r7
 80086ea:	4680      	mov	r8, r0
 80086ec:	2300      	movs	r3, #0
 80086ee:	220a      	movs	r2, #10
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 f8c3 	bl	800887c <__multadd>
 80086f6:	4607      	mov	r7, r0
 80086f8:	e7f0      	b.n	80086dc <_dtoa_r+0xb14>
 80086fa:	f1b9 0f00 	cmp.w	r9, #0
 80086fe:	9a00      	ldr	r2, [sp, #0]
 8008700:	bfcc      	ite	gt
 8008702:	464d      	movgt	r5, r9
 8008704:	2501      	movle	r5, #1
 8008706:	4415      	add	r5, r2
 8008708:	f04f 0800 	mov.w	r8, #0
 800870c:	4659      	mov	r1, fp
 800870e:	2201      	movs	r2, #1
 8008710:	4620      	mov	r0, r4
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	f000 fa62 	bl	8008bdc <__lshift>
 8008718:	4631      	mov	r1, r6
 800871a:	4683      	mov	fp, r0
 800871c:	f000 faca 	bl	8008cb4 <__mcmp>
 8008720:	2800      	cmp	r0, #0
 8008722:	dcb2      	bgt.n	800868a <_dtoa_r+0xac2>
 8008724:	d102      	bne.n	800872c <_dtoa_r+0xb64>
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	07db      	lsls	r3, r3, #31
 800872a:	d4ae      	bmi.n	800868a <_dtoa_r+0xac2>
 800872c:	462b      	mov	r3, r5
 800872e:	461d      	mov	r5, r3
 8008730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008734:	2a30      	cmp	r2, #48	; 0x30
 8008736:	d0fa      	beq.n	800872e <_dtoa_r+0xb66>
 8008738:	e6f7      	b.n	800852a <_dtoa_r+0x962>
 800873a:	9a00      	ldr	r2, [sp, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d1a5      	bne.n	800868c <_dtoa_r+0xac4>
 8008740:	f10a 0a01 	add.w	sl, sl, #1
 8008744:	2331      	movs	r3, #49	; 0x31
 8008746:	e779      	b.n	800863c <_dtoa_r+0xa74>
 8008748:	4b13      	ldr	r3, [pc, #76]	; (8008798 <_dtoa_r+0xbd0>)
 800874a:	f7ff baaf 	b.w	8007cac <_dtoa_r+0xe4>
 800874e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008750:	2b00      	cmp	r3, #0
 8008752:	f47f aa86 	bne.w	8007c62 <_dtoa_r+0x9a>
 8008756:	4b11      	ldr	r3, [pc, #68]	; (800879c <_dtoa_r+0xbd4>)
 8008758:	f7ff baa8 	b.w	8007cac <_dtoa_r+0xe4>
 800875c:	f1b9 0f00 	cmp.w	r9, #0
 8008760:	dc03      	bgt.n	800876a <_dtoa_r+0xba2>
 8008762:	9b05      	ldr	r3, [sp, #20]
 8008764:	2b02      	cmp	r3, #2
 8008766:	f73f aec9 	bgt.w	80084fc <_dtoa_r+0x934>
 800876a:	9d00      	ldr	r5, [sp, #0]
 800876c:	4631      	mov	r1, r6
 800876e:	4658      	mov	r0, fp
 8008770:	f7ff f99e 	bl	8007ab0 <quorem>
 8008774:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008778:	f805 3b01 	strb.w	r3, [r5], #1
 800877c:	9a00      	ldr	r2, [sp, #0]
 800877e:	1aaa      	subs	r2, r5, r2
 8008780:	4591      	cmp	r9, r2
 8008782:	ddba      	ble.n	80086fa <_dtoa_r+0xb32>
 8008784:	4659      	mov	r1, fp
 8008786:	2300      	movs	r3, #0
 8008788:	220a      	movs	r2, #10
 800878a:	4620      	mov	r0, r4
 800878c:	f000 f876 	bl	800887c <__multadd>
 8008790:	4683      	mov	fp, r0
 8008792:	e7eb      	b.n	800876c <_dtoa_r+0xba4>
 8008794:	08009ff7 	.word	0x08009ff7
 8008798:	08009f50 	.word	0x08009f50
 800879c:	08009f74 	.word	0x08009f74

080087a0 <_localeconv_r>:
 80087a0:	4800      	ldr	r0, [pc, #0]	; (80087a4 <_localeconv_r+0x4>)
 80087a2:	4770      	bx	lr
 80087a4:	20000164 	.word	0x20000164

080087a8 <malloc>:
 80087a8:	4b02      	ldr	r3, [pc, #8]	; (80087b4 <malloc+0xc>)
 80087aa:	4601      	mov	r1, r0
 80087ac:	6818      	ldr	r0, [r3, #0]
 80087ae:	f000 bbe1 	b.w	8008f74 <_malloc_r>
 80087b2:	bf00      	nop
 80087b4:	20000010 	.word	0x20000010

080087b8 <_Balloc>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087bc:	4604      	mov	r4, r0
 80087be:	460d      	mov	r5, r1
 80087c0:	b976      	cbnz	r6, 80087e0 <_Balloc+0x28>
 80087c2:	2010      	movs	r0, #16
 80087c4:	f7ff fff0 	bl	80087a8 <malloc>
 80087c8:	4602      	mov	r2, r0
 80087ca:	6260      	str	r0, [r4, #36]	; 0x24
 80087cc:	b920      	cbnz	r0, 80087d8 <_Balloc+0x20>
 80087ce:	4b18      	ldr	r3, [pc, #96]	; (8008830 <_Balloc+0x78>)
 80087d0:	4818      	ldr	r0, [pc, #96]	; (8008834 <_Balloc+0x7c>)
 80087d2:	2166      	movs	r1, #102	; 0x66
 80087d4:	f000 fd94 	bl	8009300 <__assert_func>
 80087d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087dc:	6006      	str	r6, [r0, #0]
 80087de:	60c6      	str	r6, [r0, #12]
 80087e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087e2:	68f3      	ldr	r3, [r6, #12]
 80087e4:	b183      	cbz	r3, 8008808 <_Balloc+0x50>
 80087e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087ee:	b9b8      	cbnz	r0, 8008820 <_Balloc+0x68>
 80087f0:	2101      	movs	r1, #1
 80087f2:	fa01 f605 	lsl.w	r6, r1, r5
 80087f6:	1d72      	adds	r2, r6, #5
 80087f8:	0092      	lsls	r2, r2, #2
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 fb5a 	bl	8008eb4 <_calloc_r>
 8008800:	b160      	cbz	r0, 800881c <_Balloc+0x64>
 8008802:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008806:	e00e      	b.n	8008826 <_Balloc+0x6e>
 8008808:	2221      	movs	r2, #33	; 0x21
 800880a:	2104      	movs	r1, #4
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fb51 	bl	8008eb4 <_calloc_r>
 8008812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008814:	60f0      	str	r0, [r6, #12]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e4      	bne.n	80087e6 <_Balloc+0x2e>
 800881c:	2000      	movs	r0, #0
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	6802      	ldr	r2, [r0, #0]
 8008822:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008826:	2300      	movs	r3, #0
 8008828:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800882c:	e7f7      	b.n	800881e <_Balloc+0x66>
 800882e:	bf00      	nop
 8008830:	08009f81 	.word	0x08009f81
 8008834:	0800a008 	.word	0x0800a008

08008838 <_Bfree>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800883c:	4605      	mov	r5, r0
 800883e:	460c      	mov	r4, r1
 8008840:	b976      	cbnz	r6, 8008860 <_Bfree+0x28>
 8008842:	2010      	movs	r0, #16
 8008844:	f7ff ffb0 	bl	80087a8 <malloc>
 8008848:	4602      	mov	r2, r0
 800884a:	6268      	str	r0, [r5, #36]	; 0x24
 800884c:	b920      	cbnz	r0, 8008858 <_Bfree+0x20>
 800884e:	4b09      	ldr	r3, [pc, #36]	; (8008874 <_Bfree+0x3c>)
 8008850:	4809      	ldr	r0, [pc, #36]	; (8008878 <_Bfree+0x40>)
 8008852:	218a      	movs	r1, #138	; 0x8a
 8008854:	f000 fd54 	bl	8009300 <__assert_func>
 8008858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800885c:	6006      	str	r6, [r0, #0]
 800885e:	60c6      	str	r6, [r0, #12]
 8008860:	b13c      	cbz	r4, 8008872 <_Bfree+0x3a>
 8008862:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008864:	6862      	ldr	r2, [r4, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800886c:	6021      	str	r1, [r4, #0]
 800886e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008872:	bd70      	pop	{r4, r5, r6, pc}
 8008874:	08009f81 	.word	0x08009f81
 8008878:	0800a008 	.word	0x0800a008

0800887c <__multadd>:
 800887c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008880:	690e      	ldr	r6, [r1, #16]
 8008882:	4607      	mov	r7, r0
 8008884:	4698      	mov	r8, r3
 8008886:	460c      	mov	r4, r1
 8008888:	f101 0014 	add.w	r0, r1, #20
 800888c:	2300      	movs	r3, #0
 800888e:	6805      	ldr	r5, [r0, #0]
 8008890:	b2a9      	uxth	r1, r5
 8008892:	fb02 8101 	mla	r1, r2, r1, r8
 8008896:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800889a:	0c2d      	lsrs	r5, r5, #16
 800889c:	fb02 c505 	mla	r5, r2, r5, ip
 80088a0:	b289      	uxth	r1, r1
 80088a2:	3301      	adds	r3, #1
 80088a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80088a8:	429e      	cmp	r6, r3
 80088aa:	f840 1b04 	str.w	r1, [r0], #4
 80088ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80088b2:	dcec      	bgt.n	800888e <__multadd+0x12>
 80088b4:	f1b8 0f00 	cmp.w	r8, #0
 80088b8:	d022      	beq.n	8008900 <__multadd+0x84>
 80088ba:	68a3      	ldr	r3, [r4, #8]
 80088bc:	42b3      	cmp	r3, r6
 80088be:	dc19      	bgt.n	80088f4 <__multadd+0x78>
 80088c0:	6861      	ldr	r1, [r4, #4]
 80088c2:	4638      	mov	r0, r7
 80088c4:	3101      	adds	r1, #1
 80088c6:	f7ff ff77 	bl	80087b8 <_Balloc>
 80088ca:	4605      	mov	r5, r0
 80088cc:	b928      	cbnz	r0, 80088da <__multadd+0x5e>
 80088ce:	4602      	mov	r2, r0
 80088d0:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <__multadd+0x8c>)
 80088d2:	480e      	ldr	r0, [pc, #56]	; (800890c <__multadd+0x90>)
 80088d4:	21b5      	movs	r1, #181	; 0xb5
 80088d6:	f000 fd13 	bl	8009300 <__assert_func>
 80088da:	6922      	ldr	r2, [r4, #16]
 80088dc:	3202      	adds	r2, #2
 80088de:	f104 010c 	add.w	r1, r4, #12
 80088e2:	0092      	lsls	r2, r2, #2
 80088e4:	300c      	adds	r0, #12
 80088e6:	f7fe fc43 	bl	8007170 <memcpy>
 80088ea:	4621      	mov	r1, r4
 80088ec:	4638      	mov	r0, r7
 80088ee:	f7ff ffa3 	bl	8008838 <_Bfree>
 80088f2:	462c      	mov	r4, r5
 80088f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80088f8:	3601      	adds	r6, #1
 80088fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80088fe:	6126      	str	r6, [r4, #16]
 8008900:	4620      	mov	r0, r4
 8008902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008906:	bf00      	nop
 8008908:	08009ff7 	.word	0x08009ff7
 800890c:	0800a008 	.word	0x0800a008

08008910 <__hi0bits>:
 8008910:	0c03      	lsrs	r3, r0, #16
 8008912:	041b      	lsls	r3, r3, #16
 8008914:	b9d3      	cbnz	r3, 800894c <__hi0bits+0x3c>
 8008916:	0400      	lsls	r0, r0, #16
 8008918:	2310      	movs	r3, #16
 800891a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800891e:	bf04      	itt	eq
 8008920:	0200      	lsleq	r0, r0, #8
 8008922:	3308      	addeq	r3, #8
 8008924:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008928:	bf04      	itt	eq
 800892a:	0100      	lsleq	r0, r0, #4
 800892c:	3304      	addeq	r3, #4
 800892e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008932:	bf04      	itt	eq
 8008934:	0080      	lsleq	r0, r0, #2
 8008936:	3302      	addeq	r3, #2
 8008938:	2800      	cmp	r0, #0
 800893a:	db05      	blt.n	8008948 <__hi0bits+0x38>
 800893c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008940:	f103 0301 	add.w	r3, r3, #1
 8008944:	bf08      	it	eq
 8008946:	2320      	moveq	r3, #32
 8008948:	4618      	mov	r0, r3
 800894a:	4770      	bx	lr
 800894c:	2300      	movs	r3, #0
 800894e:	e7e4      	b.n	800891a <__hi0bits+0xa>

08008950 <__lo0bits>:
 8008950:	6803      	ldr	r3, [r0, #0]
 8008952:	f013 0207 	ands.w	r2, r3, #7
 8008956:	4601      	mov	r1, r0
 8008958:	d00b      	beq.n	8008972 <__lo0bits+0x22>
 800895a:	07da      	lsls	r2, r3, #31
 800895c:	d424      	bmi.n	80089a8 <__lo0bits+0x58>
 800895e:	0798      	lsls	r0, r3, #30
 8008960:	bf49      	itett	mi
 8008962:	085b      	lsrmi	r3, r3, #1
 8008964:	089b      	lsrpl	r3, r3, #2
 8008966:	2001      	movmi	r0, #1
 8008968:	600b      	strmi	r3, [r1, #0]
 800896a:	bf5c      	itt	pl
 800896c:	600b      	strpl	r3, [r1, #0]
 800896e:	2002      	movpl	r0, #2
 8008970:	4770      	bx	lr
 8008972:	b298      	uxth	r0, r3
 8008974:	b9b0      	cbnz	r0, 80089a4 <__lo0bits+0x54>
 8008976:	0c1b      	lsrs	r3, r3, #16
 8008978:	2010      	movs	r0, #16
 800897a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800897e:	bf04      	itt	eq
 8008980:	0a1b      	lsreq	r3, r3, #8
 8008982:	3008      	addeq	r0, #8
 8008984:	071a      	lsls	r2, r3, #28
 8008986:	bf04      	itt	eq
 8008988:	091b      	lsreq	r3, r3, #4
 800898a:	3004      	addeq	r0, #4
 800898c:	079a      	lsls	r2, r3, #30
 800898e:	bf04      	itt	eq
 8008990:	089b      	lsreq	r3, r3, #2
 8008992:	3002      	addeq	r0, #2
 8008994:	07da      	lsls	r2, r3, #31
 8008996:	d403      	bmi.n	80089a0 <__lo0bits+0x50>
 8008998:	085b      	lsrs	r3, r3, #1
 800899a:	f100 0001 	add.w	r0, r0, #1
 800899e:	d005      	beq.n	80089ac <__lo0bits+0x5c>
 80089a0:	600b      	str	r3, [r1, #0]
 80089a2:	4770      	bx	lr
 80089a4:	4610      	mov	r0, r2
 80089a6:	e7e8      	b.n	800897a <__lo0bits+0x2a>
 80089a8:	2000      	movs	r0, #0
 80089aa:	4770      	bx	lr
 80089ac:	2020      	movs	r0, #32
 80089ae:	4770      	bx	lr

080089b0 <__i2b>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	460c      	mov	r4, r1
 80089b4:	2101      	movs	r1, #1
 80089b6:	f7ff feff 	bl	80087b8 <_Balloc>
 80089ba:	4602      	mov	r2, r0
 80089bc:	b928      	cbnz	r0, 80089ca <__i2b+0x1a>
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <__i2b+0x24>)
 80089c0:	4805      	ldr	r0, [pc, #20]	; (80089d8 <__i2b+0x28>)
 80089c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089c6:	f000 fc9b 	bl	8009300 <__assert_func>
 80089ca:	2301      	movs	r3, #1
 80089cc:	6144      	str	r4, [r0, #20]
 80089ce:	6103      	str	r3, [r0, #16]
 80089d0:	bd10      	pop	{r4, pc}
 80089d2:	bf00      	nop
 80089d4:	08009ff7 	.word	0x08009ff7
 80089d8:	0800a008 	.word	0x0800a008

080089dc <__multiply>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	4614      	mov	r4, r2
 80089e2:	690a      	ldr	r2, [r1, #16]
 80089e4:	6923      	ldr	r3, [r4, #16]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	bfb8      	it	lt
 80089ea:	460b      	movlt	r3, r1
 80089ec:	460d      	mov	r5, r1
 80089ee:	bfbc      	itt	lt
 80089f0:	4625      	movlt	r5, r4
 80089f2:	461c      	movlt	r4, r3
 80089f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80089f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80089fc:	68ab      	ldr	r3, [r5, #8]
 80089fe:	6869      	ldr	r1, [r5, #4]
 8008a00:	eb0a 0709 	add.w	r7, sl, r9
 8008a04:	42bb      	cmp	r3, r7
 8008a06:	b085      	sub	sp, #20
 8008a08:	bfb8      	it	lt
 8008a0a:	3101      	addlt	r1, #1
 8008a0c:	f7ff fed4 	bl	80087b8 <_Balloc>
 8008a10:	b930      	cbnz	r0, 8008a20 <__multiply+0x44>
 8008a12:	4602      	mov	r2, r0
 8008a14:	4b42      	ldr	r3, [pc, #264]	; (8008b20 <__multiply+0x144>)
 8008a16:	4843      	ldr	r0, [pc, #268]	; (8008b24 <__multiply+0x148>)
 8008a18:	f240 115d 	movw	r1, #349	; 0x15d
 8008a1c:	f000 fc70 	bl	8009300 <__assert_func>
 8008a20:	f100 0614 	add.w	r6, r0, #20
 8008a24:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008a28:	4633      	mov	r3, r6
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4543      	cmp	r3, r8
 8008a2e:	d31e      	bcc.n	8008a6e <__multiply+0x92>
 8008a30:	f105 0c14 	add.w	ip, r5, #20
 8008a34:	f104 0314 	add.w	r3, r4, #20
 8008a38:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008a3c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008a40:	9202      	str	r2, [sp, #8]
 8008a42:	ebac 0205 	sub.w	r2, ip, r5
 8008a46:	3a15      	subs	r2, #21
 8008a48:	f022 0203 	bic.w	r2, r2, #3
 8008a4c:	3204      	adds	r2, #4
 8008a4e:	f105 0115 	add.w	r1, r5, #21
 8008a52:	458c      	cmp	ip, r1
 8008a54:	bf38      	it	cc
 8008a56:	2204      	movcc	r2, #4
 8008a58:	9201      	str	r2, [sp, #4]
 8008a5a:	9a02      	ldr	r2, [sp, #8]
 8008a5c:	9303      	str	r3, [sp, #12]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d808      	bhi.n	8008a74 <__multiply+0x98>
 8008a62:	2f00      	cmp	r7, #0
 8008a64:	dc55      	bgt.n	8008b12 <__multiply+0x136>
 8008a66:	6107      	str	r7, [r0, #16]
 8008a68:	b005      	add	sp, #20
 8008a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6e:	f843 2b04 	str.w	r2, [r3], #4
 8008a72:	e7db      	b.n	8008a2c <__multiply+0x50>
 8008a74:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a78:	f1ba 0f00 	cmp.w	sl, #0
 8008a7c:	d020      	beq.n	8008ac0 <__multiply+0xe4>
 8008a7e:	f105 0e14 	add.w	lr, r5, #20
 8008a82:	46b1      	mov	r9, r6
 8008a84:	2200      	movs	r2, #0
 8008a86:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008a8a:	f8d9 b000 	ldr.w	fp, [r9]
 8008a8e:	b2a1      	uxth	r1, r4
 8008a90:	fa1f fb8b 	uxth.w	fp, fp
 8008a94:	fb0a b101 	mla	r1, sl, r1, fp
 8008a98:	4411      	add	r1, r2
 8008a9a:	f8d9 2000 	ldr.w	r2, [r9]
 8008a9e:	0c24      	lsrs	r4, r4, #16
 8008aa0:	0c12      	lsrs	r2, r2, #16
 8008aa2:	fb0a 2404 	mla	r4, sl, r4, r2
 8008aa6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008aaa:	b289      	uxth	r1, r1
 8008aac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008ab0:	45f4      	cmp	ip, lr
 8008ab2:	f849 1b04 	str.w	r1, [r9], #4
 8008ab6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008aba:	d8e4      	bhi.n	8008a86 <__multiply+0xaa>
 8008abc:	9901      	ldr	r1, [sp, #4]
 8008abe:	5072      	str	r2, [r6, r1]
 8008ac0:	9a03      	ldr	r2, [sp, #12]
 8008ac2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	f1b9 0f00 	cmp.w	r9, #0
 8008acc:	d01f      	beq.n	8008b0e <__multiply+0x132>
 8008ace:	6834      	ldr	r4, [r6, #0]
 8008ad0:	f105 0114 	add.w	r1, r5, #20
 8008ad4:	46b6      	mov	lr, r6
 8008ad6:	f04f 0a00 	mov.w	sl, #0
 8008ada:	880a      	ldrh	r2, [r1, #0]
 8008adc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008ae0:	fb09 b202 	mla	r2, r9, r2, fp
 8008ae4:	4492      	add	sl, r2
 8008ae6:	b2a4      	uxth	r4, r4
 8008ae8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008aec:	f84e 4b04 	str.w	r4, [lr], #4
 8008af0:	f851 4b04 	ldr.w	r4, [r1], #4
 8008af4:	f8be 2000 	ldrh.w	r2, [lr]
 8008af8:	0c24      	lsrs	r4, r4, #16
 8008afa:	fb09 2404 	mla	r4, r9, r4, r2
 8008afe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008b02:	458c      	cmp	ip, r1
 8008b04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008b08:	d8e7      	bhi.n	8008ada <__multiply+0xfe>
 8008b0a:	9a01      	ldr	r2, [sp, #4]
 8008b0c:	50b4      	str	r4, [r6, r2]
 8008b0e:	3604      	adds	r6, #4
 8008b10:	e7a3      	b.n	8008a5a <__multiply+0x7e>
 8008b12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1a5      	bne.n	8008a66 <__multiply+0x8a>
 8008b1a:	3f01      	subs	r7, #1
 8008b1c:	e7a1      	b.n	8008a62 <__multiply+0x86>
 8008b1e:	bf00      	nop
 8008b20:	08009ff7 	.word	0x08009ff7
 8008b24:	0800a008 	.word	0x0800a008

08008b28 <__pow5mult>:
 8008b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b2c:	4615      	mov	r5, r2
 8008b2e:	f012 0203 	ands.w	r2, r2, #3
 8008b32:	4606      	mov	r6, r0
 8008b34:	460f      	mov	r7, r1
 8008b36:	d007      	beq.n	8008b48 <__pow5mult+0x20>
 8008b38:	4c25      	ldr	r4, [pc, #148]	; (8008bd0 <__pow5mult+0xa8>)
 8008b3a:	3a01      	subs	r2, #1
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b42:	f7ff fe9b 	bl	800887c <__multadd>
 8008b46:	4607      	mov	r7, r0
 8008b48:	10ad      	asrs	r5, r5, #2
 8008b4a:	d03d      	beq.n	8008bc8 <__pow5mult+0xa0>
 8008b4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b4e:	b97c      	cbnz	r4, 8008b70 <__pow5mult+0x48>
 8008b50:	2010      	movs	r0, #16
 8008b52:	f7ff fe29 	bl	80087a8 <malloc>
 8008b56:	4602      	mov	r2, r0
 8008b58:	6270      	str	r0, [r6, #36]	; 0x24
 8008b5a:	b928      	cbnz	r0, 8008b68 <__pow5mult+0x40>
 8008b5c:	4b1d      	ldr	r3, [pc, #116]	; (8008bd4 <__pow5mult+0xac>)
 8008b5e:	481e      	ldr	r0, [pc, #120]	; (8008bd8 <__pow5mult+0xb0>)
 8008b60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b64:	f000 fbcc 	bl	8009300 <__assert_func>
 8008b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b6c:	6004      	str	r4, [r0, #0]
 8008b6e:	60c4      	str	r4, [r0, #12]
 8008b70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b78:	b94c      	cbnz	r4, 8008b8e <__pow5mult+0x66>
 8008b7a:	f240 2171 	movw	r1, #625	; 0x271
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f7ff ff16 	bl	80089b0 <__i2b>
 8008b84:	2300      	movs	r3, #0
 8008b86:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	6003      	str	r3, [r0, #0]
 8008b8e:	f04f 0900 	mov.w	r9, #0
 8008b92:	07eb      	lsls	r3, r5, #31
 8008b94:	d50a      	bpl.n	8008bac <__pow5mult+0x84>
 8008b96:	4639      	mov	r1, r7
 8008b98:	4622      	mov	r2, r4
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7ff ff1e 	bl	80089dc <__multiply>
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	4680      	mov	r8, r0
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f7ff fe47 	bl	8008838 <_Bfree>
 8008baa:	4647      	mov	r7, r8
 8008bac:	106d      	asrs	r5, r5, #1
 8008bae:	d00b      	beq.n	8008bc8 <__pow5mult+0xa0>
 8008bb0:	6820      	ldr	r0, [r4, #0]
 8008bb2:	b938      	cbnz	r0, 8008bc4 <__pow5mult+0x9c>
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f7ff ff0f 	bl	80089dc <__multiply>
 8008bbe:	6020      	str	r0, [r4, #0]
 8008bc0:	f8c0 9000 	str.w	r9, [r0]
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	e7e4      	b.n	8008b92 <__pow5mult+0x6a>
 8008bc8:	4638      	mov	r0, r7
 8008bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bce:	bf00      	nop
 8008bd0:	0800a158 	.word	0x0800a158
 8008bd4:	08009f81 	.word	0x08009f81
 8008bd8:	0800a008 	.word	0x0800a008

08008bdc <__lshift>:
 8008bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be0:	460c      	mov	r4, r1
 8008be2:	6849      	ldr	r1, [r1, #4]
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	4607      	mov	r7, r0
 8008bee:	4691      	mov	r9, r2
 8008bf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bf4:	f108 0601 	add.w	r6, r8, #1
 8008bf8:	42b3      	cmp	r3, r6
 8008bfa:	db0b      	blt.n	8008c14 <__lshift+0x38>
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	f7ff fddb 	bl	80087b8 <_Balloc>
 8008c02:	4605      	mov	r5, r0
 8008c04:	b948      	cbnz	r0, 8008c1a <__lshift+0x3e>
 8008c06:	4602      	mov	r2, r0
 8008c08:	4b28      	ldr	r3, [pc, #160]	; (8008cac <__lshift+0xd0>)
 8008c0a:	4829      	ldr	r0, [pc, #164]	; (8008cb0 <__lshift+0xd4>)
 8008c0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c10:	f000 fb76 	bl	8009300 <__assert_func>
 8008c14:	3101      	adds	r1, #1
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	e7ee      	b.n	8008bf8 <__lshift+0x1c>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f100 0114 	add.w	r1, r0, #20
 8008c20:	f100 0210 	add.w	r2, r0, #16
 8008c24:	4618      	mov	r0, r3
 8008c26:	4553      	cmp	r3, sl
 8008c28:	db33      	blt.n	8008c92 <__lshift+0xb6>
 8008c2a:	6920      	ldr	r0, [r4, #16]
 8008c2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c30:	f104 0314 	add.w	r3, r4, #20
 8008c34:	f019 091f 	ands.w	r9, r9, #31
 8008c38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c40:	d02b      	beq.n	8008c9a <__lshift+0xbe>
 8008c42:	f1c9 0e20 	rsb	lr, r9, #32
 8008c46:	468a      	mov	sl, r1
 8008c48:	2200      	movs	r2, #0
 8008c4a:	6818      	ldr	r0, [r3, #0]
 8008c4c:	fa00 f009 	lsl.w	r0, r0, r9
 8008c50:	4302      	orrs	r2, r0
 8008c52:	f84a 2b04 	str.w	r2, [sl], #4
 8008c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c5a:	459c      	cmp	ip, r3
 8008c5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c60:	d8f3      	bhi.n	8008c4a <__lshift+0x6e>
 8008c62:	ebac 0304 	sub.w	r3, ip, r4
 8008c66:	3b15      	subs	r3, #21
 8008c68:	f023 0303 	bic.w	r3, r3, #3
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	f104 0015 	add.w	r0, r4, #21
 8008c72:	4584      	cmp	ip, r0
 8008c74:	bf38      	it	cc
 8008c76:	2304      	movcc	r3, #4
 8008c78:	50ca      	str	r2, [r1, r3]
 8008c7a:	b10a      	cbz	r2, 8008c80 <__lshift+0xa4>
 8008c7c:	f108 0602 	add.w	r6, r8, #2
 8008c80:	3e01      	subs	r6, #1
 8008c82:	4638      	mov	r0, r7
 8008c84:	612e      	str	r6, [r5, #16]
 8008c86:	4621      	mov	r1, r4
 8008c88:	f7ff fdd6 	bl	8008838 <_Bfree>
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c92:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c96:	3301      	adds	r3, #1
 8008c98:	e7c5      	b.n	8008c26 <__lshift+0x4a>
 8008c9a:	3904      	subs	r1, #4
 8008c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ca0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ca4:	459c      	cmp	ip, r3
 8008ca6:	d8f9      	bhi.n	8008c9c <__lshift+0xc0>
 8008ca8:	e7ea      	b.n	8008c80 <__lshift+0xa4>
 8008caa:	bf00      	nop
 8008cac:	08009ff7 	.word	0x08009ff7
 8008cb0:	0800a008 	.word	0x0800a008

08008cb4 <__mcmp>:
 8008cb4:	b530      	push	{r4, r5, lr}
 8008cb6:	6902      	ldr	r2, [r0, #16]
 8008cb8:	690c      	ldr	r4, [r1, #16]
 8008cba:	1b12      	subs	r2, r2, r4
 8008cbc:	d10e      	bne.n	8008cdc <__mcmp+0x28>
 8008cbe:	f100 0314 	add.w	r3, r0, #20
 8008cc2:	3114      	adds	r1, #20
 8008cc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ccc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008cd4:	42a5      	cmp	r5, r4
 8008cd6:	d003      	beq.n	8008ce0 <__mcmp+0x2c>
 8008cd8:	d305      	bcc.n	8008ce6 <__mcmp+0x32>
 8008cda:	2201      	movs	r2, #1
 8008cdc:	4610      	mov	r0, r2
 8008cde:	bd30      	pop	{r4, r5, pc}
 8008ce0:	4283      	cmp	r3, r0
 8008ce2:	d3f3      	bcc.n	8008ccc <__mcmp+0x18>
 8008ce4:	e7fa      	b.n	8008cdc <__mcmp+0x28>
 8008ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cea:	e7f7      	b.n	8008cdc <__mcmp+0x28>

08008cec <__mdiff>:
 8008cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	4617      	mov	r7, r2
 8008cfa:	f7ff ffdb 	bl	8008cb4 <__mcmp>
 8008cfe:	1e05      	subs	r5, r0, #0
 8008d00:	d110      	bne.n	8008d24 <__mdiff+0x38>
 8008d02:	4629      	mov	r1, r5
 8008d04:	4630      	mov	r0, r6
 8008d06:	f7ff fd57 	bl	80087b8 <_Balloc>
 8008d0a:	b930      	cbnz	r0, 8008d1a <__mdiff+0x2e>
 8008d0c:	4b39      	ldr	r3, [pc, #228]	; (8008df4 <__mdiff+0x108>)
 8008d0e:	4602      	mov	r2, r0
 8008d10:	f240 2132 	movw	r1, #562	; 0x232
 8008d14:	4838      	ldr	r0, [pc, #224]	; (8008df8 <__mdiff+0x10c>)
 8008d16:	f000 faf3 	bl	8009300 <__assert_func>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d24:	bfa4      	itt	ge
 8008d26:	463b      	movge	r3, r7
 8008d28:	4627      	movge	r7, r4
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	6879      	ldr	r1, [r7, #4]
 8008d2e:	bfa6      	itte	ge
 8008d30:	461c      	movge	r4, r3
 8008d32:	2500      	movge	r5, #0
 8008d34:	2501      	movlt	r5, #1
 8008d36:	f7ff fd3f 	bl	80087b8 <_Balloc>
 8008d3a:	b920      	cbnz	r0, 8008d46 <__mdiff+0x5a>
 8008d3c:	4b2d      	ldr	r3, [pc, #180]	; (8008df4 <__mdiff+0x108>)
 8008d3e:	4602      	mov	r2, r0
 8008d40:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d44:	e7e6      	b.n	8008d14 <__mdiff+0x28>
 8008d46:	693e      	ldr	r6, [r7, #16]
 8008d48:	60c5      	str	r5, [r0, #12]
 8008d4a:	6925      	ldr	r5, [r4, #16]
 8008d4c:	f107 0114 	add.w	r1, r7, #20
 8008d50:	f104 0914 	add.w	r9, r4, #20
 8008d54:	f100 0e14 	add.w	lr, r0, #20
 8008d58:	f107 0210 	add.w	r2, r7, #16
 8008d5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008d60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008d64:	46f2      	mov	sl, lr
 8008d66:	2700      	movs	r7, #0
 8008d68:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d70:	fa1f f883 	uxth.w	r8, r3
 8008d74:	fa17 f78b 	uxtah	r7, r7, fp
 8008d78:	0c1b      	lsrs	r3, r3, #16
 8008d7a:	eba7 0808 	sub.w	r8, r7, r8
 8008d7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d86:	fa1f f888 	uxth.w	r8, r8
 8008d8a:	141f      	asrs	r7, r3, #16
 8008d8c:	454d      	cmp	r5, r9
 8008d8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d92:	f84a 3b04 	str.w	r3, [sl], #4
 8008d96:	d8e7      	bhi.n	8008d68 <__mdiff+0x7c>
 8008d98:	1b2b      	subs	r3, r5, r4
 8008d9a:	3b15      	subs	r3, #21
 8008d9c:	f023 0303 	bic.w	r3, r3, #3
 8008da0:	3304      	adds	r3, #4
 8008da2:	3415      	adds	r4, #21
 8008da4:	42a5      	cmp	r5, r4
 8008da6:	bf38      	it	cc
 8008da8:	2304      	movcc	r3, #4
 8008daa:	4419      	add	r1, r3
 8008dac:	4473      	add	r3, lr
 8008dae:	469e      	mov	lr, r3
 8008db0:	460d      	mov	r5, r1
 8008db2:	4565      	cmp	r5, ip
 8008db4:	d30e      	bcc.n	8008dd4 <__mdiff+0xe8>
 8008db6:	f10c 0203 	add.w	r2, ip, #3
 8008dba:	1a52      	subs	r2, r2, r1
 8008dbc:	f022 0203 	bic.w	r2, r2, #3
 8008dc0:	3903      	subs	r1, #3
 8008dc2:	458c      	cmp	ip, r1
 8008dc4:	bf38      	it	cc
 8008dc6:	2200      	movcc	r2, #0
 8008dc8:	441a      	add	r2, r3
 8008dca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008dce:	b17b      	cbz	r3, 8008df0 <__mdiff+0x104>
 8008dd0:	6106      	str	r6, [r0, #16]
 8008dd2:	e7a5      	b.n	8008d20 <__mdiff+0x34>
 8008dd4:	f855 8b04 	ldr.w	r8, [r5], #4
 8008dd8:	fa17 f488 	uxtah	r4, r7, r8
 8008ddc:	1422      	asrs	r2, r4, #16
 8008dde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008de2:	b2a4      	uxth	r4, r4
 8008de4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008de8:	f84e 4b04 	str.w	r4, [lr], #4
 8008dec:	1417      	asrs	r7, r2, #16
 8008dee:	e7e0      	b.n	8008db2 <__mdiff+0xc6>
 8008df0:	3e01      	subs	r6, #1
 8008df2:	e7ea      	b.n	8008dca <__mdiff+0xde>
 8008df4:	08009ff7 	.word	0x08009ff7
 8008df8:	0800a008 	.word	0x0800a008

08008dfc <__d2b>:
 8008dfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e00:	4689      	mov	r9, r1
 8008e02:	2101      	movs	r1, #1
 8008e04:	ec57 6b10 	vmov	r6, r7, d0
 8008e08:	4690      	mov	r8, r2
 8008e0a:	f7ff fcd5 	bl	80087b8 <_Balloc>
 8008e0e:	4604      	mov	r4, r0
 8008e10:	b930      	cbnz	r0, 8008e20 <__d2b+0x24>
 8008e12:	4602      	mov	r2, r0
 8008e14:	4b25      	ldr	r3, [pc, #148]	; (8008eac <__d2b+0xb0>)
 8008e16:	4826      	ldr	r0, [pc, #152]	; (8008eb0 <__d2b+0xb4>)
 8008e18:	f240 310a 	movw	r1, #778	; 0x30a
 8008e1c:	f000 fa70 	bl	8009300 <__assert_func>
 8008e20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e28:	bb35      	cbnz	r5, 8008e78 <__d2b+0x7c>
 8008e2a:	2e00      	cmp	r6, #0
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	d028      	beq.n	8008e82 <__d2b+0x86>
 8008e30:	4668      	mov	r0, sp
 8008e32:	9600      	str	r6, [sp, #0]
 8008e34:	f7ff fd8c 	bl	8008950 <__lo0bits>
 8008e38:	9900      	ldr	r1, [sp, #0]
 8008e3a:	b300      	cbz	r0, 8008e7e <__d2b+0x82>
 8008e3c:	9a01      	ldr	r2, [sp, #4]
 8008e3e:	f1c0 0320 	rsb	r3, r0, #32
 8008e42:	fa02 f303 	lsl.w	r3, r2, r3
 8008e46:	430b      	orrs	r3, r1
 8008e48:	40c2      	lsrs	r2, r0
 8008e4a:	6163      	str	r3, [r4, #20]
 8008e4c:	9201      	str	r2, [sp, #4]
 8008e4e:	9b01      	ldr	r3, [sp, #4]
 8008e50:	61a3      	str	r3, [r4, #24]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	bf14      	ite	ne
 8008e56:	2202      	movne	r2, #2
 8008e58:	2201      	moveq	r2, #1
 8008e5a:	6122      	str	r2, [r4, #16]
 8008e5c:	b1d5      	cbz	r5, 8008e94 <__d2b+0x98>
 8008e5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e62:	4405      	add	r5, r0
 8008e64:	f8c9 5000 	str.w	r5, [r9]
 8008e68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e6c:	f8c8 0000 	str.w	r0, [r8]
 8008e70:	4620      	mov	r0, r4
 8008e72:	b003      	add	sp, #12
 8008e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e7c:	e7d5      	b.n	8008e2a <__d2b+0x2e>
 8008e7e:	6161      	str	r1, [r4, #20]
 8008e80:	e7e5      	b.n	8008e4e <__d2b+0x52>
 8008e82:	a801      	add	r0, sp, #4
 8008e84:	f7ff fd64 	bl	8008950 <__lo0bits>
 8008e88:	9b01      	ldr	r3, [sp, #4]
 8008e8a:	6163      	str	r3, [r4, #20]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	6122      	str	r2, [r4, #16]
 8008e90:	3020      	adds	r0, #32
 8008e92:	e7e3      	b.n	8008e5c <__d2b+0x60>
 8008e94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e9c:	f8c9 0000 	str.w	r0, [r9]
 8008ea0:	6918      	ldr	r0, [r3, #16]
 8008ea2:	f7ff fd35 	bl	8008910 <__hi0bits>
 8008ea6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008eaa:	e7df      	b.n	8008e6c <__d2b+0x70>
 8008eac:	08009ff7 	.word	0x08009ff7
 8008eb0:	0800a008 	.word	0x0800a008

08008eb4 <_calloc_r>:
 8008eb4:	b513      	push	{r0, r1, r4, lr}
 8008eb6:	434a      	muls	r2, r1
 8008eb8:	4611      	mov	r1, r2
 8008eba:	9201      	str	r2, [sp, #4]
 8008ebc:	f000 f85a 	bl	8008f74 <_malloc_r>
 8008ec0:	4604      	mov	r4, r0
 8008ec2:	b118      	cbz	r0, 8008ecc <_calloc_r+0x18>
 8008ec4:	9a01      	ldr	r2, [sp, #4]
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	f7fe f960 	bl	800718c <memset>
 8008ecc:	4620      	mov	r0, r4
 8008ece:	b002      	add	sp, #8
 8008ed0:	bd10      	pop	{r4, pc}
	...

08008ed4 <_free_r>:
 8008ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ed6:	2900      	cmp	r1, #0
 8008ed8:	d048      	beq.n	8008f6c <_free_r+0x98>
 8008eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ede:	9001      	str	r0, [sp, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ee6:	bfb8      	it	lt
 8008ee8:	18e4      	addlt	r4, r4, r3
 8008eea:	f000 fa65 	bl	80093b8 <__malloc_lock>
 8008eee:	4a20      	ldr	r2, [pc, #128]	; (8008f70 <_free_r+0x9c>)
 8008ef0:	9801      	ldr	r0, [sp, #4]
 8008ef2:	6813      	ldr	r3, [r2, #0]
 8008ef4:	4615      	mov	r5, r2
 8008ef6:	b933      	cbnz	r3, 8008f06 <_free_r+0x32>
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	6014      	str	r4, [r2, #0]
 8008efc:	b003      	add	sp, #12
 8008efe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f02:	f000 ba5f 	b.w	80093c4 <__malloc_unlock>
 8008f06:	42a3      	cmp	r3, r4
 8008f08:	d90b      	bls.n	8008f22 <_free_r+0x4e>
 8008f0a:	6821      	ldr	r1, [r4, #0]
 8008f0c:	1862      	adds	r2, r4, r1
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	bf04      	itt	eq
 8008f12:	681a      	ldreq	r2, [r3, #0]
 8008f14:	685b      	ldreq	r3, [r3, #4]
 8008f16:	6063      	str	r3, [r4, #4]
 8008f18:	bf04      	itt	eq
 8008f1a:	1852      	addeq	r2, r2, r1
 8008f1c:	6022      	streq	r2, [r4, #0]
 8008f1e:	602c      	str	r4, [r5, #0]
 8008f20:	e7ec      	b.n	8008efc <_free_r+0x28>
 8008f22:	461a      	mov	r2, r3
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	b10b      	cbz	r3, 8008f2c <_free_r+0x58>
 8008f28:	42a3      	cmp	r3, r4
 8008f2a:	d9fa      	bls.n	8008f22 <_free_r+0x4e>
 8008f2c:	6811      	ldr	r1, [r2, #0]
 8008f2e:	1855      	adds	r5, r2, r1
 8008f30:	42a5      	cmp	r5, r4
 8008f32:	d10b      	bne.n	8008f4c <_free_r+0x78>
 8008f34:	6824      	ldr	r4, [r4, #0]
 8008f36:	4421      	add	r1, r4
 8008f38:	1854      	adds	r4, r2, r1
 8008f3a:	42a3      	cmp	r3, r4
 8008f3c:	6011      	str	r1, [r2, #0]
 8008f3e:	d1dd      	bne.n	8008efc <_free_r+0x28>
 8008f40:	681c      	ldr	r4, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	6053      	str	r3, [r2, #4]
 8008f46:	4421      	add	r1, r4
 8008f48:	6011      	str	r1, [r2, #0]
 8008f4a:	e7d7      	b.n	8008efc <_free_r+0x28>
 8008f4c:	d902      	bls.n	8008f54 <_free_r+0x80>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	6003      	str	r3, [r0, #0]
 8008f52:	e7d3      	b.n	8008efc <_free_r+0x28>
 8008f54:	6825      	ldr	r5, [r4, #0]
 8008f56:	1961      	adds	r1, r4, r5
 8008f58:	428b      	cmp	r3, r1
 8008f5a:	bf04      	itt	eq
 8008f5c:	6819      	ldreq	r1, [r3, #0]
 8008f5e:	685b      	ldreq	r3, [r3, #4]
 8008f60:	6063      	str	r3, [r4, #4]
 8008f62:	bf04      	itt	eq
 8008f64:	1949      	addeq	r1, r1, r5
 8008f66:	6021      	streq	r1, [r4, #0]
 8008f68:	6054      	str	r4, [r2, #4]
 8008f6a:	e7c7      	b.n	8008efc <_free_r+0x28>
 8008f6c:	b003      	add	sp, #12
 8008f6e:	bd30      	pop	{r4, r5, pc}
 8008f70:	200046f8 	.word	0x200046f8

08008f74 <_malloc_r>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	1ccd      	adds	r5, r1, #3
 8008f78:	f025 0503 	bic.w	r5, r5, #3
 8008f7c:	3508      	adds	r5, #8
 8008f7e:	2d0c      	cmp	r5, #12
 8008f80:	bf38      	it	cc
 8008f82:	250c      	movcc	r5, #12
 8008f84:	2d00      	cmp	r5, #0
 8008f86:	4606      	mov	r6, r0
 8008f88:	db01      	blt.n	8008f8e <_malloc_r+0x1a>
 8008f8a:	42a9      	cmp	r1, r5
 8008f8c:	d903      	bls.n	8008f96 <_malloc_r+0x22>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	6033      	str	r3, [r6, #0]
 8008f92:	2000      	movs	r0, #0
 8008f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f96:	f000 fa0f 	bl	80093b8 <__malloc_lock>
 8008f9a:	4921      	ldr	r1, [pc, #132]	; (8009020 <_malloc_r+0xac>)
 8008f9c:	680a      	ldr	r2, [r1, #0]
 8008f9e:	4614      	mov	r4, r2
 8008fa0:	b99c      	cbnz	r4, 8008fca <_malloc_r+0x56>
 8008fa2:	4f20      	ldr	r7, [pc, #128]	; (8009024 <_malloc_r+0xb0>)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	b923      	cbnz	r3, 8008fb2 <_malloc_r+0x3e>
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4630      	mov	r0, r6
 8008fac:	f000 f998 	bl	80092e0 <_sbrk_r>
 8008fb0:	6038      	str	r0, [r7, #0]
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f000 f993 	bl	80092e0 <_sbrk_r>
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	d123      	bne.n	8009006 <_malloc_r+0x92>
 8008fbe:	230c      	movs	r3, #12
 8008fc0:	6033      	str	r3, [r6, #0]
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	f000 f9fe 	bl	80093c4 <__malloc_unlock>
 8008fc8:	e7e3      	b.n	8008f92 <_malloc_r+0x1e>
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	1b5b      	subs	r3, r3, r5
 8008fce:	d417      	bmi.n	8009000 <_malloc_r+0x8c>
 8008fd0:	2b0b      	cmp	r3, #11
 8008fd2:	d903      	bls.n	8008fdc <_malloc_r+0x68>
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	441c      	add	r4, r3
 8008fd8:	6025      	str	r5, [r4, #0]
 8008fda:	e004      	b.n	8008fe6 <_malloc_r+0x72>
 8008fdc:	6863      	ldr	r3, [r4, #4]
 8008fde:	42a2      	cmp	r2, r4
 8008fe0:	bf0c      	ite	eq
 8008fe2:	600b      	streq	r3, [r1, #0]
 8008fe4:	6053      	strne	r3, [r2, #4]
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	f000 f9ec 	bl	80093c4 <__malloc_unlock>
 8008fec:	f104 000b 	add.w	r0, r4, #11
 8008ff0:	1d23      	adds	r3, r4, #4
 8008ff2:	f020 0007 	bic.w	r0, r0, #7
 8008ff6:	1ac2      	subs	r2, r0, r3
 8008ff8:	d0cc      	beq.n	8008f94 <_malloc_r+0x20>
 8008ffa:	1a1b      	subs	r3, r3, r0
 8008ffc:	50a3      	str	r3, [r4, r2]
 8008ffe:	e7c9      	b.n	8008f94 <_malloc_r+0x20>
 8009000:	4622      	mov	r2, r4
 8009002:	6864      	ldr	r4, [r4, #4]
 8009004:	e7cc      	b.n	8008fa0 <_malloc_r+0x2c>
 8009006:	1cc4      	adds	r4, r0, #3
 8009008:	f024 0403 	bic.w	r4, r4, #3
 800900c:	42a0      	cmp	r0, r4
 800900e:	d0e3      	beq.n	8008fd8 <_malloc_r+0x64>
 8009010:	1a21      	subs	r1, r4, r0
 8009012:	4630      	mov	r0, r6
 8009014:	f000 f964 	bl	80092e0 <_sbrk_r>
 8009018:	3001      	adds	r0, #1
 800901a:	d1dd      	bne.n	8008fd8 <_malloc_r+0x64>
 800901c:	e7cf      	b.n	8008fbe <_malloc_r+0x4a>
 800901e:	bf00      	nop
 8009020:	200046f8 	.word	0x200046f8
 8009024:	200046fc 	.word	0x200046fc

08009028 <__ssputs_r>:
 8009028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800902c:	688e      	ldr	r6, [r1, #8]
 800902e:	429e      	cmp	r6, r3
 8009030:	4682      	mov	sl, r0
 8009032:	460c      	mov	r4, r1
 8009034:	4690      	mov	r8, r2
 8009036:	461f      	mov	r7, r3
 8009038:	d838      	bhi.n	80090ac <__ssputs_r+0x84>
 800903a:	898a      	ldrh	r2, [r1, #12]
 800903c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009040:	d032      	beq.n	80090a8 <__ssputs_r+0x80>
 8009042:	6825      	ldr	r5, [r4, #0]
 8009044:	6909      	ldr	r1, [r1, #16]
 8009046:	eba5 0901 	sub.w	r9, r5, r1
 800904a:	6965      	ldr	r5, [r4, #20]
 800904c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009054:	3301      	adds	r3, #1
 8009056:	444b      	add	r3, r9
 8009058:	106d      	asrs	r5, r5, #1
 800905a:	429d      	cmp	r5, r3
 800905c:	bf38      	it	cc
 800905e:	461d      	movcc	r5, r3
 8009060:	0553      	lsls	r3, r2, #21
 8009062:	d531      	bpl.n	80090c8 <__ssputs_r+0xa0>
 8009064:	4629      	mov	r1, r5
 8009066:	f7ff ff85 	bl	8008f74 <_malloc_r>
 800906a:	4606      	mov	r6, r0
 800906c:	b950      	cbnz	r0, 8009084 <__ssputs_r+0x5c>
 800906e:	230c      	movs	r3, #12
 8009070:	f8ca 3000 	str.w	r3, [sl]
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800907a:	81a3      	strh	r3, [r4, #12]
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009084:	6921      	ldr	r1, [r4, #16]
 8009086:	464a      	mov	r2, r9
 8009088:	f7fe f872 	bl	8007170 <memcpy>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009096:	81a3      	strh	r3, [r4, #12]
 8009098:	6126      	str	r6, [r4, #16]
 800909a:	6165      	str	r5, [r4, #20]
 800909c:	444e      	add	r6, r9
 800909e:	eba5 0509 	sub.w	r5, r5, r9
 80090a2:	6026      	str	r6, [r4, #0]
 80090a4:	60a5      	str	r5, [r4, #8]
 80090a6:	463e      	mov	r6, r7
 80090a8:	42be      	cmp	r6, r7
 80090aa:	d900      	bls.n	80090ae <__ssputs_r+0x86>
 80090ac:	463e      	mov	r6, r7
 80090ae:	4632      	mov	r2, r6
 80090b0:	6820      	ldr	r0, [r4, #0]
 80090b2:	4641      	mov	r1, r8
 80090b4:	f000 f966 	bl	8009384 <memmove>
 80090b8:	68a3      	ldr	r3, [r4, #8]
 80090ba:	6822      	ldr	r2, [r4, #0]
 80090bc:	1b9b      	subs	r3, r3, r6
 80090be:	4432      	add	r2, r6
 80090c0:	60a3      	str	r3, [r4, #8]
 80090c2:	6022      	str	r2, [r4, #0]
 80090c4:	2000      	movs	r0, #0
 80090c6:	e7db      	b.n	8009080 <__ssputs_r+0x58>
 80090c8:	462a      	mov	r2, r5
 80090ca:	f000 f981 	bl	80093d0 <_realloc_r>
 80090ce:	4606      	mov	r6, r0
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d1e1      	bne.n	8009098 <__ssputs_r+0x70>
 80090d4:	6921      	ldr	r1, [r4, #16]
 80090d6:	4650      	mov	r0, sl
 80090d8:	f7ff fefc 	bl	8008ed4 <_free_r>
 80090dc:	e7c7      	b.n	800906e <__ssputs_r+0x46>
	...

080090e0 <_svfiprintf_r>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	4698      	mov	r8, r3
 80090e6:	898b      	ldrh	r3, [r1, #12]
 80090e8:	061b      	lsls	r3, r3, #24
 80090ea:	b09d      	sub	sp, #116	; 0x74
 80090ec:	4607      	mov	r7, r0
 80090ee:	460d      	mov	r5, r1
 80090f0:	4614      	mov	r4, r2
 80090f2:	d50e      	bpl.n	8009112 <_svfiprintf_r+0x32>
 80090f4:	690b      	ldr	r3, [r1, #16]
 80090f6:	b963      	cbnz	r3, 8009112 <_svfiprintf_r+0x32>
 80090f8:	2140      	movs	r1, #64	; 0x40
 80090fa:	f7ff ff3b 	bl	8008f74 <_malloc_r>
 80090fe:	6028      	str	r0, [r5, #0]
 8009100:	6128      	str	r0, [r5, #16]
 8009102:	b920      	cbnz	r0, 800910e <_svfiprintf_r+0x2e>
 8009104:	230c      	movs	r3, #12
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	e0d1      	b.n	80092b2 <_svfiprintf_r+0x1d2>
 800910e:	2340      	movs	r3, #64	; 0x40
 8009110:	616b      	str	r3, [r5, #20]
 8009112:	2300      	movs	r3, #0
 8009114:	9309      	str	r3, [sp, #36]	; 0x24
 8009116:	2320      	movs	r3, #32
 8009118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800911c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009120:	2330      	movs	r3, #48	; 0x30
 8009122:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80092cc <_svfiprintf_r+0x1ec>
 8009126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800912a:	f04f 0901 	mov.w	r9, #1
 800912e:	4623      	mov	r3, r4
 8009130:	469a      	mov	sl, r3
 8009132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009136:	b10a      	cbz	r2, 800913c <_svfiprintf_r+0x5c>
 8009138:	2a25      	cmp	r2, #37	; 0x25
 800913a:	d1f9      	bne.n	8009130 <_svfiprintf_r+0x50>
 800913c:	ebba 0b04 	subs.w	fp, sl, r4
 8009140:	d00b      	beq.n	800915a <_svfiprintf_r+0x7a>
 8009142:	465b      	mov	r3, fp
 8009144:	4622      	mov	r2, r4
 8009146:	4629      	mov	r1, r5
 8009148:	4638      	mov	r0, r7
 800914a:	f7ff ff6d 	bl	8009028 <__ssputs_r>
 800914e:	3001      	adds	r0, #1
 8009150:	f000 80aa 	beq.w	80092a8 <_svfiprintf_r+0x1c8>
 8009154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009156:	445a      	add	r2, fp
 8009158:	9209      	str	r2, [sp, #36]	; 0x24
 800915a:	f89a 3000 	ldrb.w	r3, [sl]
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 80a2 	beq.w	80092a8 <_svfiprintf_r+0x1c8>
 8009164:	2300      	movs	r3, #0
 8009166:	f04f 32ff 	mov.w	r2, #4294967295
 800916a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800916e:	f10a 0a01 	add.w	sl, sl, #1
 8009172:	9304      	str	r3, [sp, #16]
 8009174:	9307      	str	r3, [sp, #28]
 8009176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800917a:	931a      	str	r3, [sp, #104]	; 0x68
 800917c:	4654      	mov	r4, sl
 800917e:	2205      	movs	r2, #5
 8009180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009184:	4851      	ldr	r0, [pc, #324]	; (80092cc <_svfiprintf_r+0x1ec>)
 8009186:	f7f7 f833 	bl	80001f0 <memchr>
 800918a:	9a04      	ldr	r2, [sp, #16]
 800918c:	b9d8      	cbnz	r0, 80091c6 <_svfiprintf_r+0xe6>
 800918e:	06d0      	lsls	r0, r2, #27
 8009190:	bf44      	itt	mi
 8009192:	2320      	movmi	r3, #32
 8009194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009198:	0711      	lsls	r1, r2, #28
 800919a:	bf44      	itt	mi
 800919c:	232b      	movmi	r3, #43	; 0x2b
 800919e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a2:	f89a 3000 	ldrb.w	r3, [sl]
 80091a6:	2b2a      	cmp	r3, #42	; 0x2a
 80091a8:	d015      	beq.n	80091d6 <_svfiprintf_r+0xf6>
 80091aa:	9a07      	ldr	r2, [sp, #28]
 80091ac:	4654      	mov	r4, sl
 80091ae:	2000      	movs	r0, #0
 80091b0:	f04f 0c0a 	mov.w	ip, #10
 80091b4:	4621      	mov	r1, r4
 80091b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091ba:	3b30      	subs	r3, #48	; 0x30
 80091bc:	2b09      	cmp	r3, #9
 80091be:	d94e      	bls.n	800925e <_svfiprintf_r+0x17e>
 80091c0:	b1b0      	cbz	r0, 80091f0 <_svfiprintf_r+0x110>
 80091c2:	9207      	str	r2, [sp, #28]
 80091c4:	e014      	b.n	80091f0 <_svfiprintf_r+0x110>
 80091c6:	eba0 0308 	sub.w	r3, r0, r8
 80091ca:	fa09 f303 	lsl.w	r3, r9, r3
 80091ce:	4313      	orrs	r3, r2
 80091d0:	9304      	str	r3, [sp, #16]
 80091d2:	46a2      	mov	sl, r4
 80091d4:	e7d2      	b.n	800917c <_svfiprintf_r+0x9c>
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	1d19      	adds	r1, r3, #4
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	9103      	str	r1, [sp, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bfbb      	ittet	lt
 80091e2:	425b      	neglt	r3, r3
 80091e4:	f042 0202 	orrlt.w	r2, r2, #2
 80091e8:	9307      	strge	r3, [sp, #28]
 80091ea:	9307      	strlt	r3, [sp, #28]
 80091ec:	bfb8      	it	lt
 80091ee:	9204      	strlt	r2, [sp, #16]
 80091f0:	7823      	ldrb	r3, [r4, #0]
 80091f2:	2b2e      	cmp	r3, #46	; 0x2e
 80091f4:	d10c      	bne.n	8009210 <_svfiprintf_r+0x130>
 80091f6:	7863      	ldrb	r3, [r4, #1]
 80091f8:	2b2a      	cmp	r3, #42	; 0x2a
 80091fa:	d135      	bne.n	8009268 <_svfiprintf_r+0x188>
 80091fc:	9b03      	ldr	r3, [sp, #12]
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	9203      	str	r2, [sp, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	bfb8      	it	lt
 8009208:	f04f 33ff 	movlt.w	r3, #4294967295
 800920c:	3402      	adds	r4, #2
 800920e:	9305      	str	r3, [sp, #20]
 8009210:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092dc <_svfiprintf_r+0x1fc>
 8009214:	7821      	ldrb	r1, [r4, #0]
 8009216:	2203      	movs	r2, #3
 8009218:	4650      	mov	r0, sl
 800921a:	f7f6 ffe9 	bl	80001f0 <memchr>
 800921e:	b140      	cbz	r0, 8009232 <_svfiprintf_r+0x152>
 8009220:	2340      	movs	r3, #64	; 0x40
 8009222:	eba0 000a 	sub.w	r0, r0, sl
 8009226:	fa03 f000 	lsl.w	r0, r3, r0
 800922a:	9b04      	ldr	r3, [sp, #16]
 800922c:	4303      	orrs	r3, r0
 800922e:	3401      	adds	r4, #1
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009236:	4826      	ldr	r0, [pc, #152]	; (80092d0 <_svfiprintf_r+0x1f0>)
 8009238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800923c:	2206      	movs	r2, #6
 800923e:	f7f6 ffd7 	bl	80001f0 <memchr>
 8009242:	2800      	cmp	r0, #0
 8009244:	d038      	beq.n	80092b8 <_svfiprintf_r+0x1d8>
 8009246:	4b23      	ldr	r3, [pc, #140]	; (80092d4 <_svfiprintf_r+0x1f4>)
 8009248:	bb1b      	cbnz	r3, 8009292 <_svfiprintf_r+0x1b2>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	3307      	adds	r3, #7
 800924e:	f023 0307 	bic.w	r3, r3, #7
 8009252:	3308      	adds	r3, #8
 8009254:	9303      	str	r3, [sp, #12]
 8009256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009258:	4433      	add	r3, r6
 800925a:	9309      	str	r3, [sp, #36]	; 0x24
 800925c:	e767      	b.n	800912e <_svfiprintf_r+0x4e>
 800925e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009262:	460c      	mov	r4, r1
 8009264:	2001      	movs	r0, #1
 8009266:	e7a5      	b.n	80091b4 <_svfiprintf_r+0xd4>
 8009268:	2300      	movs	r3, #0
 800926a:	3401      	adds	r4, #1
 800926c:	9305      	str	r3, [sp, #20]
 800926e:	4619      	mov	r1, r3
 8009270:	f04f 0c0a 	mov.w	ip, #10
 8009274:	4620      	mov	r0, r4
 8009276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800927a:	3a30      	subs	r2, #48	; 0x30
 800927c:	2a09      	cmp	r2, #9
 800927e:	d903      	bls.n	8009288 <_svfiprintf_r+0x1a8>
 8009280:	2b00      	cmp	r3, #0
 8009282:	d0c5      	beq.n	8009210 <_svfiprintf_r+0x130>
 8009284:	9105      	str	r1, [sp, #20]
 8009286:	e7c3      	b.n	8009210 <_svfiprintf_r+0x130>
 8009288:	fb0c 2101 	mla	r1, ip, r1, r2
 800928c:	4604      	mov	r4, r0
 800928e:	2301      	movs	r3, #1
 8009290:	e7f0      	b.n	8009274 <_svfiprintf_r+0x194>
 8009292:	ab03      	add	r3, sp, #12
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	462a      	mov	r2, r5
 8009298:	4b0f      	ldr	r3, [pc, #60]	; (80092d8 <_svfiprintf_r+0x1f8>)
 800929a:	a904      	add	r1, sp, #16
 800929c:	4638      	mov	r0, r7
 800929e:	f7fe f81d 	bl	80072dc <_printf_float>
 80092a2:	1c42      	adds	r2, r0, #1
 80092a4:	4606      	mov	r6, r0
 80092a6:	d1d6      	bne.n	8009256 <_svfiprintf_r+0x176>
 80092a8:	89ab      	ldrh	r3, [r5, #12]
 80092aa:	065b      	lsls	r3, r3, #25
 80092ac:	f53f af2c 	bmi.w	8009108 <_svfiprintf_r+0x28>
 80092b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092b2:	b01d      	add	sp, #116	; 0x74
 80092b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b8:	ab03      	add	r3, sp, #12
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	462a      	mov	r2, r5
 80092be:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <_svfiprintf_r+0x1f8>)
 80092c0:	a904      	add	r1, sp, #16
 80092c2:	4638      	mov	r0, r7
 80092c4:	f7fe faae 	bl	8007824 <_printf_i>
 80092c8:	e7eb      	b.n	80092a2 <_svfiprintf_r+0x1c2>
 80092ca:	bf00      	nop
 80092cc:	0800a164 	.word	0x0800a164
 80092d0:	0800a16e 	.word	0x0800a16e
 80092d4:	080072dd 	.word	0x080072dd
 80092d8:	08009029 	.word	0x08009029
 80092dc:	0800a16a 	.word	0x0800a16a

080092e0 <_sbrk_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d06      	ldr	r5, [pc, #24]	; (80092fc <_sbrk_r+0x1c>)
 80092e4:	2300      	movs	r3, #0
 80092e6:	4604      	mov	r4, r0
 80092e8:	4608      	mov	r0, r1
 80092ea:	602b      	str	r3, [r5, #0]
 80092ec:	f7f8 faaa 	bl	8001844 <_sbrk>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_sbrk_r+0x1a>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_sbrk_r+0x1a>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	200049d4 	.word	0x200049d4

08009300 <__assert_func>:
 8009300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009302:	4614      	mov	r4, r2
 8009304:	461a      	mov	r2, r3
 8009306:	4b09      	ldr	r3, [pc, #36]	; (800932c <__assert_func+0x2c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4605      	mov	r5, r0
 800930c:	68d8      	ldr	r0, [r3, #12]
 800930e:	b14c      	cbz	r4, 8009324 <__assert_func+0x24>
 8009310:	4b07      	ldr	r3, [pc, #28]	; (8009330 <__assert_func+0x30>)
 8009312:	9100      	str	r1, [sp, #0]
 8009314:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009318:	4906      	ldr	r1, [pc, #24]	; (8009334 <__assert_func+0x34>)
 800931a:	462b      	mov	r3, r5
 800931c:	f000 f80e 	bl	800933c <fiprintf>
 8009320:	f000 faa4 	bl	800986c <abort>
 8009324:	4b04      	ldr	r3, [pc, #16]	; (8009338 <__assert_func+0x38>)
 8009326:	461c      	mov	r4, r3
 8009328:	e7f3      	b.n	8009312 <__assert_func+0x12>
 800932a:	bf00      	nop
 800932c:	20000010 	.word	0x20000010
 8009330:	0800a175 	.word	0x0800a175
 8009334:	0800a182 	.word	0x0800a182
 8009338:	0800a1b0 	.word	0x0800a1b0

0800933c <fiprintf>:
 800933c:	b40e      	push	{r1, r2, r3}
 800933e:	b503      	push	{r0, r1, lr}
 8009340:	4601      	mov	r1, r0
 8009342:	ab03      	add	r3, sp, #12
 8009344:	4805      	ldr	r0, [pc, #20]	; (800935c <fiprintf+0x20>)
 8009346:	f853 2b04 	ldr.w	r2, [r3], #4
 800934a:	6800      	ldr	r0, [r0, #0]
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	f000 f88f 	bl	8009470 <_vfiprintf_r>
 8009352:	b002      	add	sp, #8
 8009354:	f85d eb04 	ldr.w	lr, [sp], #4
 8009358:	b003      	add	sp, #12
 800935a:	4770      	bx	lr
 800935c:	20000010 	.word	0x20000010

08009360 <__ascii_mbtowc>:
 8009360:	b082      	sub	sp, #8
 8009362:	b901      	cbnz	r1, 8009366 <__ascii_mbtowc+0x6>
 8009364:	a901      	add	r1, sp, #4
 8009366:	b142      	cbz	r2, 800937a <__ascii_mbtowc+0x1a>
 8009368:	b14b      	cbz	r3, 800937e <__ascii_mbtowc+0x1e>
 800936a:	7813      	ldrb	r3, [r2, #0]
 800936c:	600b      	str	r3, [r1, #0]
 800936e:	7812      	ldrb	r2, [r2, #0]
 8009370:	1e10      	subs	r0, r2, #0
 8009372:	bf18      	it	ne
 8009374:	2001      	movne	r0, #1
 8009376:	b002      	add	sp, #8
 8009378:	4770      	bx	lr
 800937a:	4610      	mov	r0, r2
 800937c:	e7fb      	b.n	8009376 <__ascii_mbtowc+0x16>
 800937e:	f06f 0001 	mvn.w	r0, #1
 8009382:	e7f8      	b.n	8009376 <__ascii_mbtowc+0x16>

08009384 <memmove>:
 8009384:	4288      	cmp	r0, r1
 8009386:	b510      	push	{r4, lr}
 8009388:	eb01 0402 	add.w	r4, r1, r2
 800938c:	d902      	bls.n	8009394 <memmove+0x10>
 800938e:	4284      	cmp	r4, r0
 8009390:	4623      	mov	r3, r4
 8009392:	d807      	bhi.n	80093a4 <memmove+0x20>
 8009394:	1e43      	subs	r3, r0, #1
 8009396:	42a1      	cmp	r1, r4
 8009398:	d008      	beq.n	80093ac <memmove+0x28>
 800939a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800939e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093a2:	e7f8      	b.n	8009396 <memmove+0x12>
 80093a4:	4402      	add	r2, r0
 80093a6:	4601      	mov	r1, r0
 80093a8:	428a      	cmp	r2, r1
 80093aa:	d100      	bne.n	80093ae <memmove+0x2a>
 80093ac:	bd10      	pop	{r4, pc}
 80093ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093b6:	e7f7      	b.n	80093a8 <memmove+0x24>

080093b8 <__malloc_lock>:
 80093b8:	4801      	ldr	r0, [pc, #4]	; (80093c0 <__malloc_lock+0x8>)
 80093ba:	f000 bc17 	b.w	8009bec <__retarget_lock_acquire_recursive>
 80093be:	bf00      	nop
 80093c0:	200049dc 	.word	0x200049dc

080093c4 <__malloc_unlock>:
 80093c4:	4801      	ldr	r0, [pc, #4]	; (80093cc <__malloc_unlock+0x8>)
 80093c6:	f000 bc12 	b.w	8009bee <__retarget_lock_release_recursive>
 80093ca:	bf00      	nop
 80093cc:	200049dc 	.word	0x200049dc

080093d0 <_realloc_r>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	4607      	mov	r7, r0
 80093d4:	4614      	mov	r4, r2
 80093d6:	460e      	mov	r6, r1
 80093d8:	b921      	cbnz	r1, 80093e4 <_realloc_r+0x14>
 80093da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093de:	4611      	mov	r1, r2
 80093e0:	f7ff bdc8 	b.w	8008f74 <_malloc_r>
 80093e4:	b922      	cbnz	r2, 80093f0 <_realloc_r+0x20>
 80093e6:	f7ff fd75 	bl	8008ed4 <_free_r>
 80093ea:	4625      	mov	r5, r4
 80093ec:	4628      	mov	r0, r5
 80093ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093f0:	f000 fc62 	bl	8009cb8 <_malloc_usable_size_r>
 80093f4:	42a0      	cmp	r0, r4
 80093f6:	d20f      	bcs.n	8009418 <_realloc_r+0x48>
 80093f8:	4621      	mov	r1, r4
 80093fa:	4638      	mov	r0, r7
 80093fc:	f7ff fdba 	bl	8008f74 <_malloc_r>
 8009400:	4605      	mov	r5, r0
 8009402:	2800      	cmp	r0, #0
 8009404:	d0f2      	beq.n	80093ec <_realloc_r+0x1c>
 8009406:	4631      	mov	r1, r6
 8009408:	4622      	mov	r2, r4
 800940a:	f7fd feb1 	bl	8007170 <memcpy>
 800940e:	4631      	mov	r1, r6
 8009410:	4638      	mov	r0, r7
 8009412:	f7ff fd5f 	bl	8008ed4 <_free_r>
 8009416:	e7e9      	b.n	80093ec <_realloc_r+0x1c>
 8009418:	4635      	mov	r5, r6
 800941a:	e7e7      	b.n	80093ec <_realloc_r+0x1c>

0800941c <__sfputc_r>:
 800941c:	6893      	ldr	r3, [r2, #8]
 800941e:	3b01      	subs	r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	b410      	push	{r4}
 8009424:	6093      	str	r3, [r2, #8]
 8009426:	da08      	bge.n	800943a <__sfputc_r+0x1e>
 8009428:	6994      	ldr	r4, [r2, #24]
 800942a:	42a3      	cmp	r3, r4
 800942c:	db01      	blt.n	8009432 <__sfputc_r+0x16>
 800942e:	290a      	cmp	r1, #10
 8009430:	d103      	bne.n	800943a <__sfputc_r+0x1e>
 8009432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009436:	f000 b94b 	b.w	80096d0 <__swbuf_r>
 800943a:	6813      	ldr	r3, [r2, #0]
 800943c:	1c58      	adds	r0, r3, #1
 800943e:	6010      	str	r0, [r2, #0]
 8009440:	7019      	strb	r1, [r3, #0]
 8009442:	4608      	mov	r0, r1
 8009444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009448:	4770      	bx	lr

0800944a <__sfputs_r>:
 800944a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944c:	4606      	mov	r6, r0
 800944e:	460f      	mov	r7, r1
 8009450:	4614      	mov	r4, r2
 8009452:	18d5      	adds	r5, r2, r3
 8009454:	42ac      	cmp	r4, r5
 8009456:	d101      	bne.n	800945c <__sfputs_r+0x12>
 8009458:	2000      	movs	r0, #0
 800945a:	e007      	b.n	800946c <__sfputs_r+0x22>
 800945c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009460:	463a      	mov	r2, r7
 8009462:	4630      	mov	r0, r6
 8009464:	f7ff ffda 	bl	800941c <__sfputc_r>
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	d1f3      	bne.n	8009454 <__sfputs_r+0xa>
 800946c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009470 <_vfiprintf_r>:
 8009470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	460d      	mov	r5, r1
 8009476:	b09d      	sub	sp, #116	; 0x74
 8009478:	4614      	mov	r4, r2
 800947a:	4698      	mov	r8, r3
 800947c:	4606      	mov	r6, r0
 800947e:	b118      	cbz	r0, 8009488 <_vfiprintf_r+0x18>
 8009480:	6983      	ldr	r3, [r0, #24]
 8009482:	b90b      	cbnz	r3, 8009488 <_vfiprintf_r+0x18>
 8009484:	f000 fb14 	bl	8009ab0 <__sinit>
 8009488:	4b89      	ldr	r3, [pc, #548]	; (80096b0 <_vfiprintf_r+0x240>)
 800948a:	429d      	cmp	r5, r3
 800948c:	d11b      	bne.n	80094c6 <_vfiprintf_r+0x56>
 800948e:	6875      	ldr	r5, [r6, #4]
 8009490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009492:	07d9      	lsls	r1, r3, #31
 8009494:	d405      	bmi.n	80094a2 <_vfiprintf_r+0x32>
 8009496:	89ab      	ldrh	r3, [r5, #12]
 8009498:	059a      	lsls	r2, r3, #22
 800949a:	d402      	bmi.n	80094a2 <_vfiprintf_r+0x32>
 800949c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800949e:	f000 fba5 	bl	8009bec <__retarget_lock_acquire_recursive>
 80094a2:	89ab      	ldrh	r3, [r5, #12]
 80094a4:	071b      	lsls	r3, r3, #28
 80094a6:	d501      	bpl.n	80094ac <_vfiprintf_r+0x3c>
 80094a8:	692b      	ldr	r3, [r5, #16]
 80094aa:	b9eb      	cbnz	r3, 80094e8 <_vfiprintf_r+0x78>
 80094ac:	4629      	mov	r1, r5
 80094ae:	4630      	mov	r0, r6
 80094b0:	f000 f96e 	bl	8009790 <__swsetup_r>
 80094b4:	b1c0      	cbz	r0, 80094e8 <_vfiprintf_r+0x78>
 80094b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094b8:	07dc      	lsls	r4, r3, #31
 80094ba:	d50e      	bpl.n	80094da <_vfiprintf_r+0x6a>
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295
 80094c0:	b01d      	add	sp, #116	; 0x74
 80094c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c6:	4b7b      	ldr	r3, [pc, #492]	; (80096b4 <_vfiprintf_r+0x244>)
 80094c8:	429d      	cmp	r5, r3
 80094ca:	d101      	bne.n	80094d0 <_vfiprintf_r+0x60>
 80094cc:	68b5      	ldr	r5, [r6, #8]
 80094ce:	e7df      	b.n	8009490 <_vfiprintf_r+0x20>
 80094d0:	4b79      	ldr	r3, [pc, #484]	; (80096b8 <_vfiprintf_r+0x248>)
 80094d2:	429d      	cmp	r5, r3
 80094d4:	bf08      	it	eq
 80094d6:	68f5      	ldreq	r5, [r6, #12]
 80094d8:	e7da      	b.n	8009490 <_vfiprintf_r+0x20>
 80094da:	89ab      	ldrh	r3, [r5, #12]
 80094dc:	0598      	lsls	r0, r3, #22
 80094de:	d4ed      	bmi.n	80094bc <_vfiprintf_r+0x4c>
 80094e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094e2:	f000 fb84 	bl	8009bee <__retarget_lock_release_recursive>
 80094e6:	e7e9      	b.n	80094bc <_vfiprintf_r+0x4c>
 80094e8:	2300      	movs	r3, #0
 80094ea:	9309      	str	r3, [sp, #36]	; 0x24
 80094ec:	2320      	movs	r3, #32
 80094ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80094f6:	2330      	movs	r3, #48	; 0x30
 80094f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80096bc <_vfiprintf_r+0x24c>
 80094fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009500:	f04f 0901 	mov.w	r9, #1
 8009504:	4623      	mov	r3, r4
 8009506:	469a      	mov	sl, r3
 8009508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800950c:	b10a      	cbz	r2, 8009512 <_vfiprintf_r+0xa2>
 800950e:	2a25      	cmp	r2, #37	; 0x25
 8009510:	d1f9      	bne.n	8009506 <_vfiprintf_r+0x96>
 8009512:	ebba 0b04 	subs.w	fp, sl, r4
 8009516:	d00b      	beq.n	8009530 <_vfiprintf_r+0xc0>
 8009518:	465b      	mov	r3, fp
 800951a:	4622      	mov	r2, r4
 800951c:	4629      	mov	r1, r5
 800951e:	4630      	mov	r0, r6
 8009520:	f7ff ff93 	bl	800944a <__sfputs_r>
 8009524:	3001      	adds	r0, #1
 8009526:	f000 80aa 	beq.w	800967e <_vfiprintf_r+0x20e>
 800952a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800952c:	445a      	add	r2, fp
 800952e:	9209      	str	r2, [sp, #36]	; 0x24
 8009530:	f89a 3000 	ldrb.w	r3, [sl]
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 80a2 	beq.w	800967e <_vfiprintf_r+0x20e>
 800953a:	2300      	movs	r3, #0
 800953c:	f04f 32ff 	mov.w	r2, #4294967295
 8009540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009544:	f10a 0a01 	add.w	sl, sl, #1
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	9307      	str	r3, [sp, #28]
 800954c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009550:	931a      	str	r3, [sp, #104]	; 0x68
 8009552:	4654      	mov	r4, sl
 8009554:	2205      	movs	r2, #5
 8009556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800955a:	4858      	ldr	r0, [pc, #352]	; (80096bc <_vfiprintf_r+0x24c>)
 800955c:	f7f6 fe48 	bl	80001f0 <memchr>
 8009560:	9a04      	ldr	r2, [sp, #16]
 8009562:	b9d8      	cbnz	r0, 800959c <_vfiprintf_r+0x12c>
 8009564:	06d1      	lsls	r1, r2, #27
 8009566:	bf44      	itt	mi
 8009568:	2320      	movmi	r3, #32
 800956a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800956e:	0713      	lsls	r3, r2, #28
 8009570:	bf44      	itt	mi
 8009572:	232b      	movmi	r3, #43	; 0x2b
 8009574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009578:	f89a 3000 	ldrb.w	r3, [sl]
 800957c:	2b2a      	cmp	r3, #42	; 0x2a
 800957e:	d015      	beq.n	80095ac <_vfiprintf_r+0x13c>
 8009580:	9a07      	ldr	r2, [sp, #28]
 8009582:	4654      	mov	r4, sl
 8009584:	2000      	movs	r0, #0
 8009586:	f04f 0c0a 	mov.w	ip, #10
 800958a:	4621      	mov	r1, r4
 800958c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009590:	3b30      	subs	r3, #48	; 0x30
 8009592:	2b09      	cmp	r3, #9
 8009594:	d94e      	bls.n	8009634 <_vfiprintf_r+0x1c4>
 8009596:	b1b0      	cbz	r0, 80095c6 <_vfiprintf_r+0x156>
 8009598:	9207      	str	r2, [sp, #28]
 800959a:	e014      	b.n	80095c6 <_vfiprintf_r+0x156>
 800959c:	eba0 0308 	sub.w	r3, r0, r8
 80095a0:	fa09 f303 	lsl.w	r3, r9, r3
 80095a4:	4313      	orrs	r3, r2
 80095a6:	9304      	str	r3, [sp, #16]
 80095a8:	46a2      	mov	sl, r4
 80095aa:	e7d2      	b.n	8009552 <_vfiprintf_r+0xe2>
 80095ac:	9b03      	ldr	r3, [sp, #12]
 80095ae:	1d19      	adds	r1, r3, #4
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	9103      	str	r1, [sp, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	bfbb      	ittet	lt
 80095b8:	425b      	neglt	r3, r3
 80095ba:	f042 0202 	orrlt.w	r2, r2, #2
 80095be:	9307      	strge	r3, [sp, #28]
 80095c0:	9307      	strlt	r3, [sp, #28]
 80095c2:	bfb8      	it	lt
 80095c4:	9204      	strlt	r2, [sp, #16]
 80095c6:	7823      	ldrb	r3, [r4, #0]
 80095c8:	2b2e      	cmp	r3, #46	; 0x2e
 80095ca:	d10c      	bne.n	80095e6 <_vfiprintf_r+0x176>
 80095cc:	7863      	ldrb	r3, [r4, #1]
 80095ce:	2b2a      	cmp	r3, #42	; 0x2a
 80095d0:	d135      	bne.n	800963e <_vfiprintf_r+0x1ce>
 80095d2:	9b03      	ldr	r3, [sp, #12]
 80095d4:	1d1a      	adds	r2, r3, #4
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	9203      	str	r2, [sp, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	bfb8      	it	lt
 80095de:	f04f 33ff 	movlt.w	r3, #4294967295
 80095e2:	3402      	adds	r4, #2
 80095e4:	9305      	str	r3, [sp, #20]
 80095e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096cc <_vfiprintf_r+0x25c>
 80095ea:	7821      	ldrb	r1, [r4, #0]
 80095ec:	2203      	movs	r2, #3
 80095ee:	4650      	mov	r0, sl
 80095f0:	f7f6 fdfe 	bl	80001f0 <memchr>
 80095f4:	b140      	cbz	r0, 8009608 <_vfiprintf_r+0x198>
 80095f6:	2340      	movs	r3, #64	; 0x40
 80095f8:	eba0 000a 	sub.w	r0, r0, sl
 80095fc:	fa03 f000 	lsl.w	r0, r3, r0
 8009600:	9b04      	ldr	r3, [sp, #16]
 8009602:	4303      	orrs	r3, r0
 8009604:	3401      	adds	r4, #1
 8009606:	9304      	str	r3, [sp, #16]
 8009608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960c:	482c      	ldr	r0, [pc, #176]	; (80096c0 <_vfiprintf_r+0x250>)
 800960e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009612:	2206      	movs	r2, #6
 8009614:	f7f6 fdec 	bl	80001f0 <memchr>
 8009618:	2800      	cmp	r0, #0
 800961a:	d03f      	beq.n	800969c <_vfiprintf_r+0x22c>
 800961c:	4b29      	ldr	r3, [pc, #164]	; (80096c4 <_vfiprintf_r+0x254>)
 800961e:	bb1b      	cbnz	r3, 8009668 <_vfiprintf_r+0x1f8>
 8009620:	9b03      	ldr	r3, [sp, #12]
 8009622:	3307      	adds	r3, #7
 8009624:	f023 0307 	bic.w	r3, r3, #7
 8009628:	3308      	adds	r3, #8
 800962a:	9303      	str	r3, [sp, #12]
 800962c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800962e:	443b      	add	r3, r7
 8009630:	9309      	str	r3, [sp, #36]	; 0x24
 8009632:	e767      	b.n	8009504 <_vfiprintf_r+0x94>
 8009634:	fb0c 3202 	mla	r2, ip, r2, r3
 8009638:	460c      	mov	r4, r1
 800963a:	2001      	movs	r0, #1
 800963c:	e7a5      	b.n	800958a <_vfiprintf_r+0x11a>
 800963e:	2300      	movs	r3, #0
 8009640:	3401      	adds	r4, #1
 8009642:	9305      	str	r3, [sp, #20]
 8009644:	4619      	mov	r1, r3
 8009646:	f04f 0c0a 	mov.w	ip, #10
 800964a:	4620      	mov	r0, r4
 800964c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009650:	3a30      	subs	r2, #48	; 0x30
 8009652:	2a09      	cmp	r2, #9
 8009654:	d903      	bls.n	800965e <_vfiprintf_r+0x1ee>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0c5      	beq.n	80095e6 <_vfiprintf_r+0x176>
 800965a:	9105      	str	r1, [sp, #20]
 800965c:	e7c3      	b.n	80095e6 <_vfiprintf_r+0x176>
 800965e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009662:	4604      	mov	r4, r0
 8009664:	2301      	movs	r3, #1
 8009666:	e7f0      	b.n	800964a <_vfiprintf_r+0x1da>
 8009668:	ab03      	add	r3, sp, #12
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	462a      	mov	r2, r5
 800966e:	4b16      	ldr	r3, [pc, #88]	; (80096c8 <_vfiprintf_r+0x258>)
 8009670:	a904      	add	r1, sp, #16
 8009672:	4630      	mov	r0, r6
 8009674:	f7fd fe32 	bl	80072dc <_printf_float>
 8009678:	4607      	mov	r7, r0
 800967a:	1c78      	adds	r0, r7, #1
 800967c:	d1d6      	bne.n	800962c <_vfiprintf_r+0x1bc>
 800967e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009680:	07d9      	lsls	r1, r3, #31
 8009682:	d405      	bmi.n	8009690 <_vfiprintf_r+0x220>
 8009684:	89ab      	ldrh	r3, [r5, #12]
 8009686:	059a      	lsls	r2, r3, #22
 8009688:	d402      	bmi.n	8009690 <_vfiprintf_r+0x220>
 800968a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800968c:	f000 faaf 	bl	8009bee <__retarget_lock_release_recursive>
 8009690:	89ab      	ldrh	r3, [r5, #12]
 8009692:	065b      	lsls	r3, r3, #25
 8009694:	f53f af12 	bmi.w	80094bc <_vfiprintf_r+0x4c>
 8009698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800969a:	e711      	b.n	80094c0 <_vfiprintf_r+0x50>
 800969c:	ab03      	add	r3, sp, #12
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	462a      	mov	r2, r5
 80096a2:	4b09      	ldr	r3, [pc, #36]	; (80096c8 <_vfiprintf_r+0x258>)
 80096a4:	a904      	add	r1, sp, #16
 80096a6:	4630      	mov	r0, r6
 80096a8:	f7fe f8bc 	bl	8007824 <_printf_i>
 80096ac:	e7e4      	b.n	8009678 <_vfiprintf_r+0x208>
 80096ae:	bf00      	nop
 80096b0:	0800a2dc 	.word	0x0800a2dc
 80096b4:	0800a2fc 	.word	0x0800a2fc
 80096b8:	0800a2bc 	.word	0x0800a2bc
 80096bc:	0800a164 	.word	0x0800a164
 80096c0:	0800a16e 	.word	0x0800a16e
 80096c4:	080072dd 	.word	0x080072dd
 80096c8:	0800944b 	.word	0x0800944b
 80096cc:	0800a16a 	.word	0x0800a16a

080096d0 <__swbuf_r>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	460e      	mov	r6, r1
 80096d4:	4614      	mov	r4, r2
 80096d6:	4605      	mov	r5, r0
 80096d8:	b118      	cbz	r0, 80096e2 <__swbuf_r+0x12>
 80096da:	6983      	ldr	r3, [r0, #24]
 80096dc:	b90b      	cbnz	r3, 80096e2 <__swbuf_r+0x12>
 80096de:	f000 f9e7 	bl	8009ab0 <__sinit>
 80096e2:	4b21      	ldr	r3, [pc, #132]	; (8009768 <__swbuf_r+0x98>)
 80096e4:	429c      	cmp	r4, r3
 80096e6:	d12b      	bne.n	8009740 <__swbuf_r+0x70>
 80096e8:	686c      	ldr	r4, [r5, #4]
 80096ea:	69a3      	ldr	r3, [r4, #24]
 80096ec:	60a3      	str	r3, [r4, #8]
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	071a      	lsls	r2, r3, #28
 80096f2:	d52f      	bpl.n	8009754 <__swbuf_r+0x84>
 80096f4:	6923      	ldr	r3, [r4, #16]
 80096f6:	b36b      	cbz	r3, 8009754 <__swbuf_r+0x84>
 80096f8:	6923      	ldr	r3, [r4, #16]
 80096fa:	6820      	ldr	r0, [r4, #0]
 80096fc:	1ac0      	subs	r0, r0, r3
 80096fe:	6963      	ldr	r3, [r4, #20]
 8009700:	b2f6      	uxtb	r6, r6
 8009702:	4283      	cmp	r3, r0
 8009704:	4637      	mov	r7, r6
 8009706:	dc04      	bgt.n	8009712 <__swbuf_r+0x42>
 8009708:	4621      	mov	r1, r4
 800970a:	4628      	mov	r0, r5
 800970c:	f000 f93c 	bl	8009988 <_fflush_r>
 8009710:	bb30      	cbnz	r0, 8009760 <__swbuf_r+0x90>
 8009712:	68a3      	ldr	r3, [r4, #8]
 8009714:	3b01      	subs	r3, #1
 8009716:	60a3      	str	r3, [r4, #8]
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	1c5a      	adds	r2, r3, #1
 800971c:	6022      	str	r2, [r4, #0]
 800971e:	701e      	strb	r6, [r3, #0]
 8009720:	6963      	ldr	r3, [r4, #20]
 8009722:	3001      	adds	r0, #1
 8009724:	4283      	cmp	r3, r0
 8009726:	d004      	beq.n	8009732 <__swbuf_r+0x62>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	07db      	lsls	r3, r3, #31
 800972c:	d506      	bpl.n	800973c <__swbuf_r+0x6c>
 800972e:	2e0a      	cmp	r6, #10
 8009730:	d104      	bne.n	800973c <__swbuf_r+0x6c>
 8009732:	4621      	mov	r1, r4
 8009734:	4628      	mov	r0, r5
 8009736:	f000 f927 	bl	8009988 <_fflush_r>
 800973a:	b988      	cbnz	r0, 8009760 <__swbuf_r+0x90>
 800973c:	4638      	mov	r0, r7
 800973e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009740:	4b0a      	ldr	r3, [pc, #40]	; (800976c <__swbuf_r+0x9c>)
 8009742:	429c      	cmp	r4, r3
 8009744:	d101      	bne.n	800974a <__swbuf_r+0x7a>
 8009746:	68ac      	ldr	r4, [r5, #8]
 8009748:	e7cf      	b.n	80096ea <__swbuf_r+0x1a>
 800974a:	4b09      	ldr	r3, [pc, #36]	; (8009770 <__swbuf_r+0xa0>)
 800974c:	429c      	cmp	r4, r3
 800974e:	bf08      	it	eq
 8009750:	68ec      	ldreq	r4, [r5, #12]
 8009752:	e7ca      	b.n	80096ea <__swbuf_r+0x1a>
 8009754:	4621      	mov	r1, r4
 8009756:	4628      	mov	r0, r5
 8009758:	f000 f81a 	bl	8009790 <__swsetup_r>
 800975c:	2800      	cmp	r0, #0
 800975e:	d0cb      	beq.n	80096f8 <__swbuf_r+0x28>
 8009760:	f04f 37ff 	mov.w	r7, #4294967295
 8009764:	e7ea      	b.n	800973c <__swbuf_r+0x6c>
 8009766:	bf00      	nop
 8009768:	0800a2dc 	.word	0x0800a2dc
 800976c:	0800a2fc 	.word	0x0800a2fc
 8009770:	0800a2bc 	.word	0x0800a2bc

08009774 <__ascii_wctomb>:
 8009774:	b149      	cbz	r1, 800978a <__ascii_wctomb+0x16>
 8009776:	2aff      	cmp	r2, #255	; 0xff
 8009778:	bf85      	ittet	hi
 800977a:	238a      	movhi	r3, #138	; 0x8a
 800977c:	6003      	strhi	r3, [r0, #0]
 800977e:	700a      	strbls	r2, [r1, #0]
 8009780:	f04f 30ff 	movhi.w	r0, #4294967295
 8009784:	bf98      	it	ls
 8009786:	2001      	movls	r0, #1
 8009788:	4770      	bx	lr
 800978a:	4608      	mov	r0, r1
 800978c:	4770      	bx	lr
	...

08009790 <__swsetup_r>:
 8009790:	4b32      	ldr	r3, [pc, #200]	; (800985c <__swsetup_r+0xcc>)
 8009792:	b570      	push	{r4, r5, r6, lr}
 8009794:	681d      	ldr	r5, [r3, #0]
 8009796:	4606      	mov	r6, r0
 8009798:	460c      	mov	r4, r1
 800979a:	b125      	cbz	r5, 80097a6 <__swsetup_r+0x16>
 800979c:	69ab      	ldr	r3, [r5, #24]
 800979e:	b913      	cbnz	r3, 80097a6 <__swsetup_r+0x16>
 80097a0:	4628      	mov	r0, r5
 80097a2:	f000 f985 	bl	8009ab0 <__sinit>
 80097a6:	4b2e      	ldr	r3, [pc, #184]	; (8009860 <__swsetup_r+0xd0>)
 80097a8:	429c      	cmp	r4, r3
 80097aa:	d10f      	bne.n	80097cc <__swsetup_r+0x3c>
 80097ac:	686c      	ldr	r4, [r5, #4]
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097b4:	0719      	lsls	r1, r3, #28
 80097b6:	d42c      	bmi.n	8009812 <__swsetup_r+0x82>
 80097b8:	06dd      	lsls	r5, r3, #27
 80097ba:	d411      	bmi.n	80097e0 <__swsetup_r+0x50>
 80097bc:	2309      	movs	r3, #9
 80097be:	6033      	str	r3, [r6, #0]
 80097c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097c4:	81a3      	strh	r3, [r4, #12]
 80097c6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ca:	e03e      	b.n	800984a <__swsetup_r+0xba>
 80097cc:	4b25      	ldr	r3, [pc, #148]	; (8009864 <__swsetup_r+0xd4>)
 80097ce:	429c      	cmp	r4, r3
 80097d0:	d101      	bne.n	80097d6 <__swsetup_r+0x46>
 80097d2:	68ac      	ldr	r4, [r5, #8]
 80097d4:	e7eb      	b.n	80097ae <__swsetup_r+0x1e>
 80097d6:	4b24      	ldr	r3, [pc, #144]	; (8009868 <__swsetup_r+0xd8>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	bf08      	it	eq
 80097dc:	68ec      	ldreq	r4, [r5, #12]
 80097de:	e7e6      	b.n	80097ae <__swsetup_r+0x1e>
 80097e0:	0758      	lsls	r0, r3, #29
 80097e2:	d512      	bpl.n	800980a <__swsetup_r+0x7a>
 80097e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097e6:	b141      	cbz	r1, 80097fa <__swsetup_r+0x6a>
 80097e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097ec:	4299      	cmp	r1, r3
 80097ee:	d002      	beq.n	80097f6 <__swsetup_r+0x66>
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7ff fb6f 	bl	8008ed4 <_free_r>
 80097f6:	2300      	movs	r3, #0
 80097f8:	6363      	str	r3, [r4, #52]	; 0x34
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	2300      	movs	r3, #0
 8009804:	6063      	str	r3, [r4, #4]
 8009806:	6923      	ldr	r3, [r4, #16]
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	f043 0308 	orr.w	r3, r3, #8
 8009810:	81a3      	strh	r3, [r4, #12]
 8009812:	6923      	ldr	r3, [r4, #16]
 8009814:	b94b      	cbnz	r3, 800982a <__swsetup_r+0x9a>
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800981c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009820:	d003      	beq.n	800982a <__swsetup_r+0x9a>
 8009822:	4621      	mov	r1, r4
 8009824:	4630      	mov	r0, r6
 8009826:	f000 fa07 	bl	8009c38 <__smakebuf_r>
 800982a:	89a0      	ldrh	r0, [r4, #12]
 800982c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009830:	f010 0301 	ands.w	r3, r0, #1
 8009834:	d00a      	beq.n	800984c <__swsetup_r+0xbc>
 8009836:	2300      	movs	r3, #0
 8009838:	60a3      	str	r3, [r4, #8]
 800983a:	6963      	ldr	r3, [r4, #20]
 800983c:	425b      	negs	r3, r3
 800983e:	61a3      	str	r3, [r4, #24]
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	b943      	cbnz	r3, 8009856 <__swsetup_r+0xc6>
 8009844:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009848:	d1ba      	bne.n	80097c0 <__swsetup_r+0x30>
 800984a:	bd70      	pop	{r4, r5, r6, pc}
 800984c:	0781      	lsls	r1, r0, #30
 800984e:	bf58      	it	pl
 8009850:	6963      	ldrpl	r3, [r4, #20]
 8009852:	60a3      	str	r3, [r4, #8]
 8009854:	e7f4      	b.n	8009840 <__swsetup_r+0xb0>
 8009856:	2000      	movs	r0, #0
 8009858:	e7f7      	b.n	800984a <__swsetup_r+0xba>
 800985a:	bf00      	nop
 800985c:	20000010 	.word	0x20000010
 8009860:	0800a2dc 	.word	0x0800a2dc
 8009864:	0800a2fc 	.word	0x0800a2fc
 8009868:	0800a2bc 	.word	0x0800a2bc

0800986c <abort>:
 800986c:	b508      	push	{r3, lr}
 800986e:	2006      	movs	r0, #6
 8009870:	f000 fa52 	bl	8009d18 <raise>
 8009874:	2001      	movs	r0, #1
 8009876:	f7f7 ff6d 	bl	8001754 <_exit>
	...

0800987c <__sflush_r>:
 800987c:	898a      	ldrh	r2, [r1, #12]
 800987e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009882:	4605      	mov	r5, r0
 8009884:	0710      	lsls	r0, r2, #28
 8009886:	460c      	mov	r4, r1
 8009888:	d458      	bmi.n	800993c <__sflush_r+0xc0>
 800988a:	684b      	ldr	r3, [r1, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	dc05      	bgt.n	800989c <__sflush_r+0x20>
 8009890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009892:	2b00      	cmp	r3, #0
 8009894:	dc02      	bgt.n	800989c <__sflush_r+0x20>
 8009896:	2000      	movs	r0, #0
 8009898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800989c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800989e:	2e00      	cmp	r6, #0
 80098a0:	d0f9      	beq.n	8009896 <__sflush_r+0x1a>
 80098a2:	2300      	movs	r3, #0
 80098a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098a8:	682f      	ldr	r7, [r5, #0]
 80098aa:	602b      	str	r3, [r5, #0]
 80098ac:	d032      	beq.n	8009914 <__sflush_r+0x98>
 80098ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	075a      	lsls	r2, r3, #29
 80098b4:	d505      	bpl.n	80098c2 <__sflush_r+0x46>
 80098b6:	6863      	ldr	r3, [r4, #4]
 80098b8:	1ac0      	subs	r0, r0, r3
 80098ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098bc:	b10b      	cbz	r3, 80098c2 <__sflush_r+0x46>
 80098be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098c0:	1ac0      	subs	r0, r0, r3
 80098c2:	2300      	movs	r3, #0
 80098c4:	4602      	mov	r2, r0
 80098c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098c8:	6a21      	ldr	r1, [r4, #32]
 80098ca:	4628      	mov	r0, r5
 80098cc:	47b0      	blx	r6
 80098ce:	1c43      	adds	r3, r0, #1
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	d106      	bne.n	80098e2 <__sflush_r+0x66>
 80098d4:	6829      	ldr	r1, [r5, #0]
 80098d6:	291d      	cmp	r1, #29
 80098d8:	d82c      	bhi.n	8009934 <__sflush_r+0xb8>
 80098da:	4a2a      	ldr	r2, [pc, #168]	; (8009984 <__sflush_r+0x108>)
 80098dc:	40ca      	lsrs	r2, r1
 80098de:	07d6      	lsls	r6, r2, #31
 80098e0:	d528      	bpl.n	8009934 <__sflush_r+0xb8>
 80098e2:	2200      	movs	r2, #0
 80098e4:	6062      	str	r2, [r4, #4]
 80098e6:	04d9      	lsls	r1, r3, #19
 80098e8:	6922      	ldr	r2, [r4, #16]
 80098ea:	6022      	str	r2, [r4, #0]
 80098ec:	d504      	bpl.n	80098f8 <__sflush_r+0x7c>
 80098ee:	1c42      	adds	r2, r0, #1
 80098f0:	d101      	bne.n	80098f6 <__sflush_r+0x7a>
 80098f2:	682b      	ldr	r3, [r5, #0]
 80098f4:	b903      	cbnz	r3, 80098f8 <__sflush_r+0x7c>
 80098f6:	6560      	str	r0, [r4, #84]	; 0x54
 80098f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098fa:	602f      	str	r7, [r5, #0]
 80098fc:	2900      	cmp	r1, #0
 80098fe:	d0ca      	beq.n	8009896 <__sflush_r+0x1a>
 8009900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009904:	4299      	cmp	r1, r3
 8009906:	d002      	beq.n	800990e <__sflush_r+0x92>
 8009908:	4628      	mov	r0, r5
 800990a:	f7ff fae3 	bl	8008ed4 <_free_r>
 800990e:	2000      	movs	r0, #0
 8009910:	6360      	str	r0, [r4, #52]	; 0x34
 8009912:	e7c1      	b.n	8009898 <__sflush_r+0x1c>
 8009914:	6a21      	ldr	r1, [r4, #32]
 8009916:	2301      	movs	r3, #1
 8009918:	4628      	mov	r0, r5
 800991a:	47b0      	blx	r6
 800991c:	1c41      	adds	r1, r0, #1
 800991e:	d1c7      	bne.n	80098b0 <__sflush_r+0x34>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0c4      	beq.n	80098b0 <__sflush_r+0x34>
 8009926:	2b1d      	cmp	r3, #29
 8009928:	d001      	beq.n	800992e <__sflush_r+0xb2>
 800992a:	2b16      	cmp	r3, #22
 800992c:	d101      	bne.n	8009932 <__sflush_r+0xb6>
 800992e:	602f      	str	r7, [r5, #0]
 8009930:	e7b1      	b.n	8009896 <__sflush_r+0x1a>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	e7ad      	b.n	8009898 <__sflush_r+0x1c>
 800993c:	690f      	ldr	r7, [r1, #16]
 800993e:	2f00      	cmp	r7, #0
 8009940:	d0a9      	beq.n	8009896 <__sflush_r+0x1a>
 8009942:	0793      	lsls	r3, r2, #30
 8009944:	680e      	ldr	r6, [r1, #0]
 8009946:	bf08      	it	eq
 8009948:	694b      	ldreq	r3, [r1, #20]
 800994a:	600f      	str	r7, [r1, #0]
 800994c:	bf18      	it	ne
 800994e:	2300      	movne	r3, #0
 8009950:	eba6 0807 	sub.w	r8, r6, r7
 8009954:	608b      	str	r3, [r1, #8]
 8009956:	f1b8 0f00 	cmp.w	r8, #0
 800995a:	dd9c      	ble.n	8009896 <__sflush_r+0x1a>
 800995c:	6a21      	ldr	r1, [r4, #32]
 800995e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009960:	4643      	mov	r3, r8
 8009962:	463a      	mov	r2, r7
 8009964:	4628      	mov	r0, r5
 8009966:	47b0      	blx	r6
 8009968:	2800      	cmp	r0, #0
 800996a:	dc06      	bgt.n	800997a <__sflush_r+0xfe>
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	f04f 30ff 	mov.w	r0, #4294967295
 8009978:	e78e      	b.n	8009898 <__sflush_r+0x1c>
 800997a:	4407      	add	r7, r0
 800997c:	eba8 0800 	sub.w	r8, r8, r0
 8009980:	e7e9      	b.n	8009956 <__sflush_r+0xda>
 8009982:	bf00      	nop
 8009984:	20400001 	.word	0x20400001

08009988 <_fflush_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	690b      	ldr	r3, [r1, #16]
 800998c:	4605      	mov	r5, r0
 800998e:	460c      	mov	r4, r1
 8009990:	b913      	cbnz	r3, 8009998 <_fflush_r+0x10>
 8009992:	2500      	movs	r5, #0
 8009994:	4628      	mov	r0, r5
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	b118      	cbz	r0, 80099a2 <_fflush_r+0x1a>
 800999a:	6983      	ldr	r3, [r0, #24]
 800999c:	b90b      	cbnz	r3, 80099a2 <_fflush_r+0x1a>
 800999e:	f000 f887 	bl	8009ab0 <__sinit>
 80099a2:	4b14      	ldr	r3, [pc, #80]	; (80099f4 <_fflush_r+0x6c>)
 80099a4:	429c      	cmp	r4, r3
 80099a6:	d11b      	bne.n	80099e0 <_fflush_r+0x58>
 80099a8:	686c      	ldr	r4, [r5, #4]
 80099aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d0ef      	beq.n	8009992 <_fflush_r+0xa>
 80099b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099b4:	07d0      	lsls	r0, r2, #31
 80099b6:	d404      	bmi.n	80099c2 <_fflush_r+0x3a>
 80099b8:	0599      	lsls	r1, r3, #22
 80099ba:	d402      	bmi.n	80099c2 <_fflush_r+0x3a>
 80099bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099be:	f000 f915 	bl	8009bec <__retarget_lock_acquire_recursive>
 80099c2:	4628      	mov	r0, r5
 80099c4:	4621      	mov	r1, r4
 80099c6:	f7ff ff59 	bl	800987c <__sflush_r>
 80099ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099cc:	07da      	lsls	r2, r3, #31
 80099ce:	4605      	mov	r5, r0
 80099d0:	d4e0      	bmi.n	8009994 <_fflush_r+0xc>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	059b      	lsls	r3, r3, #22
 80099d6:	d4dd      	bmi.n	8009994 <_fflush_r+0xc>
 80099d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099da:	f000 f908 	bl	8009bee <__retarget_lock_release_recursive>
 80099de:	e7d9      	b.n	8009994 <_fflush_r+0xc>
 80099e0:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <_fflush_r+0x70>)
 80099e2:	429c      	cmp	r4, r3
 80099e4:	d101      	bne.n	80099ea <_fflush_r+0x62>
 80099e6:	68ac      	ldr	r4, [r5, #8]
 80099e8:	e7df      	b.n	80099aa <_fflush_r+0x22>
 80099ea:	4b04      	ldr	r3, [pc, #16]	; (80099fc <_fflush_r+0x74>)
 80099ec:	429c      	cmp	r4, r3
 80099ee:	bf08      	it	eq
 80099f0:	68ec      	ldreq	r4, [r5, #12]
 80099f2:	e7da      	b.n	80099aa <_fflush_r+0x22>
 80099f4:	0800a2dc 	.word	0x0800a2dc
 80099f8:	0800a2fc 	.word	0x0800a2fc
 80099fc:	0800a2bc 	.word	0x0800a2bc

08009a00 <std>:
 8009a00:	2300      	movs	r3, #0
 8009a02:	b510      	push	{r4, lr}
 8009a04:	4604      	mov	r4, r0
 8009a06:	e9c0 3300 	strd	r3, r3, [r0]
 8009a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a0e:	6083      	str	r3, [r0, #8]
 8009a10:	8181      	strh	r1, [r0, #12]
 8009a12:	6643      	str	r3, [r0, #100]	; 0x64
 8009a14:	81c2      	strh	r2, [r0, #14]
 8009a16:	6183      	str	r3, [r0, #24]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	2208      	movs	r2, #8
 8009a1c:	305c      	adds	r0, #92	; 0x5c
 8009a1e:	f7fd fbb5 	bl	800718c <memset>
 8009a22:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <std+0x38>)
 8009a24:	6263      	str	r3, [r4, #36]	; 0x24
 8009a26:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <std+0x3c>)
 8009a28:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a2a:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <std+0x40>)
 8009a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a2e:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <std+0x44>)
 8009a30:	6224      	str	r4, [r4, #32]
 8009a32:	6323      	str	r3, [r4, #48]	; 0x30
 8009a34:	bd10      	pop	{r4, pc}
 8009a36:	bf00      	nop
 8009a38:	08009d51 	.word	0x08009d51
 8009a3c:	08009d73 	.word	0x08009d73
 8009a40:	08009dab 	.word	0x08009dab
 8009a44:	08009dcf 	.word	0x08009dcf

08009a48 <_cleanup_r>:
 8009a48:	4901      	ldr	r1, [pc, #4]	; (8009a50 <_cleanup_r+0x8>)
 8009a4a:	f000 b8af 	b.w	8009bac <_fwalk_reent>
 8009a4e:	bf00      	nop
 8009a50:	08009989 	.word	0x08009989

08009a54 <__sfmoreglue>:
 8009a54:	b570      	push	{r4, r5, r6, lr}
 8009a56:	1e4a      	subs	r2, r1, #1
 8009a58:	2568      	movs	r5, #104	; 0x68
 8009a5a:	4355      	muls	r5, r2
 8009a5c:	460e      	mov	r6, r1
 8009a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a62:	f7ff fa87 	bl	8008f74 <_malloc_r>
 8009a66:	4604      	mov	r4, r0
 8009a68:	b140      	cbz	r0, 8009a7c <__sfmoreglue+0x28>
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8009a70:	300c      	adds	r0, #12
 8009a72:	60a0      	str	r0, [r4, #8]
 8009a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a78:	f7fd fb88 	bl	800718c <memset>
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}

08009a80 <__sfp_lock_acquire>:
 8009a80:	4801      	ldr	r0, [pc, #4]	; (8009a88 <__sfp_lock_acquire+0x8>)
 8009a82:	f000 b8b3 	b.w	8009bec <__retarget_lock_acquire_recursive>
 8009a86:	bf00      	nop
 8009a88:	200049e0 	.word	0x200049e0

08009a8c <__sfp_lock_release>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	; (8009a94 <__sfp_lock_release+0x8>)
 8009a8e:	f000 b8ae 	b.w	8009bee <__retarget_lock_release_recursive>
 8009a92:	bf00      	nop
 8009a94:	200049e0 	.word	0x200049e0

08009a98 <__sinit_lock_acquire>:
 8009a98:	4801      	ldr	r0, [pc, #4]	; (8009aa0 <__sinit_lock_acquire+0x8>)
 8009a9a:	f000 b8a7 	b.w	8009bec <__retarget_lock_acquire_recursive>
 8009a9e:	bf00      	nop
 8009aa0:	200049db 	.word	0x200049db

08009aa4 <__sinit_lock_release>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	; (8009aac <__sinit_lock_release+0x8>)
 8009aa6:	f000 b8a2 	b.w	8009bee <__retarget_lock_release_recursive>
 8009aaa:	bf00      	nop
 8009aac:	200049db 	.word	0x200049db

08009ab0 <__sinit>:
 8009ab0:	b510      	push	{r4, lr}
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	f7ff fff0 	bl	8009a98 <__sinit_lock_acquire>
 8009ab8:	69a3      	ldr	r3, [r4, #24]
 8009aba:	b11b      	cbz	r3, 8009ac4 <__sinit+0x14>
 8009abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ac0:	f7ff bff0 	b.w	8009aa4 <__sinit_lock_release>
 8009ac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ac8:	6523      	str	r3, [r4, #80]	; 0x50
 8009aca:	4b13      	ldr	r3, [pc, #76]	; (8009b18 <__sinit+0x68>)
 8009acc:	4a13      	ldr	r2, [pc, #76]	; (8009b1c <__sinit+0x6c>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ad2:	42a3      	cmp	r3, r4
 8009ad4:	bf04      	itt	eq
 8009ad6:	2301      	moveq	r3, #1
 8009ad8:	61a3      	streq	r3, [r4, #24]
 8009ada:	4620      	mov	r0, r4
 8009adc:	f000 f820 	bl	8009b20 <__sfp>
 8009ae0:	6060      	str	r0, [r4, #4]
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f000 f81c 	bl	8009b20 <__sfp>
 8009ae8:	60a0      	str	r0, [r4, #8]
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 f818 	bl	8009b20 <__sfp>
 8009af0:	2200      	movs	r2, #0
 8009af2:	60e0      	str	r0, [r4, #12]
 8009af4:	2104      	movs	r1, #4
 8009af6:	6860      	ldr	r0, [r4, #4]
 8009af8:	f7ff ff82 	bl	8009a00 <std>
 8009afc:	68a0      	ldr	r0, [r4, #8]
 8009afe:	2201      	movs	r2, #1
 8009b00:	2109      	movs	r1, #9
 8009b02:	f7ff ff7d 	bl	8009a00 <std>
 8009b06:	68e0      	ldr	r0, [r4, #12]
 8009b08:	2202      	movs	r2, #2
 8009b0a:	2112      	movs	r1, #18
 8009b0c:	f7ff ff78 	bl	8009a00 <std>
 8009b10:	2301      	movs	r3, #1
 8009b12:	61a3      	str	r3, [r4, #24]
 8009b14:	e7d2      	b.n	8009abc <__sinit+0xc>
 8009b16:	bf00      	nop
 8009b18:	08009f3c 	.word	0x08009f3c
 8009b1c:	08009a49 	.word	0x08009a49

08009b20 <__sfp>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	4607      	mov	r7, r0
 8009b24:	f7ff ffac 	bl	8009a80 <__sfp_lock_acquire>
 8009b28:	4b1e      	ldr	r3, [pc, #120]	; (8009ba4 <__sfp+0x84>)
 8009b2a:	681e      	ldr	r6, [r3, #0]
 8009b2c:	69b3      	ldr	r3, [r6, #24]
 8009b2e:	b913      	cbnz	r3, 8009b36 <__sfp+0x16>
 8009b30:	4630      	mov	r0, r6
 8009b32:	f7ff ffbd 	bl	8009ab0 <__sinit>
 8009b36:	3648      	adds	r6, #72	; 0x48
 8009b38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	d503      	bpl.n	8009b48 <__sfp+0x28>
 8009b40:	6833      	ldr	r3, [r6, #0]
 8009b42:	b30b      	cbz	r3, 8009b88 <__sfp+0x68>
 8009b44:	6836      	ldr	r6, [r6, #0]
 8009b46:	e7f7      	b.n	8009b38 <__sfp+0x18>
 8009b48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b4c:	b9d5      	cbnz	r5, 8009b84 <__sfp+0x64>
 8009b4e:	4b16      	ldr	r3, [pc, #88]	; (8009ba8 <__sfp+0x88>)
 8009b50:	60e3      	str	r3, [r4, #12]
 8009b52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b56:	6665      	str	r5, [r4, #100]	; 0x64
 8009b58:	f000 f847 	bl	8009bea <__retarget_lock_init_recursive>
 8009b5c:	f7ff ff96 	bl	8009a8c <__sfp_lock_release>
 8009b60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b68:	6025      	str	r5, [r4, #0]
 8009b6a:	61a5      	str	r5, [r4, #24]
 8009b6c:	2208      	movs	r2, #8
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b74:	f7fd fb0a 	bl	800718c <memset>
 8009b78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b80:	4620      	mov	r0, r4
 8009b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b84:	3468      	adds	r4, #104	; 0x68
 8009b86:	e7d9      	b.n	8009b3c <__sfp+0x1c>
 8009b88:	2104      	movs	r1, #4
 8009b8a:	4638      	mov	r0, r7
 8009b8c:	f7ff ff62 	bl	8009a54 <__sfmoreglue>
 8009b90:	4604      	mov	r4, r0
 8009b92:	6030      	str	r0, [r6, #0]
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d1d5      	bne.n	8009b44 <__sfp+0x24>
 8009b98:	f7ff ff78 	bl	8009a8c <__sfp_lock_release>
 8009b9c:	230c      	movs	r3, #12
 8009b9e:	603b      	str	r3, [r7, #0]
 8009ba0:	e7ee      	b.n	8009b80 <__sfp+0x60>
 8009ba2:	bf00      	nop
 8009ba4:	08009f3c 	.word	0x08009f3c
 8009ba8:	ffff0001 	.word	0xffff0001

08009bac <_fwalk_reent>:
 8009bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	4688      	mov	r8, r1
 8009bb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bb8:	2700      	movs	r7, #0
 8009bba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bbe:	f1b9 0901 	subs.w	r9, r9, #1
 8009bc2:	d505      	bpl.n	8009bd0 <_fwalk_reent+0x24>
 8009bc4:	6824      	ldr	r4, [r4, #0]
 8009bc6:	2c00      	cmp	r4, #0
 8009bc8:	d1f7      	bne.n	8009bba <_fwalk_reent+0xe>
 8009bca:	4638      	mov	r0, r7
 8009bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bd0:	89ab      	ldrh	r3, [r5, #12]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d907      	bls.n	8009be6 <_fwalk_reent+0x3a>
 8009bd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	d003      	beq.n	8009be6 <_fwalk_reent+0x3a>
 8009bde:	4629      	mov	r1, r5
 8009be0:	4630      	mov	r0, r6
 8009be2:	47c0      	blx	r8
 8009be4:	4307      	orrs	r7, r0
 8009be6:	3568      	adds	r5, #104	; 0x68
 8009be8:	e7e9      	b.n	8009bbe <_fwalk_reent+0x12>

08009bea <__retarget_lock_init_recursive>:
 8009bea:	4770      	bx	lr

08009bec <__retarget_lock_acquire_recursive>:
 8009bec:	4770      	bx	lr

08009bee <__retarget_lock_release_recursive>:
 8009bee:	4770      	bx	lr

08009bf0 <__swhatbuf_r>:
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	460e      	mov	r6, r1
 8009bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf8:	2900      	cmp	r1, #0
 8009bfa:	b096      	sub	sp, #88	; 0x58
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	461d      	mov	r5, r3
 8009c00:	da07      	bge.n	8009c12 <__swhatbuf_r+0x22>
 8009c02:	2300      	movs	r3, #0
 8009c04:	602b      	str	r3, [r5, #0]
 8009c06:	89b3      	ldrh	r3, [r6, #12]
 8009c08:	061a      	lsls	r2, r3, #24
 8009c0a:	d410      	bmi.n	8009c2e <__swhatbuf_r+0x3e>
 8009c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c10:	e00e      	b.n	8009c30 <__swhatbuf_r+0x40>
 8009c12:	466a      	mov	r2, sp
 8009c14:	f000 f902 	bl	8009e1c <_fstat_r>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	dbf2      	blt.n	8009c02 <__swhatbuf_r+0x12>
 8009c1c:	9a01      	ldr	r2, [sp, #4]
 8009c1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c26:	425a      	negs	r2, r3
 8009c28:	415a      	adcs	r2, r3
 8009c2a:	602a      	str	r2, [r5, #0]
 8009c2c:	e7ee      	b.n	8009c0c <__swhatbuf_r+0x1c>
 8009c2e:	2340      	movs	r3, #64	; 0x40
 8009c30:	2000      	movs	r0, #0
 8009c32:	6023      	str	r3, [r4, #0]
 8009c34:	b016      	add	sp, #88	; 0x58
 8009c36:	bd70      	pop	{r4, r5, r6, pc}

08009c38 <__smakebuf_r>:
 8009c38:	898b      	ldrh	r3, [r1, #12]
 8009c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c3c:	079d      	lsls	r5, r3, #30
 8009c3e:	4606      	mov	r6, r0
 8009c40:	460c      	mov	r4, r1
 8009c42:	d507      	bpl.n	8009c54 <__smakebuf_r+0x1c>
 8009c44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	6123      	str	r3, [r4, #16]
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	6163      	str	r3, [r4, #20]
 8009c50:	b002      	add	sp, #8
 8009c52:	bd70      	pop	{r4, r5, r6, pc}
 8009c54:	ab01      	add	r3, sp, #4
 8009c56:	466a      	mov	r2, sp
 8009c58:	f7ff ffca 	bl	8009bf0 <__swhatbuf_r>
 8009c5c:	9900      	ldr	r1, [sp, #0]
 8009c5e:	4605      	mov	r5, r0
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7ff f987 	bl	8008f74 <_malloc_r>
 8009c66:	b948      	cbnz	r0, 8009c7c <__smakebuf_r+0x44>
 8009c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c6c:	059a      	lsls	r2, r3, #22
 8009c6e:	d4ef      	bmi.n	8009c50 <__smakebuf_r+0x18>
 8009c70:	f023 0303 	bic.w	r3, r3, #3
 8009c74:	f043 0302 	orr.w	r3, r3, #2
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	e7e3      	b.n	8009c44 <__smakebuf_r+0xc>
 8009c7c:	4b0d      	ldr	r3, [pc, #52]	; (8009cb4 <__smakebuf_r+0x7c>)
 8009c7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	6020      	str	r0, [r4, #0]
 8009c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c88:	81a3      	strh	r3, [r4, #12]
 8009c8a:	9b00      	ldr	r3, [sp, #0]
 8009c8c:	6163      	str	r3, [r4, #20]
 8009c8e:	9b01      	ldr	r3, [sp, #4]
 8009c90:	6120      	str	r0, [r4, #16]
 8009c92:	b15b      	cbz	r3, 8009cac <__smakebuf_r+0x74>
 8009c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f000 f8d1 	bl	8009e40 <_isatty_r>
 8009c9e:	b128      	cbz	r0, 8009cac <__smakebuf_r+0x74>
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	f023 0303 	bic.w	r3, r3, #3
 8009ca6:	f043 0301 	orr.w	r3, r3, #1
 8009caa:	81a3      	strh	r3, [r4, #12]
 8009cac:	89a0      	ldrh	r0, [r4, #12]
 8009cae:	4305      	orrs	r5, r0
 8009cb0:	81a5      	strh	r5, [r4, #12]
 8009cb2:	e7cd      	b.n	8009c50 <__smakebuf_r+0x18>
 8009cb4:	08009a49 	.word	0x08009a49

08009cb8 <_malloc_usable_size_r>:
 8009cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cbc:	1f18      	subs	r0, r3, #4
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	bfbc      	itt	lt
 8009cc2:	580b      	ldrlt	r3, [r1, r0]
 8009cc4:	18c0      	addlt	r0, r0, r3
 8009cc6:	4770      	bx	lr

08009cc8 <_raise_r>:
 8009cc8:	291f      	cmp	r1, #31
 8009cca:	b538      	push	{r3, r4, r5, lr}
 8009ccc:	4604      	mov	r4, r0
 8009cce:	460d      	mov	r5, r1
 8009cd0:	d904      	bls.n	8009cdc <_raise_r+0x14>
 8009cd2:	2316      	movs	r3, #22
 8009cd4:	6003      	str	r3, [r0, #0]
 8009cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009cde:	b112      	cbz	r2, 8009ce6 <_raise_r+0x1e>
 8009ce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ce4:	b94b      	cbnz	r3, 8009cfa <_raise_r+0x32>
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f000 f830 	bl	8009d4c <_getpid_r>
 8009cec:	462a      	mov	r2, r5
 8009cee:	4601      	mov	r1, r0
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cf6:	f000 b817 	b.w	8009d28 <_kill_r>
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d00a      	beq.n	8009d14 <_raise_r+0x4c>
 8009cfe:	1c59      	adds	r1, r3, #1
 8009d00:	d103      	bne.n	8009d0a <_raise_r+0x42>
 8009d02:	2316      	movs	r3, #22
 8009d04:	6003      	str	r3, [r0, #0]
 8009d06:	2001      	movs	r0, #1
 8009d08:	e7e7      	b.n	8009cda <_raise_r+0x12>
 8009d0a:	2400      	movs	r4, #0
 8009d0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d10:	4628      	mov	r0, r5
 8009d12:	4798      	blx	r3
 8009d14:	2000      	movs	r0, #0
 8009d16:	e7e0      	b.n	8009cda <_raise_r+0x12>

08009d18 <raise>:
 8009d18:	4b02      	ldr	r3, [pc, #8]	; (8009d24 <raise+0xc>)
 8009d1a:	4601      	mov	r1, r0
 8009d1c:	6818      	ldr	r0, [r3, #0]
 8009d1e:	f7ff bfd3 	b.w	8009cc8 <_raise_r>
 8009d22:	bf00      	nop
 8009d24:	20000010 	.word	0x20000010

08009d28 <_kill_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4d07      	ldr	r5, [pc, #28]	; (8009d48 <_kill_r+0x20>)
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4604      	mov	r4, r0
 8009d30:	4608      	mov	r0, r1
 8009d32:	4611      	mov	r1, r2
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	f7f7 fcfd 	bl	8001734 <_kill>
 8009d3a:	1c43      	adds	r3, r0, #1
 8009d3c:	d102      	bne.n	8009d44 <_kill_r+0x1c>
 8009d3e:	682b      	ldr	r3, [r5, #0]
 8009d40:	b103      	cbz	r3, 8009d44 <_kill_r+0x1c>
 8009d42:	6023      	str	r3, [r4, #0]
 8009d44:	bd38      	pop	{r3, r4, r5, pc}
 8009d46:	bf00      	nop
 8009d48:	200049d4 	.word	0x200049d4

08009d4c <_getpid_r>:
 8009d4c:	f7f7 bcea 	b.w	8001724 <_getpid>

08009d50 <__sread>:
 8009d50:	b510      	push	{r4, lr}
 8009d52:	460c      	mov	r4, r1
 8009d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d58:	f000 f894 	bl	8009e84 <_read_r>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	bfab      	itete	ge
 8009d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d62:	89a3      	ldrhlt	r3, [r4, #12]
 8009d64:	181b      	addge	r3, r3, r0
 8009d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d6a:	bfac      	ite	ge
 8009d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d6e:	81a3      	strhlt	r3, [r4, #12]
 8009d70:	bd10      	pop	{r4, pc}

08009d72 <__swrite>:
 8009d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d76:	461f      	mov	r7, r3
 8009d78:	898b      	ldrh	r3, [r1, #12]
 8009d7a:	05db      	lsls	r3, r3, #23
 8009d7c:	4605      	mov	r5, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	4616      	mov	r6, r2
 8009d82:	d505      	bpl.n	8009d90 <__swrite+0x1e>
 8009d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d88:	2302      	movs	r3, #2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f000 f868 	bl	8009e60 <_lseek_r>
 8009d90:	89a3      	ldrh	r3, [r4, #12]
 8009d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	4632      	mov	r2, r6
 8009d9e:	463b      	mov	r3, r7
 8009da0:	4628      	mov	r0, r5
 8009da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da6:	f000 b817 	b.w	8009dd8 <_write_r>

08009daa <__sseek>:
 8009daa:	b510      	push	{r4, lr}
 8009dac:	460c      	mov	r4, r1
 8009dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db2:	f000 f855 	bl	8009e60 <_lseek_r>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	bf15      	itete	ne
 8009dbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dc6:	81a3      	strheq	r3, [r4, #12]
 8009dc8:	bf18      	it	ne
 8009dca:	81a3      	strhne	r3, [r4, #12]
 8009dcc:	bd10      	pop	{r4, pc}

08009dce <__sclose>:
 8009dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd2:	f000 b813 	b.w	8009dfc <_close_r>
	...

08009dd8 <_write_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4d07      	ldr	r5, [pc, #28]	; (8009df8 <_write_r+0x20>)
 8009ddc:	4604      	mov	r4, r0
 8009dde:	4608      	mov	r0, r1
 8009de0:	4611      	mov	r1, r2
 8009de2:	2200      	movs	r2, #0
 8009de4:	602a      	str	r2, [r5, #0]
 8009de6:	461a      	mov	r2, r3
 8009de8:	f7f7 fcdb 	bl	80017a2 <_write>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d102      	bne.n	8009df6 <_write_r+0x1e>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	b103      	cbz	r3, 8009df6 <_write_r+0x1e>
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	200049d4 	.word	0x200049d4

08009dfc <_close_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d06      	ldr	r5, [pc, #24]	; (8009e18 <_close_r+0x1c>)
 8009e00:	2300      	movs	r3, #0
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	602b      	str	r3, [r5, #0]
 8009e08:	f7f7 fce7 	bl	80017da <_close>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_close_r+0x1a>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_close_r+0x1a>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	200049d4 	.word	0x200049d4

08009e1c <_fstat_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4d07      	ldr	r5, [pc, #28]	; (8009e3c <_fstat_r+0x20>)
 8009e20:	2300      	movs	r3, #0
 8009e22:	4604      	mov	r4, r0
 8009e24:	4608      	mov	r0, r1
 8009e26:	4611      	mov	r1, r2
 8009e28:	602b      	str	r3, [r5, #0]
 8009e2a:	f7f7 fce2 	bl	80017f2 <_fstat>
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	d102      	bne.n	8009e38 <_fstat_r+0x1c>
 8009e32:	682b      	ldr	r3, [r5, #0]
 8009e34:	b103      	cbz	r3, 8009e38 <_fstat_r+0x1c>
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	bd38      	pop	{r3, r4, r5, pc}
 8009e3a:	bf00      	nop
 8009e3c:	200049d4 	.word	0x200049d4

08009e40 <_isatty_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4d06      	ldr	r5, [pc, #24]	; (8009e5c <_isatty_r+0x1c>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	602b      	str	r3, [r5, #0]
 8009e4c:	f7f7 fce1 	bl	8001812 <_isatty>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_isatty_r+0x1a>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_isatty_r+0x1a>
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	200049d4 	.word	0x200049d4

08009e60 <_lseek_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d07      	ldr	r5, [pc, #28]	; (8009e80 <_lseek_r+0x20>)
 8009e64:	4604      	mov	r4, r0
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	602a      	str	r2, [r5, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f7f7 fcda 	bl	8001828 <_lseek>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_lseek_r+0x1e>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_lseek_r+0x1e>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	200049d4 	.word	0x200049d4

08009e84 <_read_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d07      	ldr	r5, [pc, #28]	; (8009ea4 <_read_r+0x20>)
 8009e88:	4604      	mov	r4, r0
 8009e8a:	4608      	mov	r0, r1
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	602a      	str	r2, [r5, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	f7f7 fc68 	bl	8001768 <_read>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_read_r+0x1e>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_read_r+0x1e>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	200049d4 	.word	0x200049d4

08009ea8 <_init>:
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eaa:	bf00      	nop
 8009eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eae:	bc08      	pop	{r3}
 8009eb0:	469e      	mov	lr, r3
 8009eb2:	4770      	bx	lr

08009eb4 <_fini>:
 8009eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb6:	bf00      	nop
 8009eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eba:	bc08      	pop	{r3}
 8009ebc:	469e      	mov	lr, r3
 8009ebe:	4770      	bx	lr
